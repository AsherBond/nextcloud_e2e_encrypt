{"version":3,"file":"end_to_end_encryption-files.mjs","sources":["../node_modules/cancelable-promise/esm/CancelablePromise.mjs","../node_modules/webdav/dist/web/index.js","../node_modules/@nextcloud/sharing/dist/public.mjs","../node_modules/@nextcloud/files/dist/chunks/dav-Co9y-hkg.mjs","../node_modules/@nextcloud/files/dist/index.mjs","../node_modules/fast-xml-parser/src/util.js","../node_modules/fast-xml-parser/src/validator.js","../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../node_modules/strnum/strnum.js","../node_modules/fast-xml-parser/src/ignoreAttributes.js","../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../node_modules/fast-xml-parser/src/fxp.js","../src/models.ts","../src/services/logger.ts","../node_modules/bytestreamjs/build/mjs/byte_stream.js","../node_modules/bytestreamjs/build/mjs/seq_stream.js","../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/_md.js","../node_modules/@noble/hashes/esm/sha1.js","../node_modules/@noble/hashes/esm/sha256.js","../node_modules/@noble/hashes/esm/_u64.js","../node_modules/@noble/hashes/esm/sha512.js","../node_modules/pkijs/build/index.es.js","../src/services/bufferUtils.ts","../src/services/crypto.ts","../src/services/privateKeyUtils.ts","../src/services/api.ts","../node_modules/@nextcloud/vue/dist/chunks/AlertCircleOutline-DBxbepLy.mjs","../node_modules/@nextcloud/vue/dist/chunks/Check-BkThHPH7.mjs","../node_modules/@nextcloud/vue/dist/chunks/NcInputField-ixTTHy3h.mjs","../node_modules/@nextcloud/vue/dist/chunks/NcTextField-8RXOuqAy.mjs","../src/components/MnemonicPromptDialog.vue","../src/services/mnemonicDialogs.ts","../src/services/metadataUtils.ts","../src/services/security.ts","../src/services/state.ts","../src/services/webDavProxy.ts","../node_modules/@mdi/svg/svg/arrow-down.svg?raw","../src/services/permissions.ts","../src/services/downloadUnencryptedAction.ts","../src/files.ts"],"sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nvar toStringTag = typeof Symbol !== 'undefined' ? Symbol.toStringTag : '@@toStringTag';\n\nvar _internals = /*#__PURE__*/new WeakMap();\n\nvar _promise = /*#__PURE__*/new WeakMap();\n\nclass CancelablePromiseInternal {\n  constructor(_ref) {\n    var {\n      executor = () => {},\n      internals = defaultInternals(),\n      promise = new Promise((resolve, reject) => executor(resolve, reject, onCancel => {\n        internals.onCancelList.push(onCancel);\n      }))\n    } = _ref;\n\n    _classPrivateFieldInitSpec(this, _internals, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldInitSpec(this, _promise, {\n      writable: true,\n      value: void 0\n    });\n\n    _defineProperty(this, toStringTag, 'CancelablePromise');\n\n    this.cancel = this.cancel.bind(this);\n\n    _classPrivateFieldSet(this, _internals, internals);\n\n    _classPrivateFieldSet(this, _promise, promise || new Promise((resolve, reject) => executor(resolve, reject, onCancel => {\n      internals.onCancelList.push(onCancel);\n    })));\n  }\n\n  then(onfulfilled, onrejected) {\n    return makeCancelable(_classPrivateFieldGet(this, _promise).then(createCallback(onfulfilled, _classPrivateFieldGet(this, _internals)), createCallback(onrejected, _classPrivateFieldGet(this, _internals))), _classPrivateFieldGet(this, _internals));\n  }\n\n  catch(onrejected) {\n    return makeCancelable(_classPrivateFieldGet(this, _promise).catch(createCallback(onrejected, _classPrivateFieldGet(this, _internals))), _classPrivateFieldGet(this, _internals));\n  }\n\n  finally(onfinally, runWhenCanceled) {\n    if (runWhenCanceled) {\n      _classPrivateFieldGet(this, _internals).onCancelList.push(onfinally);\n    }\n\n    return makeCancelable(_classPrivateFieldGet(this, _promise).finally(createCallback(() => {\n      if (onfinally) {\n        if (runWhenCanceled) {\n          _classPrivateFieldGet(this, _internals).onCancelList = _classPrivateFieldGet(this, _internals).onCancelList.filter(callback => callback !== onfinally);\n        }\n\n        return onfinally();\n      }\n    }, _classPrivateFieldGet(this, _internals))), _classPrivateFieldGet(this, _internals));\n  }\n\n  cancel() {\n    _classPrivateFieldGet(this, _internals).isCanceled = true;\n\n    var callbacks = _classPrivateFieldGet(this, _internals).onCancelList;\n\n    _classPrivateFieldGet(this, _internals).onCancelList = [];\n\n    for (var callback of callbacks) {\n      if (typeof callback === 'function') {\n        try {\n          callback();\n        } catch (err) {\n          console.error(err);\n        }\n      }\n    }\n  }\n\n  isCanceled() {\n    return _classPrivateFieldGet(this, _internals).isCanceled === true;\n  }\n\n}\n\nexport class CancelablePromise extends CancelablePromiseInternal {\n  constructor(executor) {\n    super({\n      executor\n    });\n  }\n\n}\n\n_defineProperty(CancelablePromise, \"all\", function all(iterable) {\n  return makeAllCancelable(iterable, Promise.all(iterable));\n});\n\n_defineProperty(CancelablePromise, \"allSettled\", function allSettled(iterable) {\n  return makeAllCancelable(iterable, Promise.allSettled(iterable));\n});\n\n_defineProperty(CancelablePromise, \"any\", function any(iterable) {\n  return makeAllCancelable(iterable, Promise.any(iterable));\n});\n\n_defineProperty(CancelablePromise, \"race\", function race(iterable) {\n  return makeAllCancelable(iterable, Promise.race(iterable));\n});\n\n_defineProperty(CancelablePromise, \"resolve\", function resolve(value) {\n  return cancelable(Promise.resolve(value));\n});\n\n_defineProperty(CancelablePromise, \"reject\", function reject(reason) {\n  return cancelable(Promise.reject(reason));\n});\n\n_defineProperty(CancelablePromise, \"isCancelable\", isCancelablePromise);\n\nexport default CancelablePromise;\nexport function cancelable(promise) {\n  return makeCancelable(promise, defaultInternals());\n}\nexport function isCancelablePromise(promise) {\n  return promise instanceof CancelablePromise || promise instanceof CancelablePromiseInternal;\n}\n\nfunction createCallback(onResult, internals) {\n  if (onResult) {\n    return arg => {\n      if (!internals.isCanceled) {\n        var result = onResult(arg);\n\n        if (isCancelablePromise(result)) {\n          internals.onCancelList.push(result.cancel);\n        }\n\n        return result;\n      }\n\n      return arg;\n    };\n  }\n}\n\nfunction makeCancelable(promise, internals) {\n  return new CancelablePromiseInternal({\n    internals,\n    promise\n  });\n}\n\nfunction makeAllCancelable(iterable, promise) {\n  var internals = defaultInternals();\n  internals.onCancelList.push(() => {\n    for (var resolvable of iterable) {\n      if (isCancelablePromise(resolvable)) {\n        resolvable.cancel();\n      }\n    }\n  });\n  return new CancelablePromiseInternal({\n    internals,\n    promise\n  });\n}\n\nfunction defaultInternals() {\n  return {\n    isCanceled: false,\n    onCancelList: []\n  };\n}\n//# sourceMappingURL=CancelablePromise.mjs.map","/*! For license information please see index.js.LICENSE.txt */\nvar t={2:t=>{function e(t,e,o){t instanceof RegExp&&(t=n(t,o)),e instanceof RegExp&&(e=n(e,o));var i=r(t,e,o);return i&&{start:i[0],end:i[1],pre:o.slice(0,i[0]),body:o.slice(i[0]+t.length,i[1]),post:o.slice(i[1]+e.length)}}function n(t,e){var n=e.match(t);return n?n[0]:null}function r(t,e,n){var r,o,i,s,a,u=n.indexOf(t),c=n.indexOf(e,u+1),l=u;if(u>=0&&c>0){for(r=[],i=n.length;l>=0&&!a;)l==u?(r.push(l),u=n.indexOf(t,l+1)):1==r.length?a=[r.pop(),c]:((o=r.pop())<i&&(i=o,s=c),c=n.indexOf(e,l+1)),l=u<c&&u>=0?u:c;r.length&&(a=[i,s])}return a}t.exports=e,e.range=r},101:function(t,e,n){var r;t=n.nmd(t),function(o){var i=(t&&t.exports,\"object\"==typeof global&&global);i.global!==i&&i.window;var s=function(t){this.message=t};(s.prototype=new Error).name=\"InvalidCharacterError\";var a=function(t){throw new s(t)},u=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",c=/[\\t\\n\\f\\r ]/g,l={encode:function(t){t=String(t),/[^\\0-\\xFF]/.test(t)&&a(\"The string to be encoded contains characters outside of the Latin1 range.\");for(var e,n,r,o,i=t.length%3,s=\"\",c=-1,l=t.length-i;++c<l;)e=t.charCodeAt(c)<<16,n=t.charCodeAt(++c)<<8,r=t.charCodeAt(++c),s+=u.charAt((o=e+n+r)>>18&63)+u.charAt(o>>12&63)+u.charAt(o>>6&63)+u.charAt(63&o);return 2==i?(e=t.charCodeAt(c)<<8,n=t.charCodeAt(++c),s+=u.charAt((o=e+n)>>10)+u.charAt(o>>4&63)+u.charAt(o<<2&63)+\"=\"):1==i&&(o=t.charCodeAt(c),s+=u.charAt(o>>2)+u.charAt(o<<4&63)+\"==\"),s},decode:function(t){var e=(t=String(t).replace(c,\"\")).length;e%4==0&&(e=(t=t.replace(/==?$/,\"\")).length),(e%4==1||/[^+a-zA-Z0-9/]/.test(t))&&a(\"Invalid character: the string to be decoded is not correctly encoded.\");for(var n,r,o=0,i=\"\",s=-1;++s<e;)r=u.indexOf(t.charAt(s)),n=o%4?64*n+r:r,o++%4&&(i+=String.fromCharCode(255&n>>(-2*o&6)));return i},version:\"1.0.0\"};void 0===(r=function(){return l}.call(e,n,e,t))||(t.exports=r)}()},172:(t,e)=>{e.d=function(t){if(!t)return 0;for(var e=(t=t.toString()).length,n=t.length;n--;){var r=t.charCodeAt(n);56320<=r&&r<=57343&&n--,127<r&&r<=2047?e++:2047<r&&r<=65535&&(e+=2)}return e}},526:t=>{var e={utf8:{stringToBytes:function(t){return e.bin.stringToBytes(unescape(encodeURIComponent(t)))},bytesToString:function(t){return decodeURIComponent(escape(e.bin.bytesToString(t)))}},bin:{stringToBytes:function(t){for(var e=[],n=0;n<t.length;n++)e.push(255&t.charCodeAt(n));return e},bytesToString:function(t){for(var e=[],n=0;n<t.length;n++)e.push(String.fromCharCode(t[n]));return e.join(\"\")}}};t.exports=e},298:t=>{var e,n;e=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",n={rotl:function(t,e){return t<<e|t>>>32-e},rotr:function(t,e){return t<<32-e|t>>>e},endian:function(t){if(t.constructor==Number)return 16711935&n.rotl(t,8)|4278255360&n.rotl(t,24);for(var e=0;e<t.length;e++)t[e]=n.endian(t[e]);return t},randomBytes:function(t){for(var e=[];t>0;t--)e.push(Math.floor(256*Math.random()));return e},bytesToWords:function(t){for(var e=[],n=0,r=0;n<t.length;n++,r+=8)e[r>>>5]|=t[n]<<24-r%32;return e},wordsToBytes:function(t){for(var e=[],n=0;n<32*t.length;n+=8)e.push(t[n>>>5]>>>24-n%32&255);return e},bytesToHex:function(t){for(var e=[],n=0;n<t.length;n++)e.push((t[n]>>>4).toString(16)),e.push((15&t[n]).toString(16));return e.join(\"\")},hexToBytes:function(t){for(var e=[],n=0;n<t.length;n+=2)e.push(parseInt(t.substr(n,2),16));return e},bytesToBase64:function(t){for(var n=[],r=0;r<t.length;r+=3)for(var o=t[r]<<16|t[r+1]<<8|t[r+2],i=0;i<4;i++)8*r+6*i<=8*t.length?n.push(e.charAt(o>>>6*(3-i)&63)):n.push(\"=\");return n.join(\"\")},base64ToBytes:function(t){t=t.replace(/[^A-Z0-9+\\/]/gi,\"\");for(var n=[],r=0,o=0;r<t.length;o=++r%4)0!=o&&n.push((e.indexOf(t.charAt(r-1))&Math.pow(2,-2*o+8)-1)<<2*o|e.indexOf(t.charAt(r))>>>6-2*o);return n}},t.exports=n},635:(t,e,n)=>{const r=n(31),o=n(338),i=n(221);t.exports={XMLParser:o,XMLValidator:r,XMLBuilder:i}},705:(t,e)=>{const n=\":A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\",r=\"[\"+n+\"][\"+n+\"\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]*\",o=new RegExp(\"^\"+r+\"$\");e.isExist=function(t){return void 0!==t},e.isEmptyObject=function(t){return 0===Object.keys(t).length},e.merge=function(t,e,n){if(e){const r=Object.keys(e),o=r.length;for(let i=0;i<o;i++)t[r[i]]=\"strict\"===n?[e[r[i]]]:e[r[i]]}},e.getValue=function(t){return e.isExist(t)?t:\"\"},e.isName=function(t){return!(null==o.exec(t))},e.getAllMatches=function(t,e){const n=[];let r=e.exec(t);for(;r;){const o=[];o.startIndex=e.lastIndex-r[0].length;const i=r.length;for(let t=0;t<i;t++)o.push(r[t]);n.push(o),r=e.exec(t)}return n},e.nameRegexp=r},31:(t,e,n)=>{const r=n(705),o={allowBooleanAttributes:!1,unpairedTags:[]};function i(t){return\" \"===t||\"\\t\"===t||\"\\n\"===t||\"\\r\"===t}function s(t,e){const n=e;for(;e<t.length;e++)if(\"?\"!=t[e]&&\" \"!=t[e]);else{const r=t.substr(n,e-n);if(e>5&&\"xml\"===r)return d(\"InvalidXml\",\"XML declaration allowed only at the start of the document.\",m(t,e));if(\"?\"==t[e]&&\">\"==t[e+1]){e++;break}}return e}function a(t,e){if(t.length>e+5&&\"-\"===t[e+1]&&\"-\"===t[e+2]){for(e+=3;e<t.length;e++)if(\"-\"===t[e]&&\"-\"===t[e+1]&&\">\"===t[e+2]){e+=2;break}}else if(t.length>e+8&&\"D\"===t[e+1]&&\"O\"===t[e+2]&&\"C\"===t[e+3]&&\"T\"===t[e+4]&&\"Y\"===t[e+5]&&\"P\"===t[e+6]&&\"E\"===t[e+7]){let n=1;for(e+=8;e<t.length;e++)if(\"<\"===t[e])n++;else if(\">\"===t[e]&&(n--,0===n))break}else if(t.length>e+9&&\"[\"===t[e+1]&&\"C\"===t[e+2]&&\"D\"===t[e+3]&&\"A\"===t[e+4]&&\"T\"===t[e+5]&&\"A\"===t[e+6]&&\"[\"===t[e+7])for(e+=8;e<t.length;e++)if(\"]\"===t[e]&&\"]\"===t[e+1]&&\">\"===t[e+2]){e+=2;break}return e}e.validate=function(t,e){e=Object.assign({},o,e);const n=[];let u=!1,c=!1;\"\\ufeff\"===t[0]&&(t=t.substr(1));for(let o=0;o<t.length;o++)if(\"<\"===t[o]&&\"?\"===t[o+1]){if(o+=2,o=s(t,o),o.err)return o}else{if(\"<\"!==t[o]){if(i(t[o]))continue;return d(\"InvalidChar\",\"char '\"+t[o]+\"' is not expected.\",m(t,o))}{let g=o;if(o++,\"!\"===t[o]){o=a(t,o);continue}{let y=!1;\"/\"===t[o]&&(y=!0,o++);let v=\"\";for(;o<t.length&&\">\"!==t[o]&&\" \"!==t[o]&&\"\\t\"!==t[o]&&\"\\n\"!==t[o]&&\"\\r\"!==t[o];o++)v+=t[o];if(v=v.trim(),\"/\"===v[v.length-1]&&(v=v.substring(0,v.length-1),o--),h=v,!r.isName(h)){let e;return e=0===v.trim().length?\"Invalid space after '<'.\":\"Tag '\"+v+\"' is an invalid name.\",d(\"InvalidTag\",e,m(t,o))}const b=l(t,o);if(!1===b)return d(\"InvalidAttr\",\"Attributes for '\"+v+\"' have open quote.\",m(t,o));let w=b.value;if(o=b.index,\"/\"===w[w.length-1]){const n=o-w.length;w=w.substring(0,w.length-1);const r=p(w,e);if(!0!==r)return d(r.err.code,r.err.msg,m(t,n+r.err.line));u=!0}else if(y){if(!b.tagClosed)return d(\"InvalidTag\",\"Closing tag '\"+v+\"' doesn't have proper closing.\",m(t,o));if(w.trim().length>0)return d(\"InvalidTag\",\"Closing tag '\"+v+\"' can't have attributes or invalid starting.\",m(t,g));if(0===n.length)return d(\"InvalidTag\",\"Closing tag '\"+v+\"' has not been opened.\",m(t,g));{const e=n.pop();if(v!==e.tagName){let n=m(t,e.tagStartPos);return d(\"InvalidTag\",\"Expected closing tag '\"+e.tagName+\"' (opened in line \"+n.line+\", col \"+n.col+\") instead of closing tag '\"+v+\"'.\",m(t,g))}0==n.length&&(c=!0)}}else{const r=p(w,e);if(!0!==r)return d(r.err.code,r.err.msg,m(t,o-w.length+r.err.line));if(!0===c)return d(\"InvalidXml\",\"Multiple possible root nodes found.\",m(t,o));-1!==e.unpairedTags.indexOf(v)||n.push({tagName:v,tagStartPos:g}),u=!0}for(o++;o<t.length;o++)if(\"<\"===t[o]){if(\"!\"===t[o+1]){o++,o=a(t,o);continue}if(\"?\"!==t[o+1])break;if(o=s(t,++o),o.err)return o}else if(\"&\"===t[o]){const e=f(t,o);if(-1==e)return d(\"InvalidChar\",\"char '&' is not expected.\",m(t,o));o=e}else if(!0===c&&!i(t[o]))return d(\"InvalidXml\",\"Extra text at the end\",m(t,o));\"<\"===t[o]&&o--}}}var h;return u?1==n.length?d(\"InvalidTag\",\"Unclosed tag '\"+n[0].tagName+\"'.\",m(t,n[0].tagStartPos)):!(n.length>0)||d(\"InvalidXml\",\"Invalid '\"+JSON.stringify(n.map((t=>t.tagName)),null,4).replace(/\\r?\\n/g,\"\")+\"' found.\",{line:1,col:1}):d(\"InvalidXml\",\"Start tag expected.\",1)};const u='\"',c=\"'\";function l(t,e){let n=\"\",r=\"\",o=!1;for(;e<t.length;e++){if(t[e]===u||t[e]===c)\"\"===r?r=t[e]:r!==t[e]||(r=\"\");else if(\">\"===t[e]&&\"\"===r){o=!0;break}n+=t[e]}return\"\"===r&&{value:n,index:e,tagClosed:o}}const h=new RegExp(\"(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*(['\\\"])(([\\\\s\\\\S])*?)\\\\5)?\",\"g\");function p(t,e){const n=r.getAllMatches(t,h),o={};for(let t=0;t<n.length;t++){if(0===n[t][1].length)return d(\"InvalidAttr\",\"Attribute '\"+n[t][2]+\"' has no space in starting.\",y(n[t]));if(void 0!==n[t][3]&&void 0===n[t][4])return d(\"InvalidAttr\",\"Attribute '\"+n[t][2]+\"' is without value.\",y(n[t]));if(void 0===n[t][3]&&!e.allowBooleanAttributes)return d(\"InvalidAttr\",\"boolean attribute '\"+n[t][2]+\"' is not allowed.\",y(n[t]));const r=n[t][2];if(!g(r))return d(\"InvalidAttr\",\"Attribute '\"+r+\"' is an invalid name.\",y(n[t]));if(o.hasOwnProperty(r))return d(\"InvalidAttr\",\"Attribute '\"+r+\"' is repeated.\",y(n[t]));o[r]=1}return!0}function f(t,e){if(\";\"===t[++e])return-1;if(\"#\"===t[e])return function(t,e){let n=/\\d/;for(\"x\"===t[e]&&(e++,n=/[\\da-fA-F]/);e<t.length;e++){if(\";\"===t[e])return e;if(!t[e].match(n))break}return-1}(t,++e);let n=0;for(;e<t.length;e++,n++)if(!(t[e].match(/\\w/)&&n<20)){if(\";\"===t[e])break;return-1}return e}function d(t,e,n){return{err:{code:t,msg:e,line:n.line||n,col:n.col}}}function g(t){return r.isName(t)}function m(t,e){const n=t.substring(0,e).split(/\\r?\\n/);return{line:n.length,col:n[n.length-1].length+1}}function y(t){return t.startIndex+t[1].length}},221:(t,e,n)=>{const r=n(87),o={attributeNamePrefix:\"@_\",attributesGroupName:!1,textNodeName:\"#text\",ignoreAttributes:!0,cdataPropName:!1,format:!1,indentBy:\"  \",suppressEmptyNode:!1,suppressUnpairedNode:!0,suppressBooleanAttributes:!0,tagValueProcessor:function(t,e){return e},attributeValueProcessor:function(t,e){return e},preserveOrder:!1,commentPropName:!1,unpairedTags:[],entities:[{regex:new RegExp(\"&\",\"g\"),val:\"&amp;\"},{regex:new RegExp(\">\",\"g\"),val:\"&gt;\"},{regex:new RegExp(\"<\",\"g\"),val:\"&lt;\"},{regex:new RegExp(\"'\",\"g\"),val:\"&apos;\"},{regex:new RegExp('\"',\"g\"),val:\"&quot;\"}],processEntities:!0,stopNodes:[],oneListGroup:!1};function i(t){this.options=Object.assign({},o,t),this.options.ignoreAttributes||this.options.attributesGroupName?this.isAttribute=function(){return!1}:(this.attrPrefixLen=this.options.attributeNamePrefix.length,this.isAttribute=u),this.processTextOrObjNode=s,this.options.format?(this.indentate=a,this.tagEndChar=\">\\n\",this.newLine=\"\\n\"):(this.indentate=function(){return\"\"},this.tagEndChar=\">\",this.newLine=\"\")}function s(t,e,n){const r=this.j2x(t,n+1);return void 0!==t[this.options.textNodeName]&&1===Object.keys(t).length?this.buildTextValNode(t[this.options.textNodeName],e,r.attrStr,n):this.buildObjectNode(r.val,e,r.attrStr,n)}function a(t){return this.options.indentBy.repeat(t)}function u(t){return!(!t.startsWith(this.options.attributeNamePrefix)||t===this.options.textNodeName)&&t.substr(this.attrPrefixLen)}i.prototype.build=function(t){return this.options.preserveOrder?r(t,this.options):(Array.isArray(t)&&this.options.arrayNodeName&&this.options.arrayNodeName.length>1&&(t={[this.options.arrayNodeName]:t}),this.j2x(t,0).val)},i.prototype.j2x=function(t,e){let n=\"\",r=\"\";for(let o in t)if(Object.prototype.hasOwnProperty.call(t,o))if(void 0===t[o])this.isAttribute(o)&&(r+=\"\");else if(null===t[o])this.isAttribute(o)?r+=\"\":\"?\"===o[0]?r+=this.indentate(e)+\"<\"+o+\"?\"+this.tagEndChar:r+=this.indentate(e)+\"<\"+o+\"/\"+this.tagEndChar;else if(t[o]instanceof Date)r+=this.buildTextValNode(t[o],o,\"\",e);else if(\"object\"!=typeof t[o]){const i=this.isAttribute(o);if(i)n+=this.buildAttrPairStr(i,\"\"+t[o]);else if(o===this.options.textNodeName){let e=this.options.tagValueProcessor(o,\"\"+t[o]);r+=this.replaceEntitiesValue(e)}else r+=this.buildTextValNode(t[o],o,\"\",e)}else if(Array.isArray(t[o])){const n=t[o].length;let i=\"\",s=\"\";for(let a=0;a<n;a++){const n=t[o][a];if(void 0===n);else if(null===n)\"?\"===o[0]?r+=this.indentate(e)+\"<\"+o+\"?\"+this.tagEndChar:r+=this.indentate(e)+\"<\"+o+\"/\"+this.tagEndChar;else if(\"object\"==typeof n)if(this.options.oneListGroup){const t=this.j2x(n,e+1);i+=t.val,this.options.attributesGroupName&&n.hasOwnProperty(this.options.attributesGroupName)&&(s+=t.attrStr)}else i+=this.processTextOrObjNode(n,o,e);else if(this.options.oneListGroup){let t=this.options.tagValueProcessor(o,n);t=this.replaceEntitiesValue(t),i+=t}else i+=this.buildTextValNode(n,o,\"\",e)}this.options.oneListGroup&&(i=this.buildObjectNode(i,o,s,e)),r+=i}else if(this.options.attributesGroupName&&o===this.options.attributesGroupName){const e=Object.keys(t[o]),r=e.length;for(let i=0;i<r;i++)n+=this.buildAttrPairStr(e[i],\"\"+t[o][e[i]])}else r+=this.processTextOrObjNode(t[o],o,e);return{attrStr:n,val:r}},i.prototype.buildAttrPairStr=function(t,e){return e=this.options.attributeValueProcessor(t,\"\"+e),e=this.replaceEntitiesValue(e),this.options.suppressBooleanAttributes&&\"true\"===e?\" \"+t:\" \"+t+'=\"'+e+'\"'},i.prototype.buildObjectNode=function(t,e,n,r){if(\"\"===t)return\"?\"===e[0]?this.indentate(r)+\"<\"+e+n+\"?\"+this.tagEndChar:this.indentate(r)+\"<\"+e+n+this.closeTag(e)+this.tagEndChar;{let o=\"</\"+e+this.tagEndChar,i=\"\";return\"?\"===e[0]&&(i=\"?\",o=\"\"),!n&&\"\"!==n||-1!==t.indexOf(\"<\")?!1!==this.options.commentPropName&&e===this.options.commentPropName&&0===i.length?this.indentate(r)+`\\x3c!--${t}--\\x3e`+this.newLine:this.indentate(r)+\"<\"+e+n+i+this.tagEndChar+t+this.indentate(r)+o:this.indentate(r)+\"<\"+e+n+i+\">\"+t+o}},i.prototype.closeTag=function(t){let e=\"\";return-1!==this.options.unpairedTags.indexOf(t)?this.options.suppressUnpairedNode||(e=\"/\"):e=this.options.suppressEmptyNode?\"/\":`></${t}`,e},i.prototype.buildTextValNode=function(t,e,n,r){if(!1!==this.options.cdataPropName&&e===this.options.cdataPropName)return this.indentate(r)+`<![CDATA[${t}]]>`+this.newLine;if(!1!==this.options.commentPropName&&e===this.options.commentPropName)return this.indentate(r)+`\\x3c!--${t}--\\x3e`+this.newLine;if(\"?\"===e[0])return this.indentate(r)+\"<\"+e+n+\"?\"+this.tagEndChar;{let o=this.options.tagValueProcessor(e,t);return o=this.replaceEntitiesValue(o),\"\"===o?this.indentate(r)+\"<\"+e+n+this.closeTag(e)+this.tagEndChar:this.indentate(r)+\"<\"+e+n+\">\"+o+\"</\"+e+this.tagEndChar}},i.prototype.replaceEntitiesValue=function(t){if(t&&t.length>0&&this.options.processEntities)for(let e=0;e<this.options.entities.length;e++){const n=this.options.entities[e];t=t.replace(n.regex,n.val)}return t},t.exports=i},87:t=>{function e(t,s,a,u){let c=\"\",l=!1;for(let h=0;h<t.length;h++){const p=t[h],f=n(p);if(void 0===f)continue;let d=\"\";if(d=0===a.length?f:`${a}.${f}`,f===s.textNodeName){let t=p[f];o(d,s)||(t=s.tagValueProcessor(f,t),t=i(t,s)),l&&(c+=u),c+=t,l=!1;continue}if(f===s.cdataPropName){l&&(c+=u),c+=`<![CDATA[${p[f][0][s.textNodeName]}]]>`,l=!1;continue}if(f===s.commentPropName){c+=u+`\\x3c!--${p[f][0][s.textNodeName]}--\\x3e`,l=!0;continue}if(\"?\"===f[0]){const t=r(p[\":@\"],s),e=\"?xml\"===f?\"\":u;let n=p[f][0][s.textNodeName];n=0!==n.length?\" \"+n:\"\",c+=e+`<${f}${n}${t}?>`,l=!0;continue}let g=u;\"\"!==g&&(g+=s.indentBy);const m=u+`<${f}${r(p[\":@\"],s)}`,y=e(p[f],s,d,g);-1!==s.unpairedTags.indexOf(f)?s.suppressUnpairedNode?c+=m+\">\":c+=m+\"/>\":y&&0!==y.length||!s.suppressEmptyNode?y&&y.endsWith(\">\")?c+=m+`>${y}${u}</${f}>`:(c+=m+\">\",y&&\"\"!==u&&(y.includes(\"/>\")||y.includes(\"</\"))?c+=u+s.indentBy+y+u:c+=y,c+=`</${f}>`):c+=m+\"/>\",l=!0}return c}function n(t){const e=Object.keys(t);for(let n=0;n<e.length;n++){const r=e[n];if(t.hasOwnProperty(r)&&\":@\"!==r)return r}}function r(t,e){let n=\"\";if(t&&!e.ignoreAttributes)for(let r in t){if(!t.hasOwnProperty(r))continue;let o=e.attributeValueProcessor(r,t[r]);o=i(o,e),!0===o&&e.suppressBooleanAttributes?n+=` ${r.substr(e.attributeNamePrefix.length)}`:n+=` ${r.substr(e.attributeNamePrefix.length)}=\"${o}\"`}return n}function o(t,e){let n=(t=t.substr(0,t.length-e.textNodeName.length-1)).substr(t.lastIndexOf(\".\")+1);for(let r in e.stopNodes)if(e.stopNodes[r]===t||e.stopNodes[r]===\"*.\"+n)return!0;return!1}function i(t,e){if(t&&t.length>0&&e.processEntities)for(let n=0;n<e.entities.length;n++){const r=e.entities[n];t=t.replace(r.regex,r.val)}return t}t.exports=function(t,n){let r=\"\";return n.format&&n.indentBy.length>0&&(r=\"\\n\"),e(t,n,\"\",r)}},193:(t,e,n)=>{const r=n(705);function o(t,e){let n=\"\";for(;e<t.length&&\"'\"!==t[e]&&'\"'!==t[e];e++)n+=t[e];if(n=n.trim(),-1!==n.indexOf(\" \"))throw new Error(\"External entites are not supported\");const r=t[e++];let o=\"\";for(;e<t.length&&t[e]!==r;e++)o+=t[e];return[n,o,e]}function i(t,e){return\"!\"===t[e+1]&&\"-\"===t[e+2]&&\"-\"===t[e+3]}function s(t,e){return\"!\"===t[e+1]&&\"E\"===t[e+2]&&\"N\"===t[e+3]&&\"T\"===t[e+4]&&\"I\"===t[e+5]&&\"T\"===t[e+6]&&\"Y\"===t[e+7]}function a(t,e){return\"!\"===t[e+1]&&\"E\"===t[e+2]&&\"L\"===t[e+3]&&\"E\"===t[e+4]&&\"M\"===t[e+5]&&\"E\"===t[e+6]&&\"N\"===t[e+7]&&\"T\"===t[e+8]}function u(t,e){return\"!\"===t[e+1]&&\"A\"===t[e+2]&&\"T\"===t[e+3]&&\"T\"===t[e+4]&&\"L\"===t[e+5]&&\"I\"===t[e+6]&&\"S\"===t[e+7]&&\"T\"===t[e+8]}function c(t,e){return\"!\"===t[e+1]&&\"N\"===t[e+2]&&\"O\"===t[e+3]&&\"T\"===t[e+4]&&\"A\"===t[e+5]&&\"T\"===t[e+6]&&\"I\"===t[e+7]&&\"O\"===t[e+8]&&\"N\"===t[e+9]}function l(t){if(r.isName(t))return t;throw new Error(`Invalid entity name ${t}`)}t.exports=function(t,e){const n={};if(\"O\"!==t[e+3]||\"C\"!==t[e+4]||\"T\"!==t[e+5]||\"Y\"!==t[e+6]||\"P\"!==t[e+7]||\"E\"!==t[e+8])throw new Error(\"Invalid Tag instead of DOCTYPE\");{e+=9;let r=1,h=!1,p=!1,f=\"\";for(;e<t.length;e++)if(\"<\"!==t[e]||p)if(\">\"===t[e]){if(p?\"-\"===t[e-1]&&\"-\"===t[e-2]&&(p=!1,r--):r--,0===r)break}else\"[\"===t[e]?h=!0:f+=t[e];else{if(h&&s(t,e))e+=7,[entityName,val,e]=o(t,e+1),-1===val.indexOf(\"&\")&&(n[l(entityName)]={regx:RegExp(`&${entityName};`,\"g\"),val});else if(h&&a(t,e))e+=8;else if(h&&u(t,e))e+=8;else if(h&&c(t,e))e+=9;else{if(!i)throw new Error(\"Invalid DOCTYPE\");p=!0}r++,f=\"\"}if(0!==r)throw new Error(\"Unclosed DOCTYPE\")}return{entities:n,i:e}}},63:(t,e)=>{const n={preserveOrder:!1,attributeNamePrefix:\"@_\",attributesGroupName:!1,textNodeName:\"#text\",ignoreAttributes:!0,removeNSPrefix:!1,allowBooleanAttributes:!1,parseTagValue:!0,parseAttributeValue:!1,trimValues:!0,cdataPropName:!1,numberParseOptions:{hex:!0,leadingZeros:!0,eNotation:!0},tagValueProcessor:function(t,e){return e},attributeValueProcessor:function(t,e){return e},stopNodes:[],alwaysCreateTextNode:!1,isArray:()=>!1,commentPropName:!1,unpairedTags:[],processEntities:!0,htmlEntities:!1,ignoreDeclaration:!1,ignorePiTags:!1,transformTagName:!1,transformAttributeName:!1,updateTag:function(t,e,n){return t}};e.buildOptions=function(t){return Object.assign({},n,t)},e.defaultOptions=n},299:(t,e,n)=>{const r=n(705),o=n(365),i=n(193),s=n(494);function a(t){const e=Object.keys(t);for(let n=0;n<e.length;n++){const r=e[n];this.lastEntities[r]={regex:new RegExp(\"&\"+r+\";\",\"g\"),val:t[r]}}}function u(t,e,n,r,o,i,s){if(void 0!==t&&(this.options.trimValues&&!r&&(t=t.trim()),t.length>0)){s||(t=this.replaceEntitiesValue(t));const r=this.options.tagValueProcessor(e,t,n,o,i);return null==r?t:typeof r!=typeof t||r!==t?r:this.options.trimValues||t.trim()===t?w(t,this.options.parseTagValue,this.options.numberParseOptions):t}}function c(t){if(this.options.removeNSPrefix){const e=t.split(\":\"),n=\"/\"===t.charAt(0)?\"/\":\"\";if(\"xmlns\"===e[0])return\"\";2===e.length&&(t=n+e[1])}return t}const l=new RegExp(\"([^\\\\s=]+)\\\\s*(=\\\\s*(['\\\"])([\\\\s\\\\S]*?)\\\\3)?\",\"gm\");function h(t,e,n){if(!this.options.ignoreAttributes&&\"string\"==typeof t){const n=r.getAllMatches(t,l),o=n.length,i={};for(let t=0;t<o;t++){const r=this.resolveNameSpace(n[t][1]);let o=n[t][4],s=this.options.attributeNamePrefix+r;if(r.length)if(this.options.transformAttributeName&&(s=this.options.transformAttributeName(s)),\"__proto__\"===s&&(s=\"#__proto__\"),void 0!==o){this.options.trimValues&&(o=o.trim()),o=this.replaceEntitiesValue(o);const t=this.options.attributeValueProcessor(r,o,e);i[s]=null==t?o:typeof t!=typeof o||t!==o?t:w(o,this.options.parseAttributeValue,this.options.numberParseOptions)}else this.options.allowBooleanAttributes&&(i[s]=!0)}if(!Object.keys(i).length)return;if(this.options.attributesGroupName){const t={};return t[this.options.attributesGroupName]=i,t}return i}}const p=function(t){t=t.replace(/\\r\\n?/g,\"\\n\");const e=new o(\"!xml\");let n=e,r=\"\",s=\"\";for(let a=0;a<t.length;a++)if(\"<\"===t[a])if(\"/\"===t[a+1]){const e=y(t,\">\",a,\"Closing Tag is not closed.\");let o=t.substring(a+2,e).trim();if(this.options.removeNSPrefix){const t=o.indexOf(\":\");-1!==t&&(o=o.substr(t+1))}this.options.transformTagName&&(o=this.options.transformTagName(o)),n&&(r=this.saveTextToParentTag(r,n,s));const i=s.substring(s.lastIndexOf(\".\")+1);if(o&&-1!==this.options.unpairedTags.indexOf(o))throw new Error(`Unpaired tag can not be used as closing tag: </${o}>`);let u=0;i&&-1!==this.options.unpairedTags.indexOf(i)?(u=s.lastIndexOf(\".\",s.lastIndexOf(\".\")-1),this.tagsNodeStack.pop()):u=s.lastIndexOf(\".\"),s=s.substring(0,u),n=this.tagsNodeStack.pop(),r=\"\",a=e}else if(\"?\"===t[a+1]){let e=v(t,a,!1,\"?>\");if(!e)throw new Error(\"Pi Tag is not closed.\");if(r=this.saveTextToParentTag(r,n,s),this.options.ignoreDeclaration&&\"?xml\"===e.tagName||this.options.ignorePiTags);else{const t=new o(e.tagName);t.add(this.options.textNodeName,\"\"),e.tagName!==e.tagExp&&e.attrExpPresent&&(t[\":@\"]=this.buildAttributesMap(e.tagExp,s,e.tagName)),this.addChild(n,t,s)}a=e.closeIndex+1}else if(\"!--\"===t.substr(a+1,3)){const e=y(t,\"--\\x3e\",a+4,\"Comment is not closed.\");if(this.options.commentPropName){const o=t.substring(a+4,e-2);r=this.saveTextToParentTag(r,n,s),n.add(this.options.commentPropName,[{[this.options.textNodeName]:o}])}a=e}else if(\"!D\"===t.substr(a+1,2)){const e=i(t,a);this.docTypeEntities=e.entities,a=e.i}else if(\"![\"===t.substr(a+1,2)){const e=y(t,\"]]>\",a,\"CDATA is not closed.\")-2,o=t.substring(a+9,e);r=this.saveTextToParentTag(r,n,s);let i=this.parseTextData(o,n.tagname,s,!0,!1,!0,!0);null==i&&(i=\"\"),this.options.cdataPropName?n.add(this.options.cdataPropName,[{[this.options.textNodeName]:o}]):n.add(this.options.textNodeName,i),a=e+2}else{let i=v(t,a,this.options.removeNSPrefix),u=i.tagName;const c=i.rawTagName;let l=i.tagExp,h=i.attrExpPresent,p=i.closeIndex;this.options.transformTagName&&(u=this.options.transformTagName(u)),n&&r&&\"!xml\"!==n.tagname&&(r=this.saveTextToParentTag(r,n,s,!1));const f=n;if(f&&-1!==this.options.unpairedTags.indexOf(f.tagname)&&(n=this.tagsNodeStack.pop(),s=s.substring(0,s.lastIndexOf(\".\"))),u!==e.tagname&&(s+=s?\".\"+u:u),this.isItStopNode(this.options.stopNodes,s,u)){let e=\"\";if(l.length>0&&l.lastIndexOf(\"/\")===l.length-1)\"/\"===u[u.length-1]?(u=u.substr(0,u.length-1),s=s.substr(0,s.length-1),l=u):l=l.substr(0,l.length-1),a=i.closeIndex;else if(-1!==this.options.unpairedTags.indexOf(u))a=i.closeIndex;else{const n=this.readStopNodeData(t,c,p+1);if(!n)throw new Error(`Unexpected end of ${c}`);a=n.i,e=n.tagContent}const r=new o(u);u!==l&&h&&(r[\":@\"]=this.buildAttributesMap(l,s,u)),e&&(e=this.parseTextData(e,u,s,!0,h,!0,!0)),s=s.substr(0,s.lastIndexOf(\".\")),r.add(this.options.textNodeName,e),this.addChild(n,r,s)}else{if(l.length>0&&l.lastIndexOf(\"/\")===l.length-1){\"/\"===u[u.length-1]?(u=u.substr(0,u.length-1),s=s.substr(0,s.length-1),l=u):l=l.substr(0,l.length-1),this.options.transformTagName&&(u=this.options.transformTagName(u));const t=new o(u);u!==l&&h&&(t[\":@\"]=this.buildAttributesMap(l,s,u)),this.addChild(n,t,s),s=s.substr(0,s.lastIndexOf(\".\"))}else{const t=new o(u);this.tagsNodeStack.push(n),u!==l&&h&&(t[\":@\"]=this.buildAttributesMap(l,s,u)),this.addChild(n,t,s),n=t}r=\"\",a=p}}else r+=t[a];return e.child};function f(t,e,n){const r=this.options.updateTag(e.tagname,n,e[\":@\"]);!1===r||(\"string\"==typeof r?(e.tagname=r,t.addChild(e)):t.addChild(e))}const d=function(t){if(this.options.processEntities){for(let e in this.docTypeEntities){const n=this.docTypeEntities[e];t=t.replace(n.regx,n.val)}for(let e in this.lastEntities){const n=this.lastEntities[e];t=t.replace(n.regex,n.val)}if(this.options.htmlEntities)for(let e in this.htmlEntities){const n=this.htmlEntities[e];t=t.replace(n.regex,n.val)}t=t.replace(this.ampEntity.regex,this.ampEntity.val)}return t};function g(t,e,n,r){return t&&(void 0===r&&(r=0===Object.keys(e.child).length),void 0!==(t=this.parseTextData(t,e.tagname,n,!1,!!e[\":@\"]&&0!==Object.keys(e[\":@\"]).length,r))&&\"\"!==t&&e.add(this.options.textNodeName,t),t=\"\"),t}function m(t,e,n){const r=\"*.\"+n;for(const n in t){const o=t[n];if(r===o||e===o)return!0}return!1}function y(t,e,n,r){const o=t.indexOf(e,n);if(-1===o)throw new Error(r);return o+e.length-1}function v(t,e,n){const r=function(t,e){let n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\">\",o=\"\";for(let i=e;i<t.length;i++){let e=t[i];if(n)e===n&&(n=\"\");else if('\"'===e||\"'\"===e)n=e;else if(e===r[0]){if(!r[1])return{data:o,index:i};if(t[i+1]===r[1])return{data:o,index:i}}else\"\\t\"===e&&(e=\" \");o+=e}}(t,e+1,arguments.length>3&&void 0!==arguments[3]?arguments[3]:\">\");if(!r)return;let o=r.data;const i=r.index,s=o.search(/\\s/);let a=o,u=!0;-1!==s&&(a=o.substring(0,s),o=o.substring(s+1).trimStart());const c=a;if(n){const t=a.indexOf(\":\");-1!==t&&(a=a.substr(t+1),u=a!==r.data.substr(t+1))}return{tagName:a,tagExp:o,closeIndex:i,attrExpPresent:u,rawTagName:c}}function b(t,e,n){const r=n;let o=1;for(;n<t.length;n++)if(\"<\"===t[n])if(\"/\"===t[n+1]){const i=y(t,\">\",n,`${e} is not closed`);if(t.substring(n+2,i).trim()===e&&(o--,0===o))return{tagContent:t.substring(r,n),i};n=i}else if(\"?\"===t[n+1])n=y(t,\"?>\",n+1,\"StopNode is not closed.\");else if(\"!--\"===t.substr(n+1,3))n=y(t,\"--\\x3e\",n+3,\"StopNode is not closed.\");else if(\"![\"===t.substr(n+1,2))n=y(t,\"]]>\",n,\"StopNode is not closed.\")-2;else{const r=v(t,n,\">\");r&&((r&&r.tagName)===e&&\"/\"!==r.tagExp[r.tagExp.length-1]&&o++,n=r.closeIndex)}}function w(t,e,n){if(e&&\"string\"==typeof t){const e=t.trim();return\"true\"===e||\"false\"!==e&&s(t,n)}return r.isExist(t)?t:\"\"}t.exports=class{constructor(t){this.options=t,this.currentNode=null,this.tagsNodeStack=[],this.docTypeEntities={},this.lastEntities={apos:{regex:/&(apos|#39|#x27);/g,val:\"'\"},gt:{regex:/&(gt|#62|#x3E);/g,val:\">\"},lt:{regex:/&(lt|#60|#x3C);/g,val:\"<\"},quot:{regex:/&(quot|#34|#x22);/g,val:'\"'}},this.ampEntity={regex:/&(amp|#38|#x26);/g,val:\"&\"},this.htmlEntities={space:{regex:/&(nbsp|#160);/g,val:\" \"},cent:{regex:/&(cent|#162);/g,val:\"¢\"},pound:{regex:/&(pound|#163);/g,val:\"£\"},yen:{regex:/&(yen|#165);/g,val:\"¥\"},euro:{regex:/&(euro|#8364);/g,val:\"€\"},copyright:{regex:/&(copy|#169);/g,val:\"©\"},reg:{regex:/&(reg|#174);/g,val:\"®\"},inr:{regex:/&(inr|#8377);/g,val:\"₹\"},num_dec:{regex:/&#([0-9]{1,7});/g,val:(t,e)=>String.fromCharCode(Number.parseInt(e,10))},num_hex:{regex:/&#x([0-9a-fA-F]{1,6});/g,val:(t,e)=>String.fromCharCode(Number.parseInt(e,16))}},this.addExternalEntities=a,this.parseXml=p,this.parseTextData=u,this.resolveNameSpace=c,this.buildAttributesMap=h,this.isItStopNode=m,this.replaceEntitiesValue=d,this.readStopNodeData=b,this.saveTextToParentTag=g,this.addChild=f}}},338:(t,e,n)=>{const{buildOptions:r}=n(63),o=n(299),{prettify:i}=n(728),s=n(31);t.exports=class{constructor(t){this.externalEntities={},this.options=r(t)}parse(t,e){if(\"string\"==typeof t);else{if(!t.toString)throw new Error(\"XML data is accepted in String or Bytes[] form.\");t=t.toString()}if(e){!0===e&&(e={});const n=s.validate(t,e);if(!0!==n)throw Error(`${n.err.msg}:${n.err.line}:${n.err.col}`)}const n=new o(this.options);n.addExternalEntities(this.externalEntities);const r=n.parseXml(t);return this.options.preserveOrder||void 0===r?r:i(r,this.options)}addEntity(t,e){if(-1!==e.indexOf(\"&\"))throw new Error(\"Entity value can't have '&'\");if(-1!==t.indexOf(\"&\")||-1!==t.indexOf(\";\"))throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\");if(\"&\"===e)throw new Error(\"An entity with value '&' is not permitted\");this.externalEntities[t]=e}}},728:(t,e)=>{function n(t,e,s){let a;const u={};for(let c=0;c<t.length;c++){const l=t[c],h=r(l);let p=\"\";if(p=void 0===s?h:s+\".\"+h,h===e.textNodeName)void 0===a?a=l[h]:a+=\"\"+l[h];else{if(void 0===h)continue;if(l[h]){let t=n(l[h],e,p);const r=i(t,e);l[\":@\"]?o(t,l[\":@\"],p,e):1!==Object.keys(t).length||void 0===t[e.textNodeName]||e.alwaysCreateTextNode?0===Object.keys(t).length&&(e.alwaysCreateTextNode?t[e.textNodeName]=\"\":t=\"\"):t=t[e.textNodeName],void 0!==u[h]&&u.hasOwnProperty(h)?(Array.isArray(u[h])||(u[h]=[u[h]]),u[h].push(t)):e.isArray(h,p,r)?u[h]=[t]:u[h]=t}}}return\"string\"==typeof a?a.length>0&&(u[e.textNodeName]=a):void 0!==a&&(u[e.textNodeName]=a),u}function r(t){const e=Object.keys(t);for(let t=0;t<e.length;t++){const n=e[t];if(\":@\"!==n)return n}}function o(t,e,n,r){if(e){const o=Object.keys(e),i=o.length;for(let s=0;s<i;s++){const i=o[s];r.isArray(i,n+\".\"+i,!0,!0)?t[i]=[e[i]]:t[i]=e[i]}}}function i(t,e){const{textNodeName:n}=e,r=Object.keys(t).length;return 0===r||!(1!==r||!t[n]&&\"boolean\"!=typeof t[n]&&0!==t[n])}e.prettify=function(t,e){return n(t,e)}},365:t=>{t.exports=class{constructor(t){this.tagname=t,this.child=[],this[\":@\"]={}}add(t,e){\"__proto__\"===t&&(t=\"#__proto__\"),this.child.push({[t]:e})}addChild(t){\"__proto__\"===t.tagname&&(t.tagname=\"#__proto__\"),t[\":@\"]&&Object.keys(t[\":@\"]).length>0?this.child.push({[t.tagname]:t.child,\":@\":t[\":@\"]}):this.child.push({[t.tagname]:t.child})}}},135:t=>{function e(t){return!!t.constructor&&\"function\"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}t.exports=function(t){return null!=t&&(e(t)||function(t){return\"function\"==typeof t.readFloatLE&&\"function\"==typeof t.slice&&e(t.slice(0,0))}(t)||!!t._isBuffer)}},542:(t,e,n)=>{!function(){var e=n(298),r=n(526).utf8,o=n(135),i=n(526).bin,s=function(t,n){t.constructor==String?t=n&&\"binary\"===n.encoding?i.stringToBytes(t):r.stringToBytes(t):o(t)?t=Array.prototype.slice.call(t,0):Array.isArray(t)||t.constructor===Uint8Array||(t=t.toString());for(var a=e.bytesToWords(t),u=8*t.length,c=1732584193,l=-271733879,h=-1732584194,p=271733878,f=0;f<a.length;f++)a[f]=16711935&(a[f]<<8|a[f]>>>24)|4278255360&(a[f]<<24|a[f]>>>8);a[u>>>5]|=128<<u%32,a[14+(u+64>>>9<<4)]=u;var d=s._ff,g=s._gg,m=s._hh,y=s._ii;for(f=0;f<a.length;f+=16){var v=c,b=l,w=h,x=p;c=d(c,l,h,p,a[f+0],7,-680876936),p=d(p,c,l,h,a[f+1],12,-389564586),h=d(h,p,c,l,a[f+2],17,606105819),l=d(l,h,p,c,a[f+3],22,-1044525330),c=d(c,l,h,p,a[f+4],7,-176418897),p=d(p,c,l,h,a[f+5],12,1200080426),h=d(h,p,c,l,a[f+6],17,-1473231341),l=d(l,h,p,c,a[f+7],22,-45705983),c=d(c,l,h,p,a[f+8],7,1770035416),p=d(p,c,l,h,a[f+9],12,-1958414417),h=d(h,p,c,l,a[f+10],17,-42063),l=d(l,h,p,c,a[f+11],22,-1990404162),c=d(c,l,h,p,a[f+12],7,1804603682),p=d(p,c,l,h,a[f+13],12,-40341101),h=d(h,p,c,l,a[f+14],17,-1502002290),c=g(c,l=d(l,h,p,c,a[f+15],22,1236535329),h,p,a[f+1],5,-165796510),p=g(p,c,l,h,a[f+6],9,-1069501632),h=g(h,p,c,l,a[f+11],14,643717713),l=g(l,h,p,c,a[f+0],20,-373897302),c=g(c,l,h,p,a[f+5],5,-701558691),p=g(p,c,l,h,a[f+10],9,38016083),h=g(h,p,c,l,a[f+15],14,-660478335),l=g(l,h,p,c,a[f+4],20,-405537848),c=g(c,l,h,p,a[f+9],5,568446438),p=g(p,c,l,h,a[f+14],9,-1019803690),h=g(h,p,c,l,a[f+3],14,-187363961),l=g(l,h,p,c,a[f+8],20,1163531501),c=g(c,l,h,p,a[f+13],5,-1444681467),p=g(p,c,l,h,a[f+2],9,-51403784),h=g(h,p,c,l,a[f+7],14,1735328473),c=m(c,l=g(l,h,p,c,a[f+12],20,-1926607734),h,p,a[f+5],4,-378558),p=m(p,c,l,h,a[f+8],11,-2022574463),h=m(h,p,c,l,a[f+11],16,1839030562),l=m(l,h,p,c,a[f+14],23,-35309556),c=m(c,l,h,p,a[f+1],4,-1530992060),p=m(p,c,l,h,a[f+4],11,1272893353),h=m(h,p,c,l,a[f+7],16,-155497632),l=m(l,h,p,c,a[f+10],23,-1094730640),c=m(c,l,h,p,a[f+13],4,681279174),p=m(p,c,l,h,a[f+0],11,-358537222),h=m(h,p,c,l,a[f+3],16,-722521979),l=m(l,h,p,c,a[f+6],23,76029189),c=m(c,l,h,p,a[f+9],4,-640364487),p=m(p,c,l,h,a[f+12],11,-421815835),h=m(h,p,c,l,a[f+15],16,530742520),c=y(c,l=m(l,h,p,c,a[f+2],23,-995338651),h,p,a[f+0],6,-198630844),p=y(p,c,l,h,a[f+7],10,1126891415),h=y(h,p,c,l,a[f+14],15,-1416354905),l=y(l,h,p,c,a[f+5],21,-57434055),c=y(c,l,h,p,a[f+12],6,1700485571),p=y(p,c,l,h,a[f+3],10,-1894986606),h=y(h,p,c,l,a[f+10],15,-1051523),l=y(l,h,p,c,a[f+1],21,-2054922799),c=y(c,l,h,p,a[f+8],6,1873313359),p=y(p,c,l,h,a[f+15],10,-30611744),h=y(h,p,c,l,a[f+6],15,-1560198380),l=y(l,h,p,c,a[f+13],21,1309151649),c=y(c,l,h,p,a[f+4],6,-145523070),p=y(p,c,l,h,a[f+11],10,-1120210379),h=y(h,p,c,l,a[f+2],15,718787259),l=y(l,h,p,c,a[f+9],21,-343485551),c=c+v>>>0,l=l+b>>>0,h=h+w>>>0,p=p+x>>>0}return e.endian([c,l,h,p])};s._ff=function(t,e,n,r,o,i,s){var a=t+(e&n|~e&r)+(o>>>0)+s;return(a<<i|a>>>32-i)+e},s._gg=function(t,e,n,r,o,i,s){var a=t+(e&r|n&~r)+(o>>>0)+s;return(a<<i|a>>>32-i)+e},s._hh=function(t,e,n,r,o,i,s){var a=t+(e^n^r)+(o>>>0)+s;return(a<<i|a>>>32-i)+e},s._ii=function(t,e,n,r,o,i,s){var a=t+(n^(e|~r))+(o>>>0)+s;return(a<<i|a>>>32-i)+e},s._blocksize=16,s._digestsize=16,t.exports=function(t,n){if(null==t)throw new Error(\"Illegal argument \"+t);var r=e.wordsToBytes(s(t,n));return n&&n.asBytes?r:n&&n.asString?i.bytesToString(r):e.bytesToHex(r)}}()},285:(t,e,n)=>{var r=n(2);t.exports=function(t){return t?(\"{}\"===t.substr(0,2)&&(t=\"\\\\{\\\\}\"+t.substr(2)),m(function(t){return t.split(\"\\\\\\\\\").join(o).split(\"\\\\{\").join(i).split(\"\\\\}\").join(s).split(\"\\\\,\").join(a).split(\"\\\\.\").join(u)}(t),!0).map(l)):[]};var o=\"\\0SLASH\"+Math.random()+\"\\0\",i=\"\\0OPEN\"+Math.random()+\"\\0\",s=\"\\0CLOSE\"+Math.random()+\"\\0\",a=\"\\0COMMA\"+Math.random()+\"\\0\",u=\"\\0PERIOD\"+Math.random()+\"\\0\";function c(t){return parseInt(t,10)==t?parseInt(t,10):t.charCodeAt(0)}function l(t){return t.split(o).join(\"\\\\\").split(i).join(\"{\").split(s).join(\"}\").split(a).join(\",\").split(u).join(\".\")}function h(t){if(!t)return[\"\"];var e=[],n=r(\"{\",\"}\",t);if(!n)return t.split(\",\");var o=n.pre,i=n.body,s=n.post,a=o.split(\",\");a[a.length-1]+=\"{\"+i+\"}\";var u=h(s);return s.length&&(a[a.length-1]+=u.shift(),a.push.apply(a,u)),e.push.apply(e,a),e}function p(t){return\"{\"+t+\"}\"}function f(t){return/^-?0\\d/.test(t)}function d(t,e){return t<=e}function g(t,e){return t>=e}function m(t,e){var n=[],o=r(\"{\",\"}\",t);if(!o)return[t];var i=o.pre,a=o.post.length?m(o.post,!1):[\"\"];if(/\\$$/.test(o.pre))for(var u=0;u<a.length;u++){var l=i+\"{\"+o.body+\"}\"+a[u];n.push(l)}else{var y,v,b=/^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(o.body),w=/^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(o.body),x=b||w,N=o.body.indexOf(\",\")>=0;if(!x&&!N)return o.post.match(/,.*\\}/)?m(t=o.pre+\"{\"+o.body+s+o.post):[t];if(x)y=o.body.split(/\\.\\./);else if(1===(y=h(o.body)).length&&1===(y=m(y[0],!1).map(p)).length)return a.map((function(t){return o.pre+y[0]+t}));if(x){var P=c(y[0]),A=c(y[1]),O=Math.max(y[0].length,y[1].length),E=3==y.length?Math.abs(c(y[2])):1,T=d;A<P&&(E*=-1,T=g);var j=y.some(f);v=[];for(var S=P;T(S,A);S+=E){var $;if(w)\"\\\\\"===($=String.fromCharCode(S))&&($=\"\");else if($=String(S),j){var C=O-$.length;if(C>0){var I=new Array(C+1).join(\"0\");$=S<0?\"-\"+I+$.slice(1):I+$}}v.push($)}}else{v=[];for(var k=0;k<y.length;k++)v.push.apply(v,m(y[k],!1))}for(k=0;k<v.length;k++)for(u=0;u<a.length;u++)l=i+v[k]+a[u],(!e||x||l)&&n.push(l)}return n}},829:t=>{function e(t){return e=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},e(t)}function n(t){var e=\"function\"==typeof Map?new Map:void 0;return n=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf(\"[native code]\")))return t;var n;if(\"function\"!=typeof t)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,s)}function s(){return r(t,arguments,i(this).constructor)}return s.prototype=Object.create(t.prototype,{constructor:{value:s,enumerable:!1,writable:!0,configurable:!0}}),o(s,t)},n(t)}function r(t,e,n){return r=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var i=new(Function.bind.apply(t,r));return n&&o(i,n.prototype),i},r.apply(null,arguments)}function o(t,e){return o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},o(t,e)}function i(t){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},i(t)}var s=function(t){function n(t){var r;return function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,n),(r=function(t,n){return!n||\"object\"!==e(n)&&\"function\"!=typeof n?function(t){if(void 0===t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return t}(t):n}(this,i(n).call(this,t))).name=\"ObjectPrototypeMutationError\",r}return function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&o(t,e)}(n,t),n}(n(Error));function a(t,n){for(var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},o=n.split(\".\"),i=o.length,s=function(e){var n=o[e];if(!t)return{v:void 0};if(\"+\"===n){if(Array.isArray(t))return{v:t.map((function(n,i){var s=o.slice(e+1);return s.length>0?a(n,s.join(\".\"),r):r(t,i,o,e)}))};var i=o.slice(0,e).join(\".\");throw new Error(\"Object at wildcard (\".concat(i,\") is not an array\"))}t=r(t,n,o,e)},u=0;u<i;u++){var c=s(u);if(\"object\"===e(c))return c.v}return t}function u(t,e){return t.length===e+1}t.exports={set:function(t,n,r){if(\"object\"!=e(t)||null===t)return t;if(void 0===n)return t;if(\"number\"==typeof n)return t[n]=r,t[n];try{return a(t,n,(function(t,e,n,o){if(t===Reflect.getPrototypeOf({}))throw new s(\"Attempting to mutate Object.prototype\");if(!t[e]){var i=Number.isInteger(Number(n[o+1])),a=\"+\"===n[o+1];t[e]=i||a?[]:{}}return u(n,o)&&(t[e]=r),t[e]}))}catch(e){if(e instanceof s)throw e;return t}},get:function(t,n){if(\"object\"!=e(t)||null===t)return t;if(void 0===n)return t;if(\"number\"==typeof n)return t[n];try{return a(t,n,(function(t,e){return t[e]}))}catch(e){return t}},has:function(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(\"object\"!=e(t)||null===t)return!1;if(void 0===n)return!1;if(\"number\"==typeof n)return n in t;try{var o=!1;return a(t,n,(function(t,e,n,i){if(!u(n,i))return t&&t[e];o=r.own?t.hasOwnProperty(e):e in t})),o}catch(t){return!1}},hasOwn:function(t,e,n){return this.has(t,e,n||{own:!0})},isIn:function(t,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(\"object\"!=e(t)||null===t)return!1;if(void 0===n)return!1;try{var i=!1,s=!1;return a(t,n,(function(t,n,o,a){return i=i||t===r||!!t&&t[n]===r,s=u(o,a)&&\"object\"===e(t)&&n in t,t&&t[n]})),o.validPath?i&&s:i}catch(t){return!1}},ObjectPrototypeMutationError:s}},47:(t,e,n)=>{var r=n(410),o=function(t){return\"string\"==typeof t};function i(t,e){for(var n=[],r=0;r<t.length;r++){var o=t[r];o&&\".\"!==o&&(\"..\"===o?n.length&&\"..\"!==n[n.length-1]?n.pop():e&&n.push(\"..\"):n.push(o))}return n}var s=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/,a={};function u(t){return s.exec(t).slice(1)}a.resolve=function(){for(var t=\"\",e=!1,n=arguments.length-1;n>=-1&&!e;n--){var r=n>=0?arguments[n]:process.cwd();if(!o(r))throw new TypeError(\"Arguments to path.resolve must be strings\");r&&(t=r+\"/\"+t,e=\"/\"===r.charAt(0))}return(e?\"/\":\"\")+(t=i(t.split(\"/\"),!e).join(\"/\"))||\".\"},a.normalize=function(t){var e=a.isAbsolute(t),n=\"/\"===t.substr(-1);return(t=i(t.split(\"/\"),!e).join(\"/\"))||e||(t=\".\"),t&&n&&(t+=\"/\"),(e?\"/\":\"\")+t},a.isAbsolute=function(t){return\"/\"===t.charAt(0)},a.join=function(){for(var t=\"\",e=0;e<arguments.length;e++){var n=arguments[e];if(!o(n))throw new TypeError(\"Arguments to path.join must be strings\");n&&(t+=t?\"/\"+n:n)}return a.normalize(t)},a.relative=function(t,e){function n(t){for(var e=0;e<t.length&&\"\"===t[e];e++);for(var n=t.length-1;n>=0&&\"\"===t[n];n--);return e>n?[]:t.slice(e,n+1)}t=a.resolve(t).substr(1),e=a.resolve(e).substr(1);for(var r=n(t.split(\"/\")),o=n(e.split(\"/\")),i=Math.min(r.length,o.length),s=i,u=0;u<i;u++)if(r[u]!==o[u]){s=u;break}var c=[];for(u=s;u<r.length;u++)c.push(\"..\");return(c=c.concat(o.slice(s))).join(\"/\")},a._makeLong=function(t){return t},a.dirname=function(t){var e=u(t),n=e[0],r=e[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):\".\"},a.basename=function(t,e){var n=u(t)[2];return e&&n.substr(-1*e.length)===e&&(n=n.substr(0,n.length-e.length)),n},a.extname=function(t){return u(t)[3]},a.format=function(t){if(!r.isObject(t))throw new TypeError(\"Parameter 'pathObject' must be an object, not \"+typeof t);var e=t.root||\"\";if(!o(e))throw new TypeError(\"'pathObject.root' must be a string or undefined, not \"+typeof t.root);return(t.dir?t.dir+a.sep:\"\")+(t.base||\"\")},a.parse=function(t){if(!o(t))throw new TypeError(\"Parameter 'pathString' must be a string, not \"+typeof t);var e=u(t);if(!e||4!==e.length)throw new TypeError(\"Invalid path '\"+t+\"'\");return e[1]=e[1]||\"\",e[2]=e[2]||\"\",e[3]=e[3]||\"\",{root:e[0],dir:e[0]+e[1].slice(0,e[1].length-1),base:e[2],ext:e[3],name:e[2].slice(0,e[2].length-e[3].length)}},a.sep=\"/\",a.delimiter=\":\",t.exports=a},647:(t,e)=>{var n=Object.prototype.hasOwnProperty;function r(t){try{return decodeURIComponent(t.replace(/\\+/g,\" \"))}catch(t){return null}}function o(t){try{return encodeURIComponent(t)}catch(t){return null}}e.stringify=function(t,e){e=e||\"\";var r,i,s=[];for(i in\"string\"!=typeof e&&(e=\"?\"),t)if(n.call(t,i)){if((r=t[i])||null!=r&&!isNaN(r)||(r=\"\"),i=o(i),r=o(r),null===i||null===r)continue;s.push(i+\"=\"+r)}return s.length?e+s.join(\"&\"):\"\"},e.parse=function(t){for(var e,n=/([^=?#&]+)=?([^&]*)/g,o={};e=n.exec(t);){var i=r(e[1]),s=r(e[2]);null===i||null===s||i in o||(o[i]=s)}return o}},670:t=>{t.exports=function(t,e){if(e=e.split(\":\")[0],!(t=+t))return!1;switch(e){case\"http\":case\"ws\":return 80!==t;case\"https\":case\"wss\":return 443!==t;case\"ftp\":return 21!==t;case\"gopher\":return 70!==t;case\"file\":return!1}return 0!==t}},494:t=>{const e=/^[-+]?0x[a-fA-F0-9]+$/,n=/^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;!Number.parseInt&&window.parseInt&&(Number.parseInt=window.parseInt),!Number.parseFloat&&window.parseFloat&&(Number.parseFloat=window.parseFloat);const r={hex:!0,leadingZeros:!0,decimalPoint:\".\",eNotation:!0};t.exports=function(t){let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(o=Object.assign({},r,o),!t||\"string\"!=typeof t)return t;let i=t.trim();if(void 0!==o.skipLike&&o.skipLike.test(i))return t;if(o.hex&&e.test(i))return Number.parseInt(i,16);{const e=n.exec(i);if(e){const n=e[1],r=e[2];let a=(s=e[3])&&-1!==s.indexOf(\".\")?(\".\"===(s=s.replace(/0+$/,\"\"))?s=\"0\":\".\"===s[0]?s=\"0\"+s:\".\"===s[s.length-1]&&(s=s.substr(0,s.length-1)),s):s;const u=e[4]||e[6];if(!o.leadingZeros&&r.length>0&&n&&\".\"!==i[2])return t;if(!o.leadingZeros&&r.length>0&&!n&&\".\"!==i[1])return t;{const e=Number(i),s=\"\"+e;return-1!==s.search(/[eE]/)||u?o.eNotation?e:t:-1!==i.indexOf(\".\")?\"0\"===s&&\"\"===a||s===a||n&&s===\"-\"+a?e:t:r?a===s||n+a===s?e:t:i===s||i===n+s?e:t}}return t}var s}},737:(t,e,n)=>{var r=n(670),o=n(647),i=/^[\\x00-\\x20\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/,s=/[\\n\\r\\t]/g,a=/^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//,u=/:\\d+$/,c=/^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\\\/]+)?([\\S\\s]*)/i,l=/^[a-zA-Z]:/;function h(t){return(t||\"\").toString().replace(i,\"\")}var p=[[\"#\",\"hash\"],[\"?\",\"query\"],function(t,e){return g(e.protocol)?t.replace(/\\\\/g,\"/\"):t},[\"/\",\"pathname\"],[\"@\",\"auth\",1],[NaN,\"host\",void 0,1,1],[/:(\\d*)$/,\"port\",void 0,1],[NaN,\"hostname\",void 0,1,1]],f={hash:1,query:1};function d(t){var e,n=(\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{}).location||{},r={},o=typeof(t=t||n);if(\"blob:\"===t.protocol)r=new y(unescape(t.pathname),{});else if(\"string\"===o)for(e in r=new y(t,{}),f)delete r[e];else if(\"object\"===o){for(e in t)e in f||(r[e]=t[e]);void 0===r.slashes&&(r.slashes=a.test(t.href))}return r}function g(t){return\"file:\"===t||\"ftp:\"===t||\"http:\"===t||\"https:\"===t||\"ws:\"===t||\"wss:\"===t}function m(t,e){t=(t=h(t)).replace(s,\"\"),e=e||{};var n,r=c.exec(t),o=r[1]?r[1].toLowerCase():\"\",i=!!r[2],a=!!r[3],u=0;return i?a?(n=r[2]+r[3]+r[4],u=r[2].length+r[3].length):(n=r[2]+r[4],u=r[2].length):a?(n=r[3]+r[4],u=r[3].length):n=r[4],\"file:\"===o?u>=2&&(n=n.slice(2)):g(o)?n=r[4]:o?i&&(n=n.slice(2)):u>=2&&g(e.protocol)&&(n=r[4]),{protocol:o,slashes:i||g(o),slashesCount:u,rest:n}}function y(t,e,n){if(t=(t=h(t)).replace(s,\"\"),!(this instanceof y))return new y(t,e,n);var i,a,u,c,f,v,b=p.slice(),w=typeof e,x=this,N=0;for(\"object\"!==w&&\"string\"!==w&&(n=e,e=null),n&&\"function\"!=typeof n&&(n=o.parse),i=!(a=m(t||\"\",e=d(e))).protocol&&!a.slashes,x.slashes=a.slashes||i&&e.slashes,x.protocol=a.protocol||e.protocol||\"\",t=a.rest,(\"file:\"===a.protocol&&(2!==a.slashesCount||l.test(t))||!a.slashes&&(a.protocol||a.slashesCount<2||!g(x.protocol)))&&(b[3]=[/(.*)/,\"pathname\"]);N<b.length;N++)\"function\"!=typeof(c=b[N])?(u=c[0],v=c[1],u!=u?x[v]=t:\"string\"==typeof u?~(f=\"@\"===u?t.lastIndexOf(u):t.indexOf(u))&&(\"number\"==typeof c[2]?(x[v]=t.slice(0,f),t=t.slice(f+c[2])):(x[v]=t.slice(f),t=t.slice(0,f))):(f=u.exec(t))&&(x[v]=f[1],t=t.slice(0,f.index)),x[v]=x[v]||i&&c[3]&&e[v]||\"\",c[4]&&(x[v]=x[v].toLowerCase())):t=c(t,x);n&&(x.query=n(x.query)),i&&e.slashes&&\"/\"!==x.pathname.charAt(0)&&(\"\"!==x.pathname||\"\"!==e.pathname)&&(x.pathname=function(t,e){if(\"\"===t)return e;for(var n=(e||\"/\").split(\"/\").slice(0,-1).concat(t.split(\"/\")),r=n.length,o=n[r-1],i=!1,s=0;r--;)\".\"===n[r]?n.splice(r,1):\"..\"===n[r]?(n.splice(r,1),s++):s&&(0===r&&(i=!0),n.splice(r,1),s--);return i&&n.unshift(\"\"),\".\"!==o&&\"..\"!==o||n.push(\"\"),n.join(\"/\")}(x.pathname,e.pathname)),\"/\"!==x.pathname.charAt(0)&&g(x.protocol)&&(x.pathname=\"/\"+x.pathname),r(x.port,x.protocol)||(x.host=x.hostname,x.port=\"\"),x.username=x.password=\"\",x.auth&&(~(f=x.auth.indexOf(\":\"))?(x.username=x.auth.slice(0,f),x.username=encodeURIComponent(decodeURIComponent(x.username)),x.password=x.auth.slice(f+1),x.password=encodeURIComponent(decodeURIComponent(x.password))):x.username=encodeURIComponent(decodeURIComponent(x.auth)),x.auth=x.password?x.username+\":\"+x.password:x.username),x.origin=\"file:\"!==x.protocol&&g(x.protocol)&&x.host?x.protocol+\"//\"+x.host:\"null\",x.href=x.toString()}y.prototype={set:function(t,e,n){var i=this;switch(t){case\"query\":\"string\"==typeof e&&e.length&&(e=(n||o.parse)(e)),i[t]=e;break;case\"port\":i[t]=e,r(e,i.protocol)?e&&(i.host=i.hostname+\":\"+e):(i.host=i.hostname,i[t]=\"\");break;case\"hostname\":i[t]=e,i.port&&(e+=\":\"+i.port),i.host=e;break;case\"host\":i[t]=e,u.test(e)?(e=e.split(\":\"),i.port=e.pop(),i.hostname=e.join(\":\")):(i.hostname=e,i.port=\"\");break;case\"protocol\":i.protocol=e.toLowerCase(),i.slashes=!n;break;case\"pathname\":case\"hash\":if(e){var s=\"pathname\"===t?\"/\":\"#\";i[t]=e.charAt(0)!==s?s+e:e}else i[t]=e;break;case\"username\":case\"password\":i[t]=encodeURIComponent(e);break;case\"auth\":var a=e.indexOf(\":\");~a?(i.username=e.slice(0,a),i.username=encodeURIComponent(decodeURIComponent(i.username)),i.password=e.slice(a+1),i.password=encodeURIComponent(decodeURIComponent(i.password))):i.username=encodeURIComponent(decodeURIComponent(e))}for(var c=0;c<p.length;c++){var l=p[c];l[4]&&(i[l[1]]=i[l[1]].toLowerCase())}return i.auth=i.password?i.username+\":\"+i.password:i.username,i.origin=\"file:\"!==i.protocol&&g(i.protocol)&&i.host?i.protocol+\"//\"+i.host:\"null\",i.href=i.toString(),i},toString:function(t){t&&\"function\"==typeof t||(t=o.stringify);var e,n=this,r=n.host,i=n.protocol;i&&\":\"!==i.charAt(i.length-1)&&(i+=\":\");var s=i+(n.protocol&&n.slashes||g(n.protocol)?\"//\":\"\");return n.username?(s+=n.username,n.password&&(s+=\":\"+n.password),s+=\"@\"):n.password?(s+=\":\"+n.password,s+=\"@\"):\"file:\"!==n.protocol&&g(n.protocol)&&!r&&\"/\"!==n.pathname&&(s+=\"@\"),(\":\"===r[r.length-1]||u.test(n.hostname)&&!n.port)&&(r+=\":\"),s+=r+n.pathname,(e=\"object\"==typeof n.query?t(n.query):n.query)&&(s+=\"?\"!==e.charAt(0)?\"?\"+e:e),n.hash&&(s+=n.hash),s}},y.extractProtocol=m,y.location=d,y.trimLeft=h,y.qs=o,t.exports=y},410:()=>{},388:()=>{},805:()=>{},345:()=>{},800:()=>{}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var r={};n.d(r,{hT:()=>C,O4:()=>I,Kd:()=>S,YK:()=>$,UU:()=>en,Gu:()=>F,ky:()=>oe,h4:()=>ne,ch:()=>re,hq:()=>Xt,i5:()=>ie});var o=n(737),i=n.n(o);function s(t){if(!a(t))throw new Error(\"Parameter was not an error\")}function a(t){return!!t&&\"object\"==typeof t&&\"[object Error]\"===(e=t,Object.prototype.toString.call(e))||t instanceof Error;var e}class u extends Error{constructor(t,e){const n=[...arguments],{options:r,shortMessage:o}=function(t){let e,n=\"\";if(0===t.length)e={};else if(a(t[0]))e={cause:t[0]},n=t.slice(1).join(\" \")||\"\";else if(t[0]&&\"object\"==typeof t[0])e=Object.assign({},t[0]),n=t.slice(1).join(\" \")||\"\";else{if(\"string\"!=typeof t[0])throw new Error(\"Invalid arguments passed to Layerr\");e={},n=n=t.join(\" \")||\"\"}return{options:e,shortMessage:n}}(n);let i=o;if(r.cause&&(i=`${i}: ${r.cause.message}`),super(i),this.message=i,r.name&&\"string\"==typeof r.name?this.name=r.name:this.name=\"Layerr\",r.cause&&Object.defineProperty(this,\"_cause\",{value:r.cause}),Object.defineProperty(this,\"_info\",{value:{}}),r.info&&\"object\"==typeof r.info&&Object.assign(this._info,r.info),Error.captureStackTrace){const t=r.constructorOpt||this.constructor;Error.captureStackTrace(this,t)}}static cause(t){return s(t),t._cause&&a(t._cause)?t._cause:null}static fullStack(t){s(t);const e=u.cause(t);return e?`${t.stack}\\ncaused by: ${u.fullStack(e)}`:t.stack??\"\"}static info(t){s(t);const e={},n=u.cause(t);return n&&Object.assign(e,u.info(n)),t._info&&Object.assign(e,t._info),e}toString(){let t=this.name||this.constructor.name||this.constructor.prototype.name;return this.message&&(t=`${t}: ${this.message}`),t}}var c=n(47),l=n.n(c);const h=\"__PATH_SEPARATOR_POSIX__\",p=\"__PATH_SEPARATOR_WINDOWS__\";function f(t){try{const e=t.replace(/\\//g,h).replace(/\\\\\\\\/g,p);return encodeURIComponent(e).split(p).join(\"\\\\\\\\\").split(h).join(\"/\")}catch(t){throw new u(t,\"Failed encoding path\")}}function d(t){return t.startsWith(\"/\")?t:\"/\"+t}function g(t){let e=t;return\"/\"!==e[0]&&(e=\"/\"+e),/^.+\\/$/.test(e)&&(e=e.substr(0,e.length-1)),e}function m(t){let e=new(i())(t).pathname;return e.length<=0&&(e=\"/\"),g(e)}function y(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(){return function(t){var e=[];if(0===t.length)return\"\";if(\"string\"!=typeof t[0])throw new TypeError(\"Url must be a string. Received \"+t[0]);if(t[0].match(/^[^/:]+:\\/*$/)&&t.length>1){var n=t.shift();t[0]=n+t[0]}t[0].match(/^file:\\/\\/\\//)?t[0]=t[0].replace(/^([^/:]+):\\/*/,\"$1:///\"):t[0]=t[0].replace(/^([^/:]+):\\/*/,\"$1://\");for(var r=0;r<t.length;r++){var o=t[r];if(\"string\"!=typeof o)throw new TypeError(\"Url must be a string. Received \"+o);\"\"!==o&&(r>0&&(o=o.replace(/^[\\/]+/,\"\")),o=r<t.length-1?o.replace(/[\\/]+$/,\"\"):o.replace(/[\\/]+$/,\"/\"),e.push(o))}var i=e.join(\"/\"),s=(i=i.replace(/\\/(\\?|&|#[^!])/g,\"$1\")).split(\"?\");return s.shift()+(s.length>0?\"?\":\"\")+s.join(\"&\")}(\"object\"==typeof arguments[0]?arguments[0]:[].slice.call(arguments))}(e.reduce(((t,e,n)=>((0===n||\"/\"!==e||\"/\"===e&&\"/\"!==t[t.length-1])&&t.push(e),t)),[]))}var v=n(542),b=n.n(v);const w=\"abcdef0123456789\";function x(t,e){const n=t.url.replace(\"//\",\"\"),r=-1==n.indexOf(\"/\")?\"/\":n.slice(n.indexOf(\"/\")),o=t.method?t.method.toUpperCase():\"GET\",i=!!/(^|,)\\s*auth\\s*($|,)/.test(e.qop)&&\"auth\",s=`00000000${e.nc}`.slice(-8),a=function(t,e,n,r,o,i,s){const a=s||b()(`${e}:${n}:${r}`);return t&&\"md5-sess\"===t.toLowerCase()?b()(`${a}:${o}:${i}`):a}(e.algorithm,e.username,e.realm,e.password,e.nonce,e.cnonce,e.ha1),u=b()(`${o}:${r}`),c=i?b()(`${a}:${e.nonce}:${s}:${e.cnonce}:${i}:${u}`):b()(`${a}:${e.nonce}:${u}`),l={username:e.username,realm:e.realm,nonce:e.nonce,uri:r,qop:i,response:c,nc:s,cnonce:e.cnonce,algorithm:e.algorithm,opaque:e.opaque},h=[];for(const t in l)l[t]&&(\"qop\"===t||\"nc\"===t||\"algorithm\"===t?h.push(`${t}=${l[t]}`):h.push(`${t}=\"${l[t]}\"`));return`Digest ${h.join(\", \")}`}function N(t){return\"digest\"===(t.headers&&t.headers.get(\"www-authenticate\")||\"\").split(/\\s/)[0].toLowerCase()}var P=n(101),A=n.n(P);function O(t){return A().decode(t)}function E(t,e){var n;return`Basic ${n=`${t}:${e}`,A().encode(n)}`}const T=\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:\"undefined\"!=typeof window?window:globalThis,j=T.fetch.bind(T),S=(T.Headers,T.Request),$=T.Response;let C=function(t){return t.Auto=\"auto\",t.Digest=\"digest\",t.None=\"none\",t.Password=\"password\",t.Token=\"token\",t}({}),I=function(t){return t.DataTypeNoLength=\"data-type-no-length\",t.InvalidAuthType=\"invalid-auth-type\",t.InvalidOutputFormat=\"invalid-output-format\",t.LinkUnsupportedAuthType=\"link-unsupported-auth\",t.InvalidUpdateRange=\"invalid-update-range\",t.NotSupported=\"not-supported\",t}({});function k(t,e,n,r,o){switch(t.authType){case C.Auto:e&&n&&(t.headers.Authorization=E(e,n));break;case C.Digest:t.digest=function(t,e,n){return{username:t,password:e,ha1:n,nc:0,algorithm:\"md5\",hasDigestAuth:!1}}(e,n,o);break;case C.None:break;case C.Password:t.headers.Authorization=E(e,n);break;case C.Token:t.headers.Authorization=`${(i=r).token_type} ${i.access_token}`;break;default:throw new u({info:{code:I.InvalidAuthType}},`Invalid auth type: ${t.authType}`)}var i}n(345),n(800);const R=\"@@HOTPATCHER\",L=()=>{};function _(t){return{original:t,methods:[t],final:!1}}class M{constructor(){this._configuration={registry:{},getEmptyAction:\"null\"},this.__type__=R}get configuration(){return this._configuration}get getEmptyAction(){return this.configuration.getEmptyAction}set getEmptyAction(t){this.configuration.getEmptyAction=t}control(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!t||t.__type__!==R)throw new Error(\"Failed taking control of target HotPatcher instance: Invalid type or object\");return Object.keys(t.configuration.registry).forEach((n=>{this.configuration.registry.hasOwnProperty(n)?e&&(this.configuration.registry[n]=Object.assign({},t.configuration.registry[n])):this.configuration.registry[n]=Object.assign({},t.configuration.registry[n])})),t._configuration=this.configuration,this}execute(t){const e=this.get(t)||L;for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return e(...r)}get(t){const e=this.configuration.registry[t];if(!e)switch(this.getEmptyAction){case\"null\":return null;case\"throw\":throw new Error(`Failed handling method request: No method provided for override: ${t}`);default:throw new Error(`Failed handling request which resulted in an empty method: Invalid empty-action specified: ${this.getEmptyAction}`)}return function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];if(0===e.length)throw new Error(\"Failed creating sequence: No functions provided\");return function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];let o=n;const i=this;for(;e.length>0;)o=[e.shift().apply(i,o)];return o[0]}}(...e.methods)}isPatched(t){return!!this.configuration.registry[t]}patch(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{chain:r=!1}=n;if(this.configuration.registry[t]&&this.configuration.registry[t].final)throw new Error(`Failed patching '${t}': Method marked as being final`);if(\"function\"!=typeof e)throw new Error(`Failed patching '${t}': Provided method is not a function`);if(r)this.configuration.registry[t]?this.configuration.registry[t].methods.push(e):this.configuration.registry[t]=_(e);else if(this.isPatched(t)){const{original:n}=this.configuration.registry[t];this.configuration.registry[t]=Object.assign(_(e),{original:n})}else this.configuration.registry[t]=_(e);return this}patchInline(t,e){this.isPatched(t)||this.patch(t,e);for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];return this.execute(t,...r)}plugin(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return n.forEach((e=>{this.patch(t,e,{chain:!0})})),this}restore(t){if(!this.isPatched(t))throw new Error(`Failed restoring method: No method present for key: ${t}`);if(\"function\"!=typeof this.configuration.registry[t].original)throw new Error(`Failed restoring method: Original method not found or of invalid type for key: ${t}`);return this.configuration.registry[t].methods=[this.configuration.registry[t].original],this}setFinal(t){if(!this.configuration.registry.hasOwnProperty(t))throw new Error(`Failed marking '${t}' as final: No method found for key`);return this.configuration.registry[t].final=!0,this}}let U=null;function F(){return U||(U=new M),U}function D(t){return function(t){if(\"object\"!=typeof t||null===t||\"[object Object]\"!=Object.prototype.toString.call(t))return!1;if(null===Object.getPrototypeOf(t))return!0;let e=t;for(;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}(t)?Object.assign({},t):Object.setPrototypeOf(Object.assign({},t),Object.getPrototypeOf(t))}function B(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];let r=null,o=[...e];for(;o.length>0;){const t=o.shift();r=r?W(r,t):D(t)}return r}function W(t,e){const n=D(t);return Object.keys(e).forEach((t=>{n.hasOwnProperty(t)?Array.isArray(e[t])?n[t]=Array.isArray(n[t])?[...n[t],...e[t]]:[...e[t]]:\"object\"==typeof e[t]&&e[t]?n[t]=\"object\"==typeof n[t]&&n[t]?W(n[t],e[t]):D(e[t]):n[t]=e[t]:n[t]=e[t]})),n}function V(t){const e={};for(const n of t.keys())e[n]=t.get(n);return e}function z(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];if(0===e.length)return{};const r={};return e.reduce(((t,e)=>(Object.keys(e).forEach((n=>{const o=n.toLowerCase();r.hasOwnProperty(o)?t[r[o]]=e[n]:(r[o]=n,t[n]=e[n])})),t)),{})}n(805);const G=\"function\"==typeof ArrayBuffer,{toString:q}=Object.prototype;function H(t){return G&&(t instanceof ArrayBuffer||\"[object ArrayBuffer]\"===q.call(t))}function X(t){return null!=t&&null!=t.constructor&&\"function\"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}function Z(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}function Y(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}const K=Z((function(t){const e=t._digest;return delete t._digest,e.hasDigestAuth&&(t=B(t,{headers:{Authorization:x(t,e)}})),Y(et(t),(function(n){let r=!1;return o=function(t){return r?t:n},(i=function(){if(401==n.status)return e.hasDigestAuth=function(t,e){if(!N(t))return!1;const n=/([a-z0-9_-]+)=(?:\"([^\"]+)\"|([a-z0-9_-]+))/gi;for(;;){const r=t.headers&&t.headers.get(\"www-authenticate\")||\"\",o=n.exec(r);if(!o)break;e[o[1]]=o[2]||o[3]}return e.nc+=1,e.cnonce=function(){let t=\"\";for(let e=0;e<32;++e)t=`${t}${w[Math.floor(16*Math.random())]}`;return t}(),!0}(n,e),function(){if(e.hasDigestAuth)return Y(et(t=B(t,{headers:{Authorization:x(t,e)}})),(function(t){return 401==t.status?e.hasDigestAuth=!1:e.nc++,r=!0,t}))}();e.nc++}())&&i.then?i.then(o):o(i);var o,i}))})),J=Z((function(t,e){return Y(et(t),(function(n){return n.ok?(e.authType=C.Password,n):401==n.status&&N(n)?(e.authType=C.Digest,k(e,e.username,e.password,void 0,void 0),t._digest=e.digest,K(t)):n}))})),Q=Z((function(t,e){return e.authType===C.Auto?J(t,e):t._digest?K(t):et(t)}));function tt(t,e,n){const r=D(t);return r.headers=z(e.headers,r.headers||{},n.headers||{}),void 0!==n.data&&(r.data=n.data),n.signal&&(r.signal=n.signal),e.httpAgent&&(r.httpAgent=e.httpAgent),e.httpsAgent&&(r.httpsAgent=e.httpsAgent),e.digest&&(r._digest=e.digest),\"boolean\"==typeof e.withCredentials&&(r.withCredentials=e.withCredentials),r}function et(t){const e=F();return e.patchInline(\"request\",(t=>e.patchInline(\"fetch\",j,t.url,function(t){let e={};const n={method:t.method};if(t.headers&&(e=z(e,t.headers)),void 0!==t.data){const[r,o]=function(t){if(\"string\"==typeof t)return[t,{}];if(X(t))return[t,{}];if(H(t))return[t,{}];if(t&&\"object\"==typeof t)return[JSON.stringify(t),{\"content-type\":\"application/json\"}];throw new Error(\"Unable to convert request body: Unexpected body type: \"+typeof t)}(t.data);n.body=r,e=z(e,o)}return t.signal&&(n.signal=t.signal),t.withCredentials&&(n.credentials=\"include\"),n.headers=e,n}(t))),t)}var nt=n(285);const rt=t=>{if(\"string\"!=typeof t)throw new TypeError(\"invalid pattern\");if(t.length>65536)throw new TypeError(\"pattern is too long\")},ot={\"[:alnum:]\":[\"\\\\p{L}\\\\p{Nl}\\\\p{Nd}\",!0],\"[:alpha:]\":[\"\\\\p{L}\\\\p{Nl}\",!0],\"[:ascii:]\":[\"\\\\x00-\\\\x7f\",!1],\"[:blank:]\":[\"\\\\p{Zs}\\\\t\",!0],\"[:cntrl:]\":[\"\\\\p{Cc}\",!0],\"[:digit:]\":[\"\\\\p{Nd}\",!0],\"[:graph:]\":[\"\\\\p{Z}\\\\p{C}\",!0,!0],\"[:lower:]\":[\"\\\\p{Ll}\",!0],\"[:print:]\":[\"\\\\p{C}\",!0],\"[:punct:]\":[\"\\\\p{P}\",!0],\"[:space:]\":[\"\\\\p{Z}\\\\t\\\\r\\\\n\\\\v\\\\f\",!0],\"[:upper:]\":[\"\\\\p{Lu}\",!0],\"[:word:]\":[\"\\\\p{L}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\",!0],\"[:xdigit:]\":[\"A-Fa-f0-9\",!1]},it=t=>t.replace(/[[\\]\\\\-]/g,\"\\\\$&\"),st=t=>t.join(\"\"),at=(t,e)=>{const n=e;if(\"[\"!==t.charAt(n))throw new Error(\"not in a brace expression\");const r=[],o=[];let i=n+1,s=!1,a=!1,u=!1,c=!1,l=n,h=\"\";t:for(;i<t.length;){const e=t.charAt(i);if(\"!\"!==e&&\"^\"!==e||i!==n+1){if(\"]\"===e&&s&&!u){l=i+1;break}if(s=!0,\"\\\\\"!==e||u){if(\"[\"===e&&!u)for(const[e,[s,u,c]]of Object.entries(ot))if(t.startsWith(e,i)){if(h)return[\"$.\",!1,t.length-n,!0];i+=e.length,c?o.push(s):r.push(s),a=a||u;continue t}u=!1,h?(e>h?r.push(it(h)+\"-\"+it(e)):e===h&&r.push(it(e)),h=\"\",i++):t.startsWith(\"-]\",i+1)?(r.push(it(e+\"-\")),i+=2):t.startsWith(\"-\",i+1)?(h=e,i+=2):(r.push(it(e)),i++)}else u=!0,i++}else c=!0,i++}if(l<i)return[\"\",!1,0,!1];if(!r.length&&!o.length)return[\"$.\",!1,t.length-n,!0];if(0===o.length&&1===r.length&&/^\\\\?.$/.test(r[0])&&!c){return[(p=2===r[0].length?r[0].slice(-1):r[0],p.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g,\"\\\\$&\")),!1,l-n,!1]}var p;const f=\"[\"+(c?\"^\":\"\")+st(r)+\"]\",d=\"[\"+(c?\"\":\"^\")+st(o)+\"]\";return[r.length&&o.length?\"(\"+f+\"|\"+d+\")\":r.length?f:d,a,l-n,!0]},ut=function(t){let{windowsPathsNoEscape:e=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e?t.replace(/\\[([^\\/\\\\])\\]/g,\"$1\"):t.replace(/((?!\\\\).|^)\\[([^\\/\\\\])\\]/g,\"$1$2\").replace(/\\\\([^\\/])/g,\"$1\")},ct=new Set([\"!\",\"?\",\"+\",\"*\",\"@\"]),lt=t=>ct.has(t),ht=\"(?!\\\\.)\",pt=new Set([\"[\",\".\"]),ft=new Set([\"..\",\".\"]),dt=new Set(\"().*{}+?[]^$\\\\!\"),gt=\"[^/]\",mt=gt+\"*?\",yt=gt+\"+?\";class vt{type;#t;#e;#n=!1;#r=[];#o;#i;#s;#a=!1;#u;#c;#l=!1;constructor(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.type=t,t&&(this.#e=!0),this.#o=e,this.#t=this.#o?this.#o.#t:this,this.#u=this.#t===this?n:this.#t.#u,this.#s=this.#t===this?[]:this.#t.#s,\"!\"!==t||this.#t.#a||this.#s.push(this),this.#i=this.#o?this.#o.#r.length:0}get hasMagic(){if(void 0!==this.#e)return this.#e;for(const t of this.#r)if(\"string\"!=typeof t&&(t.type||t.hasMagic))return this.#e=!0;return this.#e}toString(){return void 0!==this.#c?this.#c:this.type?this.#c=this.type+\"(\"+this.#r.map((t=>String(t))).join(\"|\")+\")\":this.#c=this.#r.map((t=>String(t))).join(\"\")}#h(){if(this!==this.#t)throw new Error(\"should only call on root\");if(this.#a)return this;let t;for(this.toString(),this.#a=!0;t=this.#s.pop();){if(\"!\"!==t.type)continue;let e=t,n=e.#o;for(;n;){for(let r=e.#i+1;!n.type&&r<n.#r.length;r++)for(const e of t.#r){if(\"string\"==typeof e)throw new Error(\"string part in extglob AST??\");e.copyIn(n.#r[r])}e=n,n=e.#o}}return this}push(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];for(const t of e)if(\"\"!==t){if(\"string\"!=typeof t&&!(t instanceof vt&&t.#o===this))throw new Error(\"invalid part: \"+t);this.#r.push(t)}}toJSON(){const t=null===this.type?this.#r.slice().map((t=>\"string\"==typeof t?t:t.toJSON())):[this.type,...this.#r.map((t=>t.toJSON()))];return this.isStart()&&!this.type&&t.unshift([]),this.isEnd()&&(this===this.#t||this.#t.#a&&\"!\"===this.#o?.type)&&t.push({}),t}isStart(){if(this.#t===this)return!0;if(!this.#o?.isStart())return!1;if(0===this.#i)return!0;const t=this.#o;for(let e=0;e<this.#i;e++){const n=t.#r[e];if(!(n instanceof vt&&\"!\"===n.type))return!1}return!0}isEnd(){if(this.#t===this)return!0;if(\"!\"===this.#o?.type)return!0;if(!this.#o?.isEnd())return!1;if(!this.type)return this.#o?.isEnd();const t=this.#o?this.#o.#r.length:0;return this.#i===t-1}copyIn(t){\"string\"==typeof t?this.push(t):this.push(t.clone(this))}clone(t){const e=new vt(this.type,t);for(const t of this.#r)e.copyIn(t);return e}static#p(t,e,n,r){let o=!1,i=!1,s=-1,a=!1;if(null===e.type){let u=n,c=\"\";for(;u<t.length;){const n=t.charAt(u++);if(o||\"\\\\\"===n)o=!o,c+=n;else if(i)u===s+1?\"^\"!==n&&\"!\"!==n||(a=!0):\"]\"!==n||u===s+2&&a||(i=!1),c+=n;else if(\"[\"!==n)if(r.noext||!lt(n)||\"(\"!==t.charAt(u))c+=n;else{e.push(c),c=\"\";const o=new vt(n,e);u=vt.#p(t,o,u,r),e.push(o)}else i=!0,s=u,a=!1,c+=n}return e.push(c),u}let u=n+1,c=new vt(null,e);const l=[];let h=\"\";for(;u<t.length;){const n=t.charAt(u++);if(o||\"\\\\\"===n)o=!o,h+=n;else if(i)u===s+1?\"^\"!==n&&\"!\"!==n||(a=!0):\"]\"!==n||u===s+2&&a||(i=!1),h+=n;else if(\"[\"!==n)if(lt(n)&&\"(\"===t.charAt(u)){c.push(h),h=\"\";const e=new vt(n,c);c.push(e),u=vt.#p(t,e,u,r)}else if(\"|\"!==n){if(\")\"===n)return\"\"===h&&0===e.#r.length&&(e.#l=!0),c.push(h),h=\"\",e.push(...l,c),u;h+=n}else c.push(h),h=\"\",l.push(c),c=new vt(null,e);else i=!0,s=u,a=!1,h+=n}return e.type=null,e.#e=void 0,e.#r=[t.substring(n-1)],u}static fromGlob(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=new vt(null,void 0,e);return vt.#p(t,n,0,e),n}toMMPattern(){if(this!==this.#t)return this.#t.toMMPattern();const t=this.toString(),[e,n,r,o]=this.toRegExpSource();if(!(r||this.#e||this.#u.nocase&&!this.#u.nocaseMagicOnly&&t.toUpperCase()!==t.toLowerCase()))return n;const i=(this.#u.nocase?\"i\":\"\")+(o?\"u\":\"\");return Object.assign(new RegExp(`^${e}$`,i),{_src:e,_glob:t})}get options(){return this.#u}toRegExpSource(t){const e=t??!!this.#u.dot;if(this.#t===this&&this.#h(),!this.type){const n=this.isStart()&&this.isEnd(),r=this.#r.map((e=>{const[r,o,i,s]=\"string\"==typeof e?vt.#f(e,this.#e,n):e.toRegExpSource(t);return this.#e=this.#e||i,this.#n=this.#n||s,r})).join(\"\");let o=\"\";if(this.isStart()&&\"string\"==typeof this.#r[0]&&(1!==this.#r.length||!ft.has(this.#r[0]))){const n=pt,i=e&&n.has(r.charAt(0))||r.startsWith(\"\\\\.\")&&n.has(r.charAt(2))||r.startsWith(\"\\\\.\\\\.\")&&n.has(r.charAt(4)),s=!e&&!t&&n.has(r.charAt(0));o=i?\"(?!(?:^|/)\\\\.\\\\.?(?:$|/))\":s?ht:\"\"}let i=\"\";return this.isEnd()&&this.#t.#a&&\"!\"===this.#o?.type&&(i=\"(?:$|\\\\/)\"),[o+r+i,ut(r),this.#e=!!this.#e,this.#n]}const n=\"*\"===this.type||\"+\"===this.type,r=\"!\"===this.type?\"(?:(?!(?:\":\"(?:\";let o=this.#d(e);if(this.isStart()&&this.isEnd()&&!o&&\"!\"!==this.type){const t=this.toString();return this.#r=[t],this.type=null,this.#e=void 0,[t,ut(this.toString()),!1,!1]}let i=!n||t||e?\"\":this.#d(!0);i===o&&(i=\"\"),i&&(o=`(?:${o})(?:${i})*?`);let s=\"\";return s=\"!\"===this.type&&this.#l?(this.isStart()&&!e?ht:\"\")+yt:r+o+(\"!\"===this.type?\"))\"+(!this.isStart()||e||t?\"\":ht)+mt+\")\":\"@\"===this.type?\")\":\"?\"===this.type?\")?\":\"+\"===this.type&&i?\")\":\"*\"===this.type&&i?\")?\":`)${this.type}`),[s,ut(o),this.#e=!!this.#e,this.#n]}#d(t){return this.#r.map((e=>{if(\"string\"==typeof e)throw new Error(\"string type in extglob ast??\");const[n,r,o,i]=e.toRegExpSource(t);return this.#n=this.#n||i,n})).filter((t=>!(this.isStart()&&this.isEnd()&&!t))).join(\"|\")}static#f(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=!1,o=\"\",i=!1;for(let s=0;s<t.length;s++){const a=t.charAt(s);if(r)r=!1,o+=(dt.has(a)?\"\\\\\":\"\")+a;else if(\"\\\\\"!==a){if(\"[\"===a){const[n,r,a,u]=at(t,s);if(a){o+=n,i=i||r,s+=a-1,e=e||u;continue}}\"*\"!==a?\"?\"!==a?o+=a.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g,\"\\\\$&\"):(o+=gt,e=!0):(o+=n&&\"*\"===t?yt:mt,e=!0)}else s===t.length-1?o+=\"\\\\\\\\\":r=!0}return[o,ut(t),!!e,i]}}const bt=function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return rt(e),!(!n.nocomment&&\"#\"===e.charAt(0))&&new Gt(e,n).match(t)},wt=/^\\*+([^+@!?\\*\\[\\(]*)$/,xt=t=>e=>!e.startsWith(\".\")&&e.endsWith(t),Nt=t=>e=>e.endsWith(t),Pt=t=>(t=t.toLowerCase(),e=>!e.startsWith(\".\")&&e.toLowerCase().endsWith(t)),At=t=>(t=t.toLowerCase(),e=>e.toLowerCase().endsWith(t)),Ot=/^\\*+\\.\\*+$/,Et=t=>!t.startsWith(\".\")&&t.includes(\".\"),Tt=t=>\".\"!==t&&\"..\"!==t&&t.includes(\".\"),jt=/^\\.\\*+$/,St=t=>\".\"!==t&&\"..\"!==t&&t.startsWith(\".\"),$t=/^\\*+$/,Ct=t=>0!==t.length&&!t.startsWith(\".\"),It=t=>0!==t.length&&\".\"!==t&&\"..\"!==t,kt=/^\\?+([^+@!?\\*\\[\\(]*)?$/,Rt=t=>{let[e,n=\"\"]=t;const r=Ut([e]);return n?(n=n.toLowerCase(),t=>r(t)&&t.toLowerCase().endsWith(n)):r},Lt=t=>{let[e,n=\"\"]=t;const r=Ft([e]);return n?(n=n.toLowerCase(),t=>r(t)&&t.toLowerCase().endsWith(n)):r},_t=t=>{let[e,n=\"\"]=t;const r=Ft([e]);return n?t=>r(t)&&t.endsWith(n):r},Mt=t=>{let[e,n=\"\"]=t;const r=Ut([e]);return n?t=>r(t)&&t.endsWith(n):r},Ut=t=>{let[e]=t;const n=e.length;return t=>t.length===n&&!t.startsWith(\".\")},Ft=t=>{let[e]=t;const n=e.length;return t=>t.length===n&&\".\"!==t&&\"..\"!==t},Dt=\"object\"==typeof process&&process?\"object\"==typeof process.env&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:\"posix\";bt.sep=\"win32\"===Dt?\"\\\\\":\"/\";const Bt=Symbol(\"globstar **\");bt.GLOBSTAR=Bt,bt.filter=function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n=>bt(n,t,e)};const Wt=function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.assign({},t,e)};bt.defaults=t=>{if(!t||\"object\"!=typeof t||!Object.keys(t).length)return bt;const e=bt;return Object.assign((function(n,r){return e(n,r,Wt(t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}))}),{Minimatch:class extends e.Minimatch{constructor(e){super(e,Wt(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}))}static defaults(n){return e.defaults(Wt(t,n)).Minimatch}},AST:class extends e.AST{constructor(e,n){super(e,n,Wt(t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}))}static fromGlob(n){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e.AST.fromGlob(n,Wt(t,r))}},unescape:function(n){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e.unescape(n,Wt(t,r))},escape:function(n){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e.escape(n,Wt(t,r))},filter:function(n){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e.filter(n,Wt(t,r))},defaults:n=>e.defaults(Wt(t,n)),makeRe:function(n){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e.makeRe(n,Wt(t,r))},braceExpand:function(n){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e.braceExpand(n,Wt(t,r))},match:function(n,r){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return e.match(n,r,Wt(t,o))},sep:e.sep,GLOBSTAR:Bt})};const Vt=function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return rt(t),e.nobrace||!/\\{(?:(?!\\{).)*\\}/.test(t)?[t]:nt(t)};bt.braceExpand=Vt,bt.makeRe=function(t){return new Gt(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).makeRe()},bt.match=function(t,e){const n=new Gt(e,arguments.length>2&&void 0!==arguments[2]?arguments[2]:{});return t=t.filter((t=>n.match(t))),n.options.nonull&&!t.length&&t.push(e),t};const zt=/[?*]|[+@!]\\(.*?\\)|\\[|\\]/;class Gt{options;set;pattern;windowsPathsNoEscape;nonegate;negate;comment;empty;preserveMultipleSlashes;partial;globSet;globParts;nocase;isWindows;platform;windowsNoMagicRoot;regexp;constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};rt(t),e=e||{},this.options=e,this.pattern=t,this.platform=e.platform||Dt,this.isWindows=\"win32\"===this.platform,this.windowsPathsNoEscape=!!e.windowsPathsNoEscape||!1===e.allowWindowsEscape,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\\\/g,\"/\")),this.preserveMultipleSlashes=!!e.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!e.nonegate,this.comment=!1,this.empty=!1,this.partial=!!e.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=void 0!==e.windowsNoMagicRoot?e.windowsNoMagicRoot:!(!this.isWindows||!this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(const t of this.set)for(const e of t)if(\"string\"!=typeof e)return!0;return!1}debug(){}make(){const t=this.pattern,e=this.options;if(!e.nocomment&&\"#\"===t.charAt(0))return void(this.comment=!0);if(!t)return void(this.empty=!0);this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],e.debug&&(this.debug=function(){return console.error(...arguments)}),this.debug(this.pattern,this.globSet);const n=this.globSet.map((t=>this.slashSplit(t)));this.globParts=this.preprocess(n),this.debug(this.pattern,this.globParts);let r=this.globParts.map(((t,e,n)=>{if(this.isWindows&&this.windowsNoMagicRoot){const e=!(\"\"!==t[0]||\"\"!==t[1]||\"?\"!==t[2]&&zt.test(t[2])||zt.test(t[3])),n=/^[a-z]:/i.test(t[0]);if(e)return[...t.slice(0,4),...t.slice(4).map((t=>this.parse(t)))];if(n)return[t[0],...t.slice(1).map((t=>this.parse(t)))]}return t.map((t=>this.parse(t)))}));if(this.debug(this.pattern,r),this.set=r.filter((t=>-1===t.indexOf(!1))),this.isWindows)for(let t=0;t<this.set.length;t++){const e=this.set[t];\"\"===e[0]&&\"\"===e[1]&&\"?\"===this.globParts[t][2]&&\"string\"==typeof e[3]&&/^[a-z]:$/i.test(e[3])&&(e[2]=\"?\")}this.debug(this.pattern,this.set)}preprocess(t){if(this.options.noglobstar)for(let e=0;e<t.length;e++)for(let n=0;n<t[e].length;n++)\"**\"===t[e][n]&&(t[e][n]=\"*\");const{optimizationLevel:e=1}=this.options;return e>=2?(t=this.firstPhasePreProcess(t),t=this.secondPhasePreProcess(t)):t=e>=1?this.levelOneOptimize(t):this.adjascentGlobstarOptimize(t),t}adjascentGlobstarOptimize(t){return t.map((t=>{let e=-1;for(;-1!==(e=t.indexOf(\"**\",e+1));){let n=e;for(;\"**\"===t[n+1];)n++;n!==e&&t.splice(e,n-e)}return t}))}levelOneOptimize(t){return t.map((t=>0===(t=t.reduce(((t,e)=>{const n=t[t.length-1];return\"**\"===e&&\"**\"===n?t:\"..\"===e&&n&&\"..\"!==n&&\".\"!==n&&\"**\"!==n?(t.pop(),t):(t.push(e),t)}),[])).length?[\"\"]:t))}levelTwoFileOptimize(t){Array.isArray(t)||(t=this.slashSplit(t));let e=!1;do{if(e=!1,!this.preserveMultipleSlashes){for(let n=1;n<t.length-1;n++){const r=t[n];1===n&&\"\"===r&&\"\"===t[0]||\".\"!==r&&\"\"!==r||(e=!0,t.splice(n,1),n--)}\".\"!==t[0]||2!==t.length||\".\"!==t[1]&&\"\"!==t[1]||(e=!0,t.pop())}let n=0;for(;-1!==(n=t.indexOf(\"..\",n+1));){const r=t[n-1];r&&\".\"!==r&&\"..\"!==r&&\"**\"!==r&&(e=!0,t.splice(n-1,2),n-=2)}}while(e);return 0===t.length?[\"\"]:t}firstPhasePreProcess(t){let e=!1;do{e=!1;for(let n of t){let r=-1;for(;-1!==(r=n.indexOf(\"**\",r+1));){let o=r;for(;\"**\"===n[o+1];)o++;o>r&&n.splice(r+1,o-r);let i=n[r+1];const s=n[r+2],a=n[r+3];if(\"..\"!==i)continue;if(!s||\".\"===s||\"..\"===s||!a||\".\"===a||\"..\"===a)continue;e=!0,n.splice(r,1);const u=n.slice(0);u[r]=\"**\",t.push(u),r--}if(!this.preserveMultipleSlashes){for(let t=1;t<n.length-1;t++){const r=n[t];1===t&&\"\"===r&&\"\"===n[0]||\".\"!==r&&\"\"!==r||(e=!0,n.splice(t,1),t--)}\".\"!==n[0]||2!==n.length||\".\"!==n[1]&&\"\"!==n[1]||(e=!0,n.pop())}let o=0;for(;-1!==(o=n.indexOf(\"..\",o+1));){const t=n[o-1];if(t&&\".\"!==t&&\"..\"!==t&&\"**\"!==t){e=!0;const t=1===o&&\"**\"===n[o+1]?[\".\"]:[];n.splice(o-1,2,...t),0===n.length&&n.push(\"\"),o-=2}}}}while(e);return t}secondPhasePreProcess(t){for(let e=0;e<t.length-1;e++)for(let n=e+1;n<t.length;n++){const r=this.partsMatch(t[e],t[n],!this.preserveMultipleSlashes);if(r){t[e]=[],t[n]=r;break}}return t.filter((t=>t.length))}partsMatch(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=0,o=0,i=[],s=\"\";for(;r<t.length&&o<e.length;)if(t[r]===e[o])i.push(\"b\"===s?e[o]:t[r]),r++,o++;else if(n&&\"**\"===t[r]&&e[o]===t[r+1])i.push(t[r]),r++;else if(n&&\"**\"===e[o]&&t[r]===e[o+1])i.push(e[o]),o++;else if(\"*\"!==t[r]||!e[o]||!this.options.dot&&e[o].startsWith(\".\")||\"**\"===e[o]){if(\"*\"!==e[o]||!t[r]||!this.options.dot&&t[r].startsWith(\".\")||\"**\"===t[r])return!1;if(\"a\"===s)return!1;s=\"b\",i.push(e[o]),r++,o++}else{if(\"b\"===s)return!1;s=\"a\",i.push(t[r]),r++,o++}return t.length===e.length&&i}parseNegate(){if(this.nonegate)return;const t=this.pattern;let e=!1,n=0;for(let r=0;r<t.length&&\"!\"===t.charAt(r);r++)e=!e,n++;n&&(this.pattern=t.slice(n)),this.negate=e}matchOne(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r=this.options;if(this.isWindows){const n=\"string\"==typeof t[0]&&/^[a-z]:$/i.test(t[0]),r=!n&&\"\"===t[0]&&\"\"===t[1]&&\"?\"===t[2]&&/^[a-z]:$/i.test(t[3]),o=\"string\"==typeof e[0]&&/^[a-z]:$/i.test(e[0]),i=r?3:n?0:void 0,s=!o&&\"\"===e[0]&&\"\"===e[1]&&\"?\"===e[2]&&\"string\"==typeof e[3]&&/^[a-z]:$/i.test(e[3])?3:o?0:void 0;if(\"number\"==typeof i&&\"number\"==typeof s){const[n,r]=[t[i],e[s]];n.toLowerCase()===r.toLowerCase()&&(e[s]=n,s>i?e=e.slice(s):i>s&&(t=t.slice(i)))}}const{optimizationLevel:o=1}=this.options;o>=2&&(t=this.levelTwoFileOptimize(t)),this.debug(\"matchOne\",this,{file:t,pattern:e}),this.debug(\"matchOne\",t.length,e.length);for(var i=0,s=0,a=t.length,u=e.length;i<a&&s<u;i++,s++){this.debug(\"matchOne loop\");var c=e[s],l=t[i];if(this.debug(e,c,l),!1===c)return!1;if(c===Bt){this.debug(\"GLOBSTAR\",[e,c,l]);var h=i,p=s+1;if(p===u){for(this.debug(\"** at the end\");i<a;i++)if(\".\"===t[i]||\"..\"===t[i]||!r.dot&&\".\"===t[i].charAt(0))return!1;return!0}for(;h<a;){var f=t[h];if(this.debug(\"\\nglobstar while\",t,h,e,p,f),this.matchOne(t.slice(h),e.slice(p),n))return this.debug(\"globstar found match!\",h,a,f),!0;if(\".\"===f||\"..\"===f||!r.dot&&\".\"===f.charAt(0)){this.debug(\"dot detected!\",t,h,e,p);break}this.debug(\"globstar swallow a segment, and continue\"),h++}return!(!n||(this.debug(\"\\n>>> no match, partial?\",t,h,e,p),h!==a))}let o;if(\"string\"==typeof c?(o=l===c,this.debug(\"string match\",c,l,o)):(o=c.test(l),this.debug(\"pattern match\",c,l,o)),!o)return!1}if(i===a&&s===u)return!0;if(i===a)return n;if(s===u)return i===a-1&&\"\"===t[i];throw new Error(\"wtf?\")}braceExpand(){return Vt(this.pattern,this.options)}parse(t){rt(t);const e=this.options;if(\"**\"===t)return Bt;if(\"\"===t)return\"\";let n,r=null;(n=t.match($t))?r=e.dot?It:Ct:(n=t.match(wt))?r=(e.nocase?e.dot?At:Pt:e.dot?Nt:xt)(n[1]):(n=t.match(kt))?r=(e.nocase?e.dot?Lt:Rt:e.dot?_t:Mt)(n):(n=t.match(Ot))?r=e.dot?Tt:Et:(n=t.match(jt))&&(r=St);const o=vt.fromGlob(t,this.options).toMMPattern();return r&&\"object\"==typeof o&&Reflect.defineProperty(o,\"test\",{value:r}),o}makeRe(){if(this.regexp||!1===this.regexp)return this.regexp;const t=this.set;if(!t.length)return this.regexp=!1,this.regexp;const e=this.options,n=e.noglobstar?\"[^/]*?\":e.dot?\"(?:(?!(?:\\\\/|^)(?:\\\\.{1,2})($|\\\\/)).)*?\":\"(?:(?!(?:\\\\/|^)\\\\.).)*?\",r=new Set(e.nocase?[\"i\"]:[]);let o=t.map((t=>{const e=t.map((t=>{if(t instanceof RegExp)for(const e of t.flags.split(\"\"))r.add(e);return\"string\"==typeof t?t.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g,\"\\\\$&\"):t===Bt?Bt:t._src}));return e.forEach(((t,r)=>{const o=e[r+1],i=e[r-1];t===Bt&&i!==Bt&&(void 0===i?void 0!==o&&o!==Bt?e[r+1]=\"(?:\\\\/|\"+n+\"\\\\/)?\"+o:e[r]=n:void 0===o?e[r-1]=i+\"(?:\\\\/|\"+n+\")?\":o!==Bt&&(e[r-1]=i+\"(?:\\\\/|\\\\/\"+n+\"\\\\/)\"+o,e[r+1]=Bt))})),e.filter((t=>t!==Bt)).join(\"/\")})).join(\"|\");const[i,s]=t.length>1?[\"(?:\",\")\"]:[\"\",\"\"];o=\"^\"+i+o+s+\"$\",this.negate&&(o=\"^(?!\"+o+\").+$\");try{this.regexp=new RegExp(o,[...r].join(\"\"))}catch(t){this.regexp=!1}return this.regexp}slashSplit(t){return this.preserveMultipleSlashes?t.split(\"/\"):this.isWindows&&/^\\/\\/[^\\/]+/.test(t)?[\"\",...t.split(/\\/+/)]:t.split(/\\/+/)}match(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.partial;if(this.debug(\"match\",t,this.pattern),this.comment)return!1;if(this.empty)return\"\"===t;if(\"/\"===t&&e)return!0;const n=this.options;this.isWindows&&(t=t.split(\"\\\\\").join(\"/\"));const r=this.slashSplit(t);this.debug(this.pattern,\"split\",r);const o=this.set;this.debug(this.pattern,\"set\",o);let i=r[r.length-1];if(!i)for(let t=r.length-2;!i&&t>=0;t--)i=r[t];for(let t=0;t<o.length;t++){const s=o[t];let a=r;if(n.matchBase&&1===s.length&&(a=[i]),this.matchOne(a,s,e))return!!n.flipNegate||!this.negate}return!n.flipNegate&&this.negate}static defaults(t){return bt.defaults(t).Minimatch}}function qt(t){const e=new Error(`${arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\"}Invalid response: ${t.status} ${t.statusText}`);return e.status=t.status,e.response=t,e}function Ht(t,e){const{status:n}=e;if(401===n&&t.digest)return e;if(n>=400)throw qt(e);return e}function Xt(t,e){return arguments.length>2&&void 0!==arguments[2]&&arguments[2]?{data:e,headers:t.headers?V(t.headers):{},status:t.status,statusText:t.statusText}:e}bt.AST=vt,bt.Minimatch=Gt,bt.escape=function(t){let{windowsPathsNoEscape:e=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e?t.replace(/[?*()[\\]]/g,\"[$&]\"):t.replace(/[?*()[\\]\\\\]/g,\"\\\\$&\")},bt.unescape=ut;const Zt=(Yt=function(t,e,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const o=tt({url:y(t.remoteURL,f(e)),method:\"COPY\",headers:{Destination:y(t.remoteURL,f(n)),Overwrite:!1===r.overwrite?\"F\":\"T\",Depth:r.shallow?\"0\":\"infinity\"}},t,r);return s=function(e){Ht(t,e)},(i=Q(o,t))&&i.then||(i=Promise.resolve(i)),s?i.then(s):i;var i,s},function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];try{return Promise.resolve(Yt.apply(this,t))}catch(t){return Promise.reject(t)}});var Yt,Kt=n(635),Jt=n(829),Qt=n.n(Jt),te=function(t){return t.Array=\"array\",t.Object=\"object\",t.Original=\"original\",t}(te||{});function ee(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:te.Original;const r=Qt().get(t,e);return\"array\"===n&&!1===Array.isArray(r)?[r]:\"object\"===n&&Array.isArray(r)?r[0]:r}function ne(t){return new Promise((e=>{e(function(t){const{multistatus:e}=t;if(\"\"===e)return{multistatus:{response:[]}};if(!e)throw new Error(\"Invalid response: No root multistatus found\");const n={multistatus:Array.isArray(e)?e[0]:e};return Qt().set(n,\"multistatus.response\",ee(n,\"multistatus.response\",te.Array)),Qt().set(n,\"multistatus.response\",Qt().get(n,\"multistatus.response\").map((t=>function(t){const e=Object.assign({},t);return e.status?Qt().set(e,\"status\",ee(e,\"status\",te.Object)):(Qt().set(e,\"propstat\",ee(e,\"propstat\",te.Object)),Qt().set(e,\"propstat.prop\",ee(e,\"propstat.prop\",te.Object))),e}(t)))),n}(new Kt.XMLParser({removeNSPrefix:!0,numberParseOptions:{hex:!0,leadingZeros:!1}}).parse(t)))}))}function re(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const{getlastmodified:r=null,getcontentlength:o=\"0\",resourcetype:i=null,getcontenttype:s=null,getetag:a=null}=t,u=i&&\"object\"==typeof i&&void 0!==i.collection?\"directory\":\"file\",c={filename:e,basename:l().basename(e),lastmod:r,size:parseInt(o,10),type:u,etag:\"string\"==typeof a?a.replace(/\"/g,\"\"):null};return\"file\"===u&&(c.mime=s&&\"string\"==typeof s?s.split(\";\")[0]:\"\"),n&&(void 0!==t.displayname&&(t.displayname=String(t.displayname)),c.props=t),c}function oe(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=null;try{t.multistatus.response[0].propstat&&(r=t.multistatus.response[0])}catch(t){}if(!r)throw new Error(\"Failed getting item stat: bad response\");const{propstat:{prop:o,status:i}}=r,[s,a,u]=i.split(\" \",3),c=parseInt(a,10);if(c>=400){const t=new Error(`Invalid response: ${c} ${u}`);throw t.status=c,t}return re(o,g(e),n)}function ie(t){switch(String(t)){case\"-3\":return\"unlimited\";case\"-2\":case\"-1\":return\"unknown\";default:return parseInt(String(t),10)}}function se(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}const ae=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{details:r=!1}=n,o=tt({url:y(t.remoteURL,f(e)),method:\"PROPFIND\",headers:{Accept:\"text/plain,application/xml\",Depth:\"0\"}},t,n);return se(Q(o,t),(function(n){return Ht(t,n),se(n.text(),(function(t){return se(ne(t),(function(t){const o=oe(t,e,r);return Xt(n,o,r)}))}))}))}));function ue(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}const ce=le((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=function(t){if(!t||\"/\"===t)return[];let e=t;const n=[];do{n.push(e),e=l().dirname(e)}while(e&&\"/\"!==e);return n}(g(e));r.sort(((t,e)=>t.length>e.length?1:e.length>t.length?-1:0));let o=!1;return function(t,e,n){if(\"function\"==typeof t[fe]){var r,o,i,s=t[fe]();function l(t){try{for(;!(r=s.next()).done;)if((t=e(r.value))&&t.then){if(!me(t))return void t.then(l,i||(i=de.bind(null,o=new ge,2)));t=t.v}o?de(o,1,t):o=t}catch(t){de(o||(o=new ge),2,t)}}if(l(),s.return){var a=function(t){try{r.done||s.return()}catch(t){}return t};if(o&&o.then)return o.then(a,(function(t){throw a(t)}));a()}return o}if(!(\"length\"in t))throw new TypeError(\"Object is not iterable\");for(var u=[],c=0;c<t.length;c++)u.push(t[c]);return function(t,e,n){var r,o,i=-1;return function s(a){try{for(;++i<t.length&&(!n||!n());)if((a=e(i))&&a.then){if(!me(a))return void a.then(s,o||(o=de.bind(null,r=new ge,2)));a=a.v}r?de(r,1,a):r=a}catch(t){de(r||(r=new ge),2,t)}}(),r}(u,(function(t){return e(u[t])}),n)}(r,(function(r){return i=function(){return function(n,o){try{var i=ue(ae(t,r),(function(t){if(\"directory\"!==t.type)throw new Error(`Path includes a file: ${e}`)}))}catch(t){return o(t)}return i&&i.then?i.then(void 0,o):i}(0,(function(e){const i=e;return function(){if(404===i.status)return o=!0,pe(ye(t,r,{...n,recursive:!1}));throw e}()}))},(s=function(){if(o)return pe(ye(t,r,{...n,recursive:!1}))}())&&s.then?s.then(i):i();var i,s}),(function(){return!1}))}));function le(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}function he(){}function pe(t,e){if(!e)return t&&t.then?t.then(he):Promise.resolve()}const fe=\"undefined\"!=typeof Symbol?Symbol.iterator||(Symbol.iterator=Symbol(\"Symbol.iterator\")):\"@@iterator\";function de(t,e,n){if(!t.s){if(n instanceof ge){if(!n.s)return void(n.o=de.bind(null,t,e));1&e&&(e=n.s),n=n.v}if(n&&n.then)return void n.then(de.bind(null,t,e),de.bind(null,t,2));t.s=e,t.v=n;const r=t.o;r&&r(t)}}const ge=function(){function t(){}return t.prototype.then=function(e,n){const r=new t,o=this.s;if(o){const t=1&o?e:n;if(t){try{de(r,1,t(this.v))}catch(t){de(r,2,t)}return r}return this}return this.o=function(t){try{const o=t.v;1&t.s?de(r,1,e?e(o):o):n?de(r,1,n(o)):de(r,2,o)}catch(t){de(r,2,t)}},r},t}();function me(t){return t instanceof ge&&1&t.s}const ye=le((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!0===n.recursive)return ce(t,e,n);const r=tt({url:y(t.remoteURL,(o=f(e),o.endsWith(\"/\")?o:o+\"/\")),method:\"MKCOL\"},t,n);var o;return ue(Q(r,t),(function(e){Ht(t,e)}))}));var ve=n(388),be=n.n(ve);const we=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r={};if(\"object\"==typeof n.range&&\"number\"==typeof n.range.start){let t=`bytes=${n.range.start}-`;\"number\"==typeof n.range.end&&(t=`${t}${n.range.end}`),r.Range=t}const o=tt({url:y(t.remoteURL,f(e)),method:\"GET\",headers:r},t,n);return s=function(e){if(Ht(t,e),r.Range&&206!==e.status){const t=new Error(`Invalid response code for partial request: ${e.status}`);throw t.status=e.status,t}return n.callback&&setTimeout((()=>{n.callback(e)}),0),e.body},(i=Q(o,t))&&i.then||(i=Promise.resolve(i)),s?i.then(s):i;var i,s})),xe=()=>{},Ne=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}((function(t,e,n){n.url||(n.url=y(t.remoteURL,f(e)));const r=tt(n,t,{});return i=function(e){return Ht(t,e),e},(o=Q(r,t))&&o.then||(o=Promise.resolve(o)),i?o.then(i):o;var o,i})),Pe=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=tt({url:y(t.remoteURL,f(e)),method:\"DELETE\"},t,n);return i=function(e){Ht(t,e)},(o=Q(r,t))&&o.then||(o=Promise.resolve(o)),i?o.then(i):o;var o,i})),Ae=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return function(r,o){try{var i=(s=ae(t,e,n),a=function(){return!0},u?a?a(s):s:(s&&s.then||(s=Promise.resolve(s)),a?s.then(a):s))}catch(t){return o(t)}var s,a,u;return i&&i.then?i.then(void 0,o):i}(0,(function(t){if(404===t.status)return!1;throw t}))}));function Oe(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}const Ee=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=tt({url:y(t.remoteURL,f(e),\"/\"),method:\"PROPFIND\",headers:{Accept:\"text/plain,application/xml\",Depth:n.deep?\"infinity\":\"1\"}},t,n);return Oe(Q(r,t),(function(r){return Ht(t,r),Oe(r.text(),(function(o){if(!o)throw new Error(\"Failed parsing directory contents: Empty response\");return Oe(ne(o),(function(o){const i=d(e);let s=function(t,e,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];const i=l().join(e,\"/\"),{multistatus:{response:s}}=t,a=s.map((t=>{const e=function(t){try{return t.replace(/^https?:\\/\\/[^\\/]+/,\"\")}catch(t){throw new u(t,\"Failed normalising HREF\")}}(t.href),{propstat:{prop:n}}=t;return re(n,\"/\"===i?decodeURIComponent(g(e)):g(l().relative(decodeURIComponent(i),decodeURIComponent(e))),r)}));return o?a:a.filter((t=>t.basename&&(\"file\"===t.type||t.filename!==n.replace(/\\/$/,\"\"))))}(o,d(t.remoteBasePath||t.remotePath),i,n.details,n.includeSelf);return n.glob&&(s=function(t,e){return t.filter((t=>bt(t.filename,e,{matchBase:!0})))}(s,n.glob)),Xt(r,s,n.details)}))}))}))}));function Te(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}const je=Te((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=tt({url:y(t.remoteURL,f(e)),method:\"GET\",headers:{Accept:\"text/plain\"},transformResponse:[Ie]},t,n);return Se(Q(r,t),(function(e){return Ht(t,e),Se(e.text(),(function(t){return Xt(e,t,n.details)}))}))}));function Se(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}const $e=Te((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=tt({url:y(t.remoteURL,f(e)),method:\"GET\"},t,n);return Se(Q(r,t),(function(e){let r;return Ht(t,e),function(t,e){var n=t();return n&&n.then?n.then(e):e()}((function(){return Se(e.arrayBuffer(),(function(t){r=t}))}),(function(){return Xt(e,r,n.details)}))}))})),Ce=Te((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{format:r=\"binary\"}=n;if(\"binary\"!==r&&\"text\"!==r)throw new u({info:{code:I.InvalidOutputFormat}},`Invalid output format: ${r}`);return\"text\"===r?je(t,e,n):$e(t,e,n)})),Ie=t=>t;function ke(t){return new Kt.XMLBuilder({attributeNamePrefix:\"@_\",format:!0,ignoreAttributes:!1,suppressEmptyNode:!0}).build(Re({lockinfo:{\"@_xmlns:d\":\"DAV:\",lockscope:{exclusive:{}},locktype:{write:{}},owner:{href:t}}},\"d\"))}function Re(t,e){const n={...t};for(const t in n)n.hasOwnProperty(t)&&(n[t]&&\"object\"==typeof n[t]&&-1===t.indexOf(\":\")?(n[`${e}:${t}`]=Re(n[t],e),delete n[t]):!1===/^@_/.test(t)&&(n[`${e}:${t}`]=n[t],delete n[t]));return n}function Le(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function _e(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}const Me=_e((function(t,e,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const o=tt({url:y(t.remoteURL,f(e)),method:\"UNLOCK\",headers:{\"Lock-Token\":n}},t,r);return Le(Q(o,t),(function(e){if(Ht(t,e),204!==e.status&&200!==e.status)throw qt(e)}))})),Ue=_e((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{refreshToken:r,timeout:o=Fe}=n,i={Accept:\"text/plain,application/xml\",Timeout:o};r&&(i.If=r);const s=tt({url:y(t.remoteURL,f(e)),method:\"LOCK\",headers:i,data:ke(t.contactHref)},t,n);return Le(Q(s,t),(function(e){return Ht(t,e),Le(e.text(),(function(t){const n=(i=t,new Kt.XMLParser({removeNSPrefix:!0,parseAttributeValue:!0,parseTagValue:!0}).parse(i)),r=Qt().get(n,\"prop.lockdiscovery.activelock.locktoken.href\"),o=Qt().get(n,\"prop.lockdiscovery.activelock.timeout\");var i;if(!r)throw qt(e,\"No lock token received: \");return{token:r,serverTimeout:o}}))}))})),Fe=\"Infinite, Second-4100000000\";function De(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}const Be=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}((function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=e.path||\"/\",r=tt({url:y(t.remoteURL,n),method:\"PROPFIND\",headers:{Accept:\"text/plain,application/xml\",Depth:\"0\"}},t,e);return De(Q(r,t),(function(n){return Ht(t,n),De(n.text(),(function(t){return De(ne(t),(function(t){const r=function(t){try{const[e]=t.multistatus.response,{propstat:{prop:{\"quota-used-bytes\":n,\"quota-available-bytes\":r}}}=e;return void 0!==n&&void 0!==r?{used:parseInt(String(n),10),available:ie(r)}:null}catch(t){}return null}(t);return Xt(n,r,e.details)}))}))}))}));function We(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}const Ve=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{details:r=!1}=n,o=tt({url:y(t.remoteURL,f(e)),method:\"SEARCH\",headers:{Accept:\"text/plain,application/xml\",\"Content-Type\":t.headers[\"Content-Type\"]||\"application/xml; charset=utf-8\"}},t,n);return We(Q(o,t),(function(n){return Ht(t,n),We(n.text(),(function(t){return We(ne(t),(function(t){const o=function(t,e,n){const r={truncated:!1,results:[]};return r.truncated=t.multistatus.response.some((t=>\"507\"===(t.status||t.propstat?.status).split(\" \",3)?.[1]&&t.href.replace(/\\/$/,\"\").endsWith(f(e).replace(/\\/$/,\"\")))),t.multistatus.response.forEach((t=>{if(void 0===t.propstat)return;const e=t.href.split(\"/\").map(decodeURIComponent).join(\"/\");r.results.push(re(t.propstat.prop,e,n))})),r}(t,e,r);return Xt(n,o,r)}))}))}))})),ze=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}((function(t,e,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const o=tt({url:y(t.remoteURL,f(e)),method:\"MOVE\",headers:{Destination:y(t.remoteURL,f(n)),Overwrite:!1===r.overwrite?\"F\":\"T\"}},t,r);return s=function(e){Ht(t,e)},(i=Q(o,t))&&i.then||(i=Promise.resolve(i)),s?i.then(s):i;var i,s}));var Ge=n(172);const qe=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}((function(t,e,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const{contentLength:o=!0,overwrite:i=!0}=r,s={\"Content-Type\":\"application/octet-stream\"};!1===o||(s[\"Content-Length\"]=\"number\"==typeof o?`${o}`:`${function(t){if(H(t))return t.byteLength;if(X(t))return t.length;if(\"string\"==typeof t)return(0,Ge.d)(t);throw new u({info:{code:I.DataTypeNoLength}},\"Cannot calculate data length: Invalid type\")}(n)}`),i||(s[\"If-None-Match\"]=\"*\");const a=tt({url:y(t.remoteURL,f(e)),method:\"PUT\",headers:s,data:n},t,r);return l=function(e){try{Ht(t,e)}catch(t){const e=t;if(412!==e.status||i)throw e;return!1}return!0},(c=Q(a,t))&&c.then||(c=Promise.resolve(c)),l?c.then(l):c;var c,l})),He=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}((function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=tt({url:y(t.remoteURL,f(e)),method:\"OPTIONS\"},t,n);return i=function(e){try{Ht(t,e)}catch(t){throw t}return{compliance:(e.headers.get(\"DAV\")??\"\").split(\",\").map((t=>t.trim())),server:e.headers.get(\"Server\")??\"\"}},(o=Q(r,t))&&o.then||(o=Promise.resolve(o)),i?o.then(i):o;var o,i}));function Xe(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}const Ze=Je((function(t,e,n,r,o){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};if(n>r||n<0)throw new u({info:{code:I.InvalidUpdateRange}},`Invalid update range ${n} for partial update`);const s={\"Content-Type\":\"application/octet-stream\",\"Content-Length\":\"\"+(r-n+1),\"Content-Range\":`bytes ${n}-${r}/*`},a=tt({url:y(t.remoteURL,f(e)),method:\"PUT\",headers:s,data:o},t,i);return Xe(Q(a,t),(function(e){Ht(t,e)}))}));function Ye(t,e){var n=t();return n&&n.then?n.then(e):e(n)}const Ke=Je((function(t,e,n,r,o){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};if(n>r||n<0)throw new u({info:{code:I.InvalidUpdateRange}},`Invalid update range ${n} for partial update`);const s={\"Content-Type\":\"application/x-sabredav-partialupdate\",\"Content-Length\":\"\"+(r-n+1),\"X-Update-Range\":`bytes=${n}-${r}`},a=tt({url:y(t.remoteURL,f(e)),method:\"PATCH\",headers:s,data:o},t,i);return Xe(Q(a,t),(function(e){Ht(t,e)}))}));function Je(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}const Qe=Je((function(t,e,n,r,o){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};return Xe(He(t,e,i),(function(s){let a=!1;return Ye((function(){if(s.compliance.includes(\"sabredav-partialupdate\"))return Xe(Ke(t,e,n,r,o,i),(function(t){return a=!0,t}))}),(function(c){let l=!1;return a?c:Ye((function(){if(s.server.includes(\"Apache\")&&s.compliance.includes(\"<http://apache.org/dav/propset/fs/1>\"))return Xe(Ze(t,e,n,r,o,i),(function(t){return l=!0,t}))}),(function(t){if(l)return t;throw new u({info:{code:I.NotSupported}},\"Not supported\")}))}))}))})),tn=\"https://github.com/perry-mitchell/webdav-client/blob/master/LOCK_CONTACT.md\";function en(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{authType:n=null,remoteBasePath:r,contactHref:o=tn,ha1:i,headers:s={},httpAgent:a,httpsAgent:c,password:l,token:h,username:p,withCredentials:d}=e;let g=n;g||(g=p||l?C.Password:C.None);const v={authType:g,remoteBasePath:r,contactHref:o,ha1:i,headers:Object.assign({},s),httpAgent:a,httpsAgent:c,password:l,remotePath:m(t),remoteURL:t,token:h,username:p,withCredentials:d};return k(v,p,l,h,i),{copyFile:(t,e,n)=>Zt(v,t,e,n),createDirectory:(t,e)=>ye(v,t,e),createReadStream:(t,e)=>function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=new(0,be().PassThrough);return we(t,e,n).then((t=>{t.pipe(r)})).catch((t=>{r.emit(\"error\",t)})),r}(v,t,e),createWriteStream:(t,e,n)=>function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:xe;const o=new(0,be().PassThrough),i={};!1===n.overwrite&&(i[\"If-None-Match\"]=\"*\");const s=tt({url:y(t.remoteURL,f(e)),method:\"PUT\",headers:i,data:o,maxRedirects:0},t,n);return Q(s,t).then((e=>Ht(t,e))).then((t=>{setTimeout((()=>{r(t)}),0)})).catch((t=>{o.emit(\"error\",t)})),o}(v,t,e,n),customRequest:(t,e)=>Ne(v,t,e),deleteFile:(t,e)=>Pe(v,t,e),exists:(t,e)=>Ae(v,t,e),getDirectoryContents:(t,e)=>Ee(v,t,e),getFileContents:(t,e)=>Ce(v,t,e),getFileDownloadLink:t=>function(t,e){let n=y(t.remoteURL,f(e));const r=/^https:/i.test(n)?\"https\":\"http\";switch(t.authType){case C.None:break;case C.Password:{const e=O(t.headers.Authorization.replace(/^Basic /i,\"\").trim());n=n.replace(/^https?:\\/\\//,`${r}://${e}@`);break}default:throw new u({info:{code:I.LinkUnsupportedAuthType}},`Unsupported auth type for file link: ${t.authType}`)}return n}(v,t),getFileUploadLink:t=>function(t,e){let n=`${y(t.remoteURL,f(e))}?Content-Type=application/octet-stream`;const r=/^https:/i.test(n)?\"https\":\"http\";switch(t.authType){case C.None:break;case C.Password:{const e=O(t.headers.Authorization.replace(/^Basic /i,\"\").trim());n=n.replace(/^https?:\\/\\//,`${r}://${e}@`);break}default:throw new u({info:{code:I.LinkUnsupportedAuthType}},`Unsupported auth type for file link: ${t.authType}`)}return n}(v,t),getHeaders:()=>Object.assign({},v.headers),getQuota:t=>Be(v,t),lock:(t,e)=>Ue(v,t,e),moveFile:(t,e,n)=>ze(v,t,e,n),putFileContents:(t,e,n)=>qe(v,t,e,n),partialUpdateFileContents:(t,e,n,r,o)=>Qe(v,t,e,n,r,o),getDAVCompliance:t=>He(v,t),search:(t,e)=>Ve(v,t,e),setHeaders:t=>{v.headers=Object.assign({},t)},stat:(t,e)=>ae(v,t,e),unlock:(t,e,n)=>Me(v,t,e,n)}}var nn=r.hT,rn=r.O4,on=r.Kd,sn=r.YK,an=r.UU,un=r.Gu,cn=r.ky,ln=r.h4,hn=r.ch,pn=r.hq,fn=r.i5;export{nn as AuthType,rn as ErrorCode,on as Request,sn as Response,an as createClient,un as getPatcher,cn as parseStat,ln as parseXML,hn as prepareFileFromProps,pn as processResponsePayload,fn as translateDiskSpace};","import { loadState } from \"@nextcloud/initial-state\";\nfunction isPublicShare() {\n  return loadState(\"files_sharing\", \"isPublic\", null) ?? document.querySelector(\n    'input#isPublic[type=\"hidden\"][name=\"isPublic\"][value=\"1\"]'\n  ) !== null;\n}\nfunction getSharingToken() {\n  return loadState(\"files_sharing\", \"sharingToken\", null) ?? document.querySelector('input#sharingToken[type=\"hidden\"]')?.value ?? null;\n}\nexport {\n  getSharingToken,\n  isPublicShare\n};\n","import { join, basename, extname, dirname } from \"path\";\nimport { encodePath } from \"@nextcloud/paths\";\nimport { getLoggerBuilder } from \"@nextcloud/logger\";\nimport { getCurrentUser, onRequestTokenUpdate, getRequestToken } from \"@nextcloud/auth\";\nimport { generateRemoteUrl } from \"@nextcloud/router\";\nimport { CancelablePromise } from \"cancelable-promise\";\nimport { createClient, getPatcher } from \"webdav\";\nimport { isPublicShare, getSharingToken } from \"@nextcloud/sharing/public\";\nconst logger = getLoggerBuilder().setApp(\"@nextcloud/files\").detectUser().build();\nvar Permission = /* @__PURE__ */ ((Permission2) => {\n  Permission2[Permission2[\"NONE\"] = 0] = \"NONE\";\n  Permission2[Permission2[\"CREATE\"] = 4] = \"CREATE\";\n  Permission2[Permission2[\"READ\"] = 1] = \"READ\";\n  Permission2[Permission2[\"UPDATE\"] = 2] = \"UPDATE\";\n  Permission2[Permission2[\"DELETE\"] = 8] = \"DELETE\";\n  Permission2[Permission2[\"SHARE\"] = 16] = \"SHARE\";\n  Permission2[Permission2[\"ALL\"] = 31] = \"ALL\";\n  return Permission2;\n})(Permission || {});\nvar FileType = /* @__PURE__ */ ((FileType2) => {\n  FileType2[\"Folder\"] = \"folder\";\n  FileType2[\"File\"] = \"file\";\n  return FileType2;\n})(FileType || {});\nconst isDavResource = function(source, davService) {\n  return source.match(davService) !== null;\n};\nconst validateData = (data, davService) => {\n  if (data.id && typeof data.id !== \"number\") {\n    throw new Error(\"Invalid id type of value\");\n  }\n  if (!data.source) {\n    throw new Error(\"Missing mandatory source\");\n  }\n  try {\n    new URL(data.source);\n  } catch (e) {\n    throw new Error(\"Invalid source format, source must be a valid URL\");\n  }\n  if (!data.source.startsWith(\"http\")) {\n    throw new Error(\"Invalid source format, only http(s) is supported\");\n  }\n  if (data.displayname && typeof data.displayname !== \"string\") {\n    throw new Error(\"Invalid displayname type\");\n  }\n  if (data.mtime && !(data.mtime instanceof Date)) {\n    throw new Error(\"Invalid mtime type\");\n  }\n  if (data.crtime && !(data.crtime instanceof Date)) {\n    throw new Error(\"Invalid crtime type\");\n  }\n  if (!data.mime || typeof data.mime !== \"string\" || !data.mime.match(/^[-\\w.]+\\/[-+\\w.]+$/gi)) {\n    throw new Error(\"Missing or invalid mandatory mime\");\n  }\n  if (\"size\" in data && typeof data.size !== \"number\" && data.size !== void 0) {\n    throw new Error(\"Invalid size type\");\n  }\n  if (\"permissions\" in data && data.permissions !== void 0 && !(typeof data.permissions === \"number\" && data.permissions >= Permission.NONE && data.permissions <= Permission.ALL)) {\n    throw new Error(\"Invalid permissions\");\n  }\n  if (data.owner && data.owner !== null && typeof data.owner !== \"string\") {\n    throw new Error(\"Invalid owner type\");\n  }\n  if (data.attributes && typeof data.attributes !== \"object\") {\n    throw new Error(\"Invalid attributes type\");\n  }\n  if (data.root && typeof data.root !== \"string\") {\n    throw new Error(\"Invalid root type\");\n  }\n  if (data.root && !data.root.startsWith(\"/\")) {\n    throw new Error(\"Root must start with a leading slash\");\n  }\n  if (data.root && !data.source.includes(data.root)) {\n    throw new Error(\"Root must be part of the source\");\n  }\n  if (data.root && isDavResource(data.source, davService)) {\n    const service = data.source.match(davService)[0];\n    if (!data.source.includes(join(service, data.root))) {\n      throw new Error(\"The root must be relative to the service. e.g /files/emma\");\n    }\n  }\n  if (data.status && !Object.values(NodeStatus).includes(data.status)) {\n    throw new Error(\"Status must be a valid NodeStatus\");\n  }\n};\nvar NodeStatus = /* @__PURE__ */ ((NodeStatus2) => {\n  NodeStatus2[\"NEW\"] = \"new\";\n  NodeStatus2[\"FAILED\"] = \"failed\";\n  NodeStatus2[\"LOADING\"] = \"loading\";\n  NodeStatus2[\"LOCKED\"] = \"locked\";\n  return NodeStatus2;\n})(NodeStatus || {});\nclass Node {\n  _data;\n  _attributes;\n  _knownDavService = /(remote|public)\\.php\\/(web)?dav/i;\n  readonlyAttributes = Object.entries(Object.getOwnPropertyDescriptors(Node.prototype)).filter((e) => typeof e[1].get === \"function\" && e[0] !== \"__proto__\").map((e) => e[0]);\n  handler = {\n    set: (target, prop, value) => {\n      if (this.readonlyAttributes.includes(prop)) {\n        return false;\n      }\n      return Reflect.set(target, prop, value);\n    },\n    deleteProperty: (target, prop) => {\n      if (this.readonlyAttributes.includes(prop)) {\n        return false;\n      }\n      return Reflect.deleteProperty(target, prop);\n    },\n    // TODO: This is deprecated and only needed for files v3\n    get: (target, prop, receiver) => {\n      if (this.readonlyAttributes.includes(prop)) {\n        logger.warn(`Accessing \"Node.attributes.${prop}\" is deprecated, access it directly on the Node instance.`);\n        return Reflect.get(this, prop);\n      }\n      return Reflect.get(target, prop, receiver);\n    }\n  };\n  constructor(data, davService) {\n    validateData(data, davService || this._knownDavService);\n    this._data = {\n      // TODO: Remove with next major release, this is just for compatibility\n      displayname: data.attributes?.displayname,\n      ...data,\n      attributes: {}\n    };\n    this._attributes = new Proxy(this._data.attributes, this.handler);\n    this.update(data.attributes ?? {});\n    if (davService) {\n      this._knownDavService = davService;\n    }\n  }\n  /**\n   * Get the source url to this object\n   * There is no setter as the source is not meant to be changed manually.\n   * You can use the rename or move method to change the source.\n   */\n  get source() {\n    return this._data.source.replace(/\\/$/i, \"\");\n  }\n  /**\n   * Get the encoded source url to this object for requests purposes\n   */\n  get encodedSource() {\n    const { origin } = new URL(this.source);\n    return origin + encodePath(this.source.slice(origin.length));\n  }\n  /**\n   * Get this object name\n   * There is no setter as the source is not meant to be changed manually.\n   * You can use the rename or move method to change the source.\n   */\n  get basename() {\n    return basename(this.source);\n  }\n  /**\n   * The nodes displayname\n   * By default the display name and the `basename` are identical,\n   * but it is possible to have a different name. This happens\n   * on the files app for example for shared folders.\n   */\n  get displayname() {\n    return this._data.displayname || this.basename;\n  }\n  /**\n   * Set the displayname\n   */\n  set displayname(displayname) {\n    this._data.displayname = displayname;\n  }\n  /**\n   * Get this object's extension\n   * There is no setter as the source is not meant to be changed manually.\n   * You can use the rename or move method to change the source.\n   */\n  get extension() {\n    return extname(this.source);\n  }\n  /**\n   * Get the directory path leading to this object\n   * Will use the relative path to root if available\n   *\n   * There is no setter as the source is not meant to be changed manually.\n   * You can use the rename or move method to change the source.\n   */\n  get dirname() {\n    if (this.root) {\n      let source = this.source;\n      if (this.isDavResource) {\n        source = source.split(this._knownDavService).pop();\n      }\n      const firstMatch = source.indexOf(this.root);\n      const root = this.root.replace(/\\/$/, \"\");\n      return dirname(source.slice(firstMatch + root.length) || \"/\");\n    }\n    const url = new URL(this.source);\n    return dirname(url.pathname);\n  }\n  /**\n   * Get the file mime\n   * There is no setter as the mime is not meant to be changed\n   */\n  get mime() {\n    return this._data.mime;\n  }\n  /**\n   * Get the file modification time\n   */\n  get mtime() {\n    return this._data.mtime;\n  }\n  /**\n   * Set the file modification time\n   */\n  set mtime(mtime) {\n    this._data.mtime = mtime;\n  }\n  /**\n   * Get the file creation time\n   * There is no setter as the creation time is not meant to be changed\n   */\n  get crtime() {\n    return this._data.crtime;\n  }\n  /**\n   * Get the file size\n   */\n  get size() {\n    return this._data.size;\n  }\n  /**\n   * Set the file size\n   */\n  set size(size) {\n    this.updateMtime();\n    this._data.size = size;\n  }\n  /**\n   * Get the file attribute\n   * This contains all additional attributes not provided by the Node class\n   */\n  get attributes() {\n    return this._attributes;\n  }\n  /**\n   * Get the file permissions\n   */\n  get permissions() {\n    if (this.owner === null && !this.isDavResource) {\n      return Permission.READ;\n    }\n    return this._data.permissions !== void 0 ? this._data.permissions : Permission.NONE;\n  }\n  /**\n   * Set the file permissions\n   */\n  set permissions(permissions) {\n    this.updateMtime();\n    this._data.permissions = permissions;\n  }\n  /**\n   * Get the file owner\n   * There is no setter as the owner is not meant to be changed\n   */\n  get owner() {\n    if (!this.isDavResource) {\n      return null;\n    }\n    return this._data.owner;\n  }\n  /**\n   * Is this a dav-related resource ?\n   */\n  get isDavResource() {\n    return isDavResource(this.source, this._knownDavService);\n  }\n  /**\n   * @deprecated use `isDavResource` instead - will be removed in next major version.\n   */\n  get isDavRessource() {\n    return this.isDavResource;\n  }\n  /**\n   * Get the dav root of this object\n   * There is no setter as the root is not meant to be changed\n   */\n  get root() {\n    if (this._data.root) {\n      return this._data.root.replace(/^(.+)\\/$/, \"$1\");\n    }\n    if (this.isDavResource) {\n      const root = dirname(this.source);\n      return root.split(this._knownDavService).pop() || null;\n    }\n    return null;\n  }\n  /**\n   * Get the absolute path of this object relative to the root\n   */\n  get path() {\n    if (this.root) {\n      let source = this.source;\n      if (this.isDavResource) {\n        source = source.split(this._knownDavService).pop();\n      }\n      const firstMatch = source.indexOf(this.root);\n      const root = this.root.replace(/\\/$/, \"\");\n      return source.slice(firstMatch + root.length) || \"/\";\n    }\n    return (this.dirname + \"/\" + this.basename).replace(/\\/\\//g, \"/\");\n  }\n  /**\n   * Get the node id if defined.\n   * There is no setter as the fileid is not meant to be changed\n   */\n  get fileid() {\n    return this._data?.id;\n  }\n  /**\n   * Get the node status.\n   */\n  get status() {\n    return this._data?.status;\n  }\n  /**\n   * Set the node status.\n   */\n  set status(status) {\n    this._data.status = status;\n  }\n  /**\n   * Get the node data\n   */\n  get data() {\n    return structuredClone(this._data);\n  }\n  /**\n   * Move the node to a new destination\n   *\n   * @param {string} destination the new source.\n   * e.g. https://cloud.domain.com/remote.php/dav/files/emma/Photos/picture.jpg\n   */\n  move(destination) {\n    validateData({ ...this._data, source: destination }, this._knownDavService);\n    const oldBasename = this.basename;\n    this._data.source = destination;\n    if (this.displayname === oldBasename && this.basename !== oldBasename) {\n      this.displayname = this.basename;\n    }\n    this.updateMtime();\n  }\n  /**\n   * Rename the node\n   * This aliases the move method for easier usage\n   *\n   * @param basename The new name of the node\n   */\n  rename(basename2) {\n    if (basename2.includes(\"/\")) {\n      throw new Error(\"Invalid basename\");\n    }\n    this.move(dirname(this.source) + \"/\" + basename2);\n  }\n  /**\n   * Update the mtime if exists\n   */\n  updateMtime() {\n    if (this._data.mtime) {\n      this._data.mtime = /* @__PURE__ */ new Date();\n    }\n  }\n  /**\n   * Update the attributes of the node\n   * Warning, updating attributes will NOT automatically update the mtime.\n   *\n   * @param attributes The new attributes to update on the Node attributes\n   */\n  update(attributes) {\n    for (const [name, value] of Object.entries(attributes)) {\n      try {\n        if (value === void 0) {\n          delete this.attributes[name];\n        } else {\n          this.attributes[name] = value;\n        }\n      } catch (e) {\n        if (e instanceof TypeError) {\n          continue;\n        }\n        throw e;\n      }\n    }\n  }\n}\nclass File extends Node {\n  get type() {\n    return FileType.File;\n  }\n  /**\n   * Returns a clone of the file\n   */\n  clone() {\n    return new File(this.data);\n  }\n}\nclass Folder extends Node {\n  constructor(data) {\n    super({\n      ...data,\n      mime: \"httpd/unix-directory\"\n    });\n  }\n  get type() {\n    return FileType.Folder;\n  }\n  get extension() {\n    return null;\n  }\n  get mime() {\n    return \"httpd/unix-directory\";\n  }\n  /**\n   * Returns a clone of the folder\n   */\n  clone() {\n    return new Folder(this.data);\n  }\n}\nconst parsePermissions = function(permString = \"\") {\n  let permissions = Permission.NONE;\n  if (!permString) {\n    return permissions;\n  }\n  if (permString.includes(\"C\") || permString.includes(\"K\")) {\n    permissions |= Permission.CREATE;\n  }\n  if (permString.includes(\"G\")) {\n    permissions |= Permission.READ;\n  }\n  if (permString.includes(\"W\") || permString.includes(\"N\") || permString.includes(\"V\")) {\n    permissions |= Permission.UPDATE;\n  }\n  if (permString.includes(\"D\")) {\n    permissions |= Permission.DELETE;\n  }\n  if (permString.includes(\"R\")) {\n    permissions |= Permission.SHARE;\n  }\n  return permissions;\n};\nconst defaultDavProperties = [\n  \"d:getcontentlength\",\n  \"d:getcontenttype\",\n  \"d:getetag\",\n  \"d:getlastmodified\",\n  \"d:creationdate\",\n  \"d:displayname\",\n  \"d:quota-available-bytes\",\n  \"d:resourcetype\",\n  \"nc:has-preview\",\n  \"nc:is-encrypted\",\n  \"nc:mount-type\",\n  \"oc:comments-unread\",\n  \"oc:favorite\",\n  \"oc:fileid\",\n  \"oc:owner-display-name\",\n  \"oc:owner-id\",\n  \"oc:permissions\",\n  \"oc:size\"\n];\nconst defaultDavNamespaces = {\n  d: \"DAV:\",\n  nc: \"http://nextcloud.org/ns\",\n  oc: \"http://owncloud.org/ns\",\n  ocs: \"http://open-collaboration-services.org/ns\"\n};\nconst registerDavProperty = function(prop, namespace = { nc: \"http://nextcloud.org/ns\" }) {\n  if (typeof window._nc_dav_properties === \"undefined\") {\n    window._nc_dav_properties = [...defaultDavProperties];\n    window._nc_dav_namespaces = { ...defaultDavNamespaces };\n  }\n  const namespaces = { ...window._nc_dav_namespaces, ...namespace };\n  if (window._nc_dav_properties.find((search) => search === prop)) {\n    logger.warn(`${prop} already registered`, { prop });\n    return false;\n  }\n  if (prop.startsWith(\"<\") || prop.split(\":\").length !== 2) {\n    logger.error(`${prop} is not valid. See example: 'oc:fileid'`, { prop });\n    return false;\n  }\n  const ns = prop.split(\":\")[0];\n  if (!namespaces[ns]) {\n    logger.error(`${prop} namespace unknown`, { prop, namespaces });\n    return false;\n  }\n  window._nc_dav_properties.push(prop);\n  window._nc_dav_namespaces = namespaces;\n  return true;\n};\nconst getDavProperties = function() {\n  if (typeof window._nc_dav_properties === \"undefined\") {\n    window._nc_dav_properties = [...defaultDavProperties];\n  }\n  return window._nc_dav_properties.map((prop) => `<${prop} />`).join(\" \");\n};\nconst getDavNameSpaces = function() {\n  if (typeof window._nc_dav_namespaces === \"undefined\") {\n    window._nc_dav_namespaces = { ...defaultDavNamespaces };\n  }\n  return Object.keys(window._nc_dav_namespaces).map((ns) => `xmlns:${ns}=\"${window._nc_dav_namespaces?.[ns]}\"`).join(\" \");\n};\nconst getDefaultPropfind = function() {\n  return `<?xml version=\"1.0\"?>\n\t\t<d:propfind ${getDavNameSpaces()}>\n\t\t\t<d:prop>\n\t\t\t\t${getDavProperties()}\n\t\t\t</d:prop>\n\t\t</d:propfind>`;\n};\nconst getFavoritesReport = function() {\n  return `<?xml version=\"1.0\"?>\n\t\t<oc:filter-files ${getDavNameSpaces()}>\n\t\t\t<d:prop>\n\t\t\t\t${getDavProperties()}\n\t\t\t</d:prop>\n\t\t\t<oc:filter-rules>\n\t\t\t\t<oc:favorite>1</oc:favorite>\n\t\t\t</oc:filter-rules>\n\t\t</oc:filter-files>`;\n};\nconst getRecentSearch = function(lastModified) {\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<d:searchrequest ${getDavNameSpaces()}\n\txmlns:ns=\"https://github.com/icewind1991/SearchDAV/ns\">\n\t<d:basicsearch>\n\t\t<d:select>\n\t\t\t<d:prop>\n\t\t\t\t${getDavProperties()}\n\t\t\t</d:prop>\n\t\t</d:select>\n\t\t<d:from>\n\t\t\t<d:scope>\n\t\t\t\t<d:href>/files/${getCurrentUser()?.uid}/</d:href>\n\t\t\t\t<d:depth>infinity</d:depth>\n\t\t\t</d:scope>\n\t\t</d:from>\n\t\t<d:where>\n\t\t\t<d:and>\n\t\t\t\t<d:or>\n\t\t\t\t\t<d:not>\n\t\t\t\t\t\t<d:eq>\n\t\t\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t\t\t<d:getcontenttype/>\n\t\t\t\t\t\t\t</d:prop>\n\t\t\t\t\t\t\t<d:literal>httpd/unix-directory</d:literal>\n\t\t\t\t\t\t</d:eq>\n\t\t\t\t\t</d:not>\n\t\t\t\t\t<d:eq>\n\t\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t\t<oc:size/>\n\t\t\t\t\t\t</d:prop>\n\t\t\t\t\t\t<d:literal>0</d:literal>\n\t\t\t\t\t</d:eq>\n\t\t\t\t</d:or>\n\t\t\t\t<d:gt>\n\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t<d:getlastmodified/>\n\t\t\t\t\t</d:prop>\n\t\t\t\t\t<d:literal>${lastModified}</d:literal>\n\t\t\t\t</d:gt>\n\t\t\t</d:and>\n\t\t</d:where>\n\t\t<d:orderby>\n\t\t\t<d:order>\n\t\t\t\t<d:prop>\n\t\t\t\t\t<d:getlastmodified/>\n\t\t\t\t</d:prop>\n\t\t\t\t<d:descending/>\n\t\t\t</d:order>\n\t\t</d:orderby>\n\t\t<d:limit>\n\t\t\t<d:nresults>100</d:nresults>\n\t\t\t<ns:firstresult>0</ns:firstresult>\n\t\t</d:limit>\n\t</d:basicsearch>\n</d:searchrequest>`;\n};\nfunction getRootPath() {\n  if (isPublicShare()) {\n    return `/files/${getSharingToken()}`;\n  }\n  return `/files/${getCurrentUser()?.uid}`;\n}\nconst defaultRootPath = getRootPath();\nfunction getRemoteURL() {\n  const url = generateRemoteUrl(\"dav\");\n  if (isPublicShare()) {\n    return url.replace(\"remote.php\", \"public.php\");\n  }\n  return url;\n}\nconst defaultRemoteURL = getRemoteURL();\nconst getClient = function(remoteURL = defaultRemoteURL, headers = {}) {\n  const client = createClient(remoteURL, { headers });\n  function setHeaders(token) {\n    client.setHeaders({\n      ...headers,\n      // Add this so the server knows it is an request from the browser\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      // Inject user auth\n      requesttoken: token ?? \"\"\n    });\n  }\n  onRequestTokenUpdate(setHeaders);\n  setHeaders(getRequestToken());\n  const patcher = getPatcher();\n  patcher.patch(\"fetch\", (url, options) => {\n    const headers2 = options.headers;\n    if (headers2?.method) {\n      options.method = headers2.method;\n      delete headers2.method;\n    }\n    return fetch(url, options);\n  });\n  return client;\n};\nconst getFavoriteNodes = (davClient, path = \"/\", davRoot = defaultRootPath) => {\n  const controller = new AbortController();\n  return new CancelablePromise(async (resolve, reject, onCancel) => {\n    onCancel(() => controller.abort());\n    try {\n      const contentsResponse = await davClient.getDirectoryContents(`${davRoot}${path}`, {\n        signal: controller.signal,\n        details: true,\n        data: getFavoritesReport(),\n        headers: {\n          // see getClient for patched webdav client\n          method: \"REPORT\"\n        },\n        includeSelf: true\n      });\n      const nodes = contentsResponse.data.filter((node) => node.filename !== path).map((result) => resultToNode(result, davRoot));\n      resolve(nodes);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst resultToNode = function(node, filesRoot = defaultRootPath, remoteURL = defaultRemoteURL) {\n  let userId = getCurrentUser()?.uid;\n  if (isPublicShare()) {\n    userId = userId ?? \"anonymous\";\n  } else if (!userId) {\n    throw new Error(\"No user id found\");\n  }\n  const props = node.props;\n  const permissions = parsePermissions(props?.permissions);\n  const owner = String(props?.[\"owner-id\"] || userId);\n  const id = props.fileid || 0;\n  const mtime = new Date(Date.parse(node.lastmod));\n  const crtime = new Date(Date.parse(props.creationdate));\n  const nodeData = {\n    id,\n    source: `${remoteURL}${node.filename}`,\n    mtime: !isNaN(mtime.getTime()) && mtime.getTime() !== 0 ? mtime : void 0,\n    crtime: !isNaN(crtime.getTime()) && crtime.getTime() !== 0 ? crtime : void 0,\n    mime: node.mime || \"application/octet-stream\",\n    // Manually cast to work around for https://github.com/perry-mitchell/webdav-client/pull/380\n    displayname: props.displayname !== void 0 ? String(props.displayname) : void 0,\n    size: props?.size || Number.parseInt(props.getcontentlength || \"0\"),\n    // The fileid is set to -1 for failed requests\n    status: id < 0 ? NodeStatus.FAILED : void 0,\n    permissions,\n    owner,\n    root: filesRoot,\n    attributes: {\n      ...node,\n      ...props,\n      hasPreview: props?.[\"has-preview\"]\n    }\n  };\n  delete nodeData.attributes?.props;\n  return node.type === \"file\" ? new File(nodeData) : new Folder(nodeData);\n};\nexport {\n  FileType as F,\n  Node as N,\n  Permission as P,\n  getRemoteURL as a,\n  defaultRemoteURL as b,\n  getClient as c,\n  defaultRootPath as d,\n  getFavoriteNodes as e,\n  defaultDavProperties as f,\n  getRootPath as g,\n  defaultDavNamespaces as h,\n  registerDavProperty as i,\n  getDavProperties as j,\n  getDavNameSpaces as k,\n  getDefaultPropfind as l,\n  getFavoritesReport as m,\n  getRecentSearch as n,\n  logger as o,\n  parsePermissions as p,\n  File as q,\n  resultToNode as r,\n  Folder as s,\n  NodeStatus as t\n};\n","import { o as logger } from \"./chunks/dav-Co9y-hkg.mjs\";\nimport { q, F, s, N, t, P, c, l, m, n, a, g, p, b, r, d, h, f, k, j, e, i } from \"./chunks/dav-Co9y-hkg.mjs\";\nimport { getCapabilities } from \"@nextcloud/capabilities\";\nimport { extname, basename } from \"path\";\nimport { getCanonicalLocale, getLanguage } from \"@nextcloud/l10n\";\nimport { TypedEventTarget } from \"typescript-event-target\";\nvar NewMenuEntryCategory = /* @__PURE__ */ ((NewMenuEntryCategory2) => {\n  NewMenuEntryCategory2[NewMenuEntryCategory2[\"UploadFromDevice\"] = 0] = \"UploadFromDevice\";\n  NewMenuEntryCategory2[NewMenuEntryCategory2[\"CreateNew\"] = 1] = \"CreateNew\";\n  NewMenuEntryCategory2[NewMenuEntryCategory2[\"Other\"] = 2] = \"Other\";\n  return NewMenuEntryCategory2;\n})(NewMenuEntryCategory || {});\nclass NewFileMenu {\n  _entries = [];\n  registerEntry(entry) {\n    this.validateEntry(entry);\n    entry.category = entry.category ?? 1;\n    this._entries.push(entry);\n  }\n  unregisterEntry(entry) {\n    const entryIndex = typeof entry === \"string\" ? this.getEntryIndex(entry) : this.getEntryIndex(entry.id);\n    if (entryIndex === -1) {\n      logger.warn(\"Entry not found, nothing removed\", { entry, entries: this.getEntries() });\n      return;\n    }\n    this._entries.splice(entryIndex, 1);\n  }\n  /**\n   * Get the list of registered entries\n   *\n   * @param {Folder} context the creation context. Usually the current folder\n   */\n  getEntries(context) {\n    if (context) {\n      return this._entries.filter((entry) => typeof entry.enabled === \"function\" ? entry.enabled(context) : true);\n    }\n    return this._entries;\n  }\n  getEntryIndex(id) {\n    return this._entries.findIndex((entry) => entry.id === id);\n  }\n  validateEntry(entry) {\n    if (!entry.id || !entry.displayName || !(entry.iconSvgInline || entry.iconClass) || !entry.handler) {\n      throw new Error(\"Invalid entry\");\n    }\n    if (typeof entry.id !== \"string\" || typeof entry.displayName !== \"string\") {\n      throw new Error(\"Invalid id or displayName property\");\n    }\n    if (entry.iconClass && typeof entry.iconClass !== \"string\" || entry.iconSvgInline && typeof entry.iconSvgInline !== \"string\") {\n      throw new Error(\"Invalid icon provided\");\n    }\n    if (entry.enabled !== void 0 && typeof entry.enabled !== \"function\") {\n      throw new Error(\"Invalid enabled property\");\n    }\n    if (typeof entry.handler !== \"function\") {\n      throw new Error(\"Invalid handler property\");\n    }\n    if (\"order\" in entry && typeof entry.order !== \"number\") {\n      throw new Error(\"Invalid order property\");\n    }\n    if (this.getEntryIndex(entry.id) !== -1) {\n      throw new Error(\"Duplicate entry\");\n    }\n  }\n}\nconst getNewFileMenu = function() {\n  if (typeof window._nc_newfilemenu === \"undefined\") {\n    window._nc_newfilemenu = new NewFileMenu();\n    logger.debug(\"NewFileMenu initialized\");\n  }\n  return window._nc_newfilemenu;\n};\nvar DefaultType = /* @__PURE__ */ ((DefaultType2) => {\n  DefaultType2[\"DEFAULT\"] = \"default\";\n  DefaultType2[\"HIDDEN\"] = \"hidden\";\n  return DefaultType2;\n})(DefaultType || {});\nclass FileAction {\n  _action;\n  constructor(action) {\n    this.validateAction(action);\n    this._action = action;\n  }\n  get id() {\n    return this._action.id;\n  }\n  get displayName() {\n    return this._action.displayName;\n  }\n  get title() {\n    return this._action.title;\n  }\n  get iconSvgInline() {\n    return this._action.iconSvgInline;\n  }\n  get enabled() {\n    return this._action.enabled;\n  }\n  get exec() {\n    return this._action.exec;\n  }\n  get execBatch() {\n    return this._action.execBatch;\n  }\n  get order() {\n    return this._action.order;\n  }\n  get parent() {\n    return this._action.parent;\n  }\n  get default() {\n    return this._action.default;\n  }\n  get destructive() {\n    return this._action.destructive;\n  }\n  get inline() {\n    return this._action.inline;\n  }\n  get renderInline() {\n    return this._action.renderInline;\n  }\n  validateAction(action) {\n    if (!action.id || typeof action.id !== \"string\") {\n      throw new Error(\"Invalid id\");\n    }\n    if (!action.displayName || typeof action.displayName !== \"function\") {\n      throw new Error(\"Invalid displayName function\");\n    }\n    if (\"title\" in action && typeof action.title !== \"function\") {\n      throw new Error(\"Invalid title function\");\n    }\n    if (!action.iconSvgInline || typeof action.iconSvgInline !== \"function\") {\n      throw new Error(\"Invalid iconSvgInline function\");\n    }\n    if (!action.exec || typeof action.exec !== \"function\") {\n      throw new Error(\"Invalid exec function\");\n    }\n    if (\"enabled\" in action && typeof action.enabled !== \"function\") {\n      throw new Error(\"Invalid enabled function\");\n    }\n    if (\"execBatch\" in action && typeof action.execBatch !== \"function\") {\n      throw new Error(\"Invalid execBatch function\");\n    }\n    if (\"order\" in action && typeof action.order !== \"number\") {\n      throw new Error(\"Invalid order\");\n    }\n    if (action.destructive !== void 0 && typeof action.destructive !== \"boolean\") {\n      throw new Error(\"Invalid destructive flag\");\n    }\n    if (\"parent\" in action && typeof action.parent !== \"string\") {\n      throw new Error(\"Invalid parent\");\n    }\n    if (action.default && !Object.values(DefaultType).includes(action.default)) {\n      throw new Error(\"Invalid default\");\n    }\n    if (\"inline\" in action && typeof action.inline !== \"function\") {\n      throw new Error(\"Invalid inline function\");\n    }\n    if (\"renderInline\" in action && typeof action.renderInline !== \"function\") {\n      throw new Error(\"Invalid renderInline function\");\n    }\n  }\n}\nconst registerFileAction = function(action) {\n  if (typeof window._nc_fileactions === \"undefined\") {\n    window._nc_fileactions = [];\n    logger.debug(\"FileActions initialized\");\n  }\n  if (window._nc_fileactions.find((search) => search.id === action.id)) {\n    logger.error(`FileAction ${action.id} already registered`, { action });\n    return;\n  }\n  window._nc_fileactions.push(action);\n};\nconst getFileActions = function() {\n  if (typeof window._nc_fileactions === \"undefined\") {\n    window._nc_fileactions = [];\n    logger.debug(\"FileActions initialized\");\n  }\n  return window._nc_fileactions;\n};\nclass FileListAction {\n  _action;\n  constructor(action) {\n    this.validateAction(action);\n    this._action = action;\n  }\n  get id() {\n    return this._action.id;\n  }\n  get displayName() {\n    return this._action.displayName;\n  }\n  get iconSvgInline() {\n    return this._action.iconSvgInline;\n  }\n  get order() {\n    return this._action.order;\n  }\n  get enabled() {\n    return this._action.enabled;\n  }\n  get exec() {\n    return this._action.exec;\n  }\n  validateAction(action) {\n    if (!action.id || typeof action.id !== \"string\") {\n      throw new Error(\"Invalid id\");\n    }\n    if (!action.displayName || typeof action.displayName !== \"function\") {\n      throw new Error(\"Invalid displayName function\");\n    }\n    if (\"iconSvgInline\" in action && typeof action.iconSvgInline !== \"function\") {\n      throw new Error(\"Invalid iconSvgInline function\");\n    }\n    if (\"order\" in action && typeof action.order !== \"number\") {\n      throw new Error(\"Invalid order\");\n    }\n    if (\"enabled\" in action && typeof action.enabled !== \"function\") {\n      throw new Error(\"Invalid enabled function\");\n    }\n    if (!action.exec || typeof action.exec !== \"function\") {\n      throw new Error(\"Invalid exec function\");\n    }\n  }\n}\nconst registerFileListAction = (action) => {\n  if (typeof window._nc_filelistactions === \"undefined\") {\n    window._nc_filelistactions = [];\n  }\n  if (window._nc_filelistactions.find((listAction) => listAction.id === action.id)) {\n    logger.error(`FileListAction with id \"${action.id}\" is already registered`, { action });\n    return;\n  }\n  window._nc_filelistactions.push(action);\n};\nconst getFileListActions = () => {\n  if (typeof window._nc_filelistactions === \"undefined\") {\n    window._nc_filelistactions = [];\n  }\n  return window._nc_filelistactions;\n};\nclass Header {\n  _header;\n  constructor(header) {\n    this.validateHeader(header);\n    this._header = header;\n  }\n  get id() {\n    return this._header.id;\n  }\n  get order() {\n    return this._header.order;\n  }\n  get enabled() {\n    return this._header.enabled;\n  }\n  get render() {\n    return this._header.render;\n  }\n  get updated() {\n    return this._header.updated;\n  }\n  validateHeader(header) {\n    if (!header.id || !header.render || !header.updated) {\n      throw new Error(\"Invalid header: id, render and updated are required\");\n    }\n    if (typeof header.id !== \"string\") {\n      throw new Error(\"Invalid id property\");\n    }\n    if (header.enabled !== void 0 && typeof header.enabled !== \"function\") {\n      throw new Error(\"Invalid enabled property\");\n    }\n    if (header.render && typeof header.render !== \"function\") {\n      throw new Error(\"Invalid render property\");\n    }\n    if (header.updated && typeof header.updated !== \"function\") {\n      throw new Error(\"Invalid updated property\");\n    }\n  }\n}\nconst registerFileListHeaders = function(header) {\n  if (typeof window._nc_filelistheader === \"undefined\") {\n    window._nc_filelistheader = [];\n    logger.debug(\"FileListHeaders initialized\");\n  }\n  if (window._nc_filelistheader.find((search) => search.id === header.id)) {\n    logger.error(`Header ${header.id} already registered`, { header });\n    return;\n  }\n  window._nc_filelistheader.push(header);\n};\nconst getFileListHeaders = function() {\n  if (typeof window._nc_filelistheader === \"undefined\") {\n    window._nc_filelistheader = [];\n    logger.debug(\"FileListHeaders initialized\");\n  }\n  return window._nc_filelistheader;\n};\nvar InvalidFilenameErrorReason = /* @__PURE__ */ ((InvalidFilenameErrorReason2) => {\n  InvalidFilenameErrorReason2[\"ReservedName\"] = \"reserved name\";\n  InvalidFilenameErrorReason2[\"Character\"] = \"character\";\n  InvalidFilenameErrorReason2[\"Extension\"] = \"extension\";\n  return InvalidFilenameErrorReason2;\n})(InvalidFilenameErrorReason || {});\nclass InvalidFilenameError extends Error {\n  constructor(options) {\n    super(`Invalid ${options.reason} '${options.segment}' in filename '${options.filename}'`, { cause: options });\n  }\n  /**\n   * The filename that was validated\n   */\n  get filename() {\n    return this.cause.filename;\n  }\n  /**\n   * Reason why the validation failed\n   */\n  get reason() {\n    return this.cause.reason;\n  }\n  /**\n   * Part of the filename that caused this error\n   */\n  get segment() {\n    return this.cause.segment;\n  }\n}\nfunction validateFilename(filename) {\n  const capabilities = getCapabilities().files;\n  const forbiddenCharacters = capabilities.forbidden_filename_characters ?? window._oc_config?.forbidden_filenames_characters ?? [\"/\", \"\\\\\"];\n  for (const character of forbiddenCharacters) {\n    if (filename.includes(character)) {\n      throw new InvalidFilenameError({ segment: character, reason: \"character\", filename });\n    }\n  }\n  filename = filename.toLocaleLowerCase();\n  const forbiddenFilenames = capabilities.forbidden_filenames ?? [\".htaccess\"];\n  if (forbiddenFilenames.includes(filename)) {\n    throw new InvalidFilenameError({\n      filename,\n      segment: filename,\n      reason: \"reserved name\"\n      /* ReservedName */\n    });\n  }\n  const endOfBasename = filename.indexOf(\".\", 1);\n  const basename2 = filename.substring(0, endOfBasename === -1 ? void 0 : endOfBasename);\n  const forbiddenFilenameBasenames = capabilities.forbidden_filename_basenames ?? [];\n  if (forbiddenFilenameBasenames.includes(basename2)) {\n    throw new InvalidFilenameError({\n      filename,\n      segment: basename2,\n      reason: \"reserved name\"\n      /* ReservedName */\n    });\n  }\n  const forbiddenFilenameExtensions = capabilities.forbidden_filename_extensions ?? [\".part\", \".filepart\"];\n  for (const extension of forbiddenFilenameExtensions) {\n    if (filename.length > extension.length && filename.endsWith(extension)) {\n      throw new InvalidFilenameError({ segment: extension, reason: \"extension\", filename });\n    }\n  }\n}\nfunction isFilenameValid(filename) {\n  try {\n    validateFilename(filename);\n    return true;\n  } catch (error) {\n    if (error instanceof InvalidFilenameError) {\n      return false;\n    }\n    throw error;\n  }\n}\nfunction getUniqueName(name, otherNames, options) {\n  const opts = {\n    suffix: (n2) => `(${n2})`,\n    ignoreFileExtension: false,\n    ...options\n  };\n  let newName = name;\n  let i2 = 1;\n  while (otherNames.includes(newName)) {\n    const ext = opts.ignoreFileExtension ? \"\" : extname(name);\n    const base = basename(name, ext);\n    newName = `${base} ${opts.suffix(i2++)}${ext}`;\n  }\n  return newName;\n}\nconst humanList = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\"];\nconst humanListBinary = [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\"];\nfunction formatFileSize(size, skipSmallSizes = false, binaryPrefixes = false, base1000 = false) {\n  binaryPrefixes = binaryPrefixes && !base1000;\n  if (typeof size === \"string\") {\n    size = Number(size);\n  }\n  let order = size > 0 ? Math.floor(Math.log(size) / Math.log(base1000 ? 1e3 : 1024)) : 0;\n  order = Math.min((binaryPrefixes ? humanListBinary.length : humanList.length) - 1, order);\n  const readableFormat = binaryPrefixes ? humanListBinary[order] : humanList[order];\n  let relativeSize = (size / Math.pow(base1000 ? 1e3 : 1024, order)).toFixed(1);\n  if (skipSmallSizes === true && order === 0) {\n    return (relativeSize !== \"0.0\" ? \"< 1 \" : \"0 \") + (binaryPrefixes ? humanListBinary[1] : humanList[1]);\n  }\n  if (order < 2) {\n    relativeSize = parseFloat(relativeSize).toFixed(0);\n  } else {\n    relativeSize = parseFloat(relativeSize).toLocaleString(getCanonicalLocale());\n  }\n  return relativeSize + \" \" + readableFormat;\n}\nfunction parseFileSize(value, forceBinary = false) {\n  try {\n    value = `${value}`.toLocaleLowerCase().replaceAll(/\\s+/g, \"\").replaceAll(\",\", \".\");\n  } catch (e2) {\n    return null;\n  }\n  const match = value.match(/^([0-9]*(\\.[0-9]*)?)([kmgtp]?)(i?)b?$/);\n  if (match === null || match[1] === \".\" || match[1] === \"\") {\n    return null;\n  }\n  const bytesArray = {\n    \"\": 0,\n    k: 1,\n    m: 2,\n    g: 3,\n    t: 4,\n    p: 5,\n    e: 6\n  };\n  const decimalString = `${match[1]}`;\n  const base = match[4] === \"i\" || forceBinary ? 1024 : 1e3;\n  return Math.round(Number.parseFloat(decimalString) * base ** bytesArray[match[3]]);\n}\nfunction stringify(value) {\n  if (value instanceof Date) {\n    return value.toISOString();\n  }\n  return String(value);\n}\nfunction orderBy(collection, identifiers2, orders) {\n  identifiers2 = identifiers2 ?? [(value) => value];\n  orders = orders ?? [];\n  const sorting = identifiers2.map((_, index) => (orders[index] ?? \"asc\") === \"asc\" ? 1 : -1);\n  const collator = Intl.Collator(\n    [getLanguage(), getCanonicalLocale()],\n    {\n      // handle 10 as ten and not as one-zero\n      numeric: true,\n      usage: \"sort\"\n    }\n  );\n  return [...collection].sort((a2, b2) => {\n    for (const [index, identifier] of identifiers2.entries()) {\n      const value = collator.compare(stringify(identifier(a2)), stringify(identifier(b2)));\n      if (value !== 0) {\n        return value * sorting[index];\n      }\n    }\n    return 0;\n  });\n}\nvar FilesSortingMode = /* @__PURE__ */ ((FilesSortingMode2) => {\n  FilesSortingMode2[\"Name\"] = \"basename\";\n  FilesSortingMode2[\"Modified\"] = \"mtime\";\n  FilesSortingMode2[\"Size\"] = \"size\";\n  return FilesSortingMode2;\n})(FilesSortingMode || {});\nfunction sortNodes(nodes, options = {}) {\n  const sortingOptions = {\n    // Default to sort by name\n    sortingMode: \"basename\",\n    // Default to sort ascending\n    sortingOrder: \"asc\",\n    ...options\n  };\n  const basename2 = (name) => name.lastIndexOf(\".\") > 0 ? name.slice(0, name.lastIndexOf(\".\")) : name;\n  const identifiers2 = [\n    // 1: Sort favorites first if enabled\n    ...sortingOptions.sortFavoritesFirst ? [(v) => v.attributes?.favorite !== 1] : [],\n    // 2: Sort folders first if sorting by name\n    ...sortingOptions.sortFoldersFirst ? [(v) => v.type !== \"folder\"] : [],\n    // 3: Use sorting mode if NOT basename (to be able to use display name too)\n    ...sortingOptions.sortingMode !== \"basename\" ? [(v) => v[sortingOptions.sortingMode]] : [],\n    // 4: Use display name if available, fallback to name\n    (v) => basename2(v.displayname || v.attributes?.displayname || v.basename),\n    // 5: Finally, use basename if all previous sorting methods failed\n    (v) => v.basename\n  ];\n  const orders = [\n    // (for 1): always sort favorites before normal files\n    ...sortingOptions.sortFavoritesFirst ? [\"asc\"] : [],\n    // (for 2): always sort folders before files\n    ...sortingOptions.sortFoldersFirst ? [\"asc\"] : [],\n    // (for 3): Reverse if sorting by mtime as mtime higher means edited more recent -> lower\n    ...sortingOptions.sortingMode === \"mtime\" ? [sortingOptions.sortingOrder === \"asc\" ? \"desc\" : \"asc\"] : [],\n    // (also for 3 so make sure not to conflict with 2 and 3)\n    ...sortingOptions.sortingMode !== \"mtime\" && sortingOptions.sortingMode !== \"basename\" ? [sortingOptions.sortingOrder] : [],\n    // for 4: use configured sorting direction\n    sortingOptions.sortingOrder,\n    // for 5: use configured sorting direction\n    sortingOptions.sortingOrder\n  ];\n  return orderBy(nodes, identifiers2, orders);\n}\nclass Navigation extends TypedEventTarget {\n  _views = [];\n  _currentView = null;\n  /**\n   * Register a new view on the navigation\n   * @param view The view to register\n   * @throws `Error` is thrown if a view with the same id is already registered\n   */\n  register(view) {\n    if (this._views.find((search) => search.id === view.id)) {\n      throw new Error(`View id ${view.id} is already registered`);\n    }\n    this._views.push(view);\n    this.dispatchTypedEvent(\"update\", new CustomEvent(\"update\"));\n  }\n  /**\n   * Remove a registered view\n   * @param id The id of the view to remove\n   */\n  remove(id) {\n    const index = this._views.findIndex((view) => view.id === id);\n    if (index !== -1) {\n      this._views.splice(index, 1);\n      this.dispatchTypedEvent(\"update\", new CustomEvent(\"update\"));\n    }\n  }\n  /**\n   * Set the currently active view\n   * @fires UpdateActiveViewEvent\n   * @param view New active view\n   */\n  setActive(view) {\n    this._currentView = view;\n    const event = new CustomEvent(\"updateActive\", { detail: view });\n    this.dispatchTypedEvent(\"updateActive\", event);\n  }\n  /**\n   * The currently active files view\n   */\n  get active() {\n    return this._currentView;\n  }\n  /**\n   * All registered views\n   */\n  get views() {\n    return this._views;\n  }\n}\nconst getNavigation = function() {\n  if (typeof window._nc_navigation === \"undefined\") {\n    window._nc_navigation = new Navigation();\n    logger.debug(\"Navigation service initialized\");\n  }\n  return window._nc_navigation;\n};\nclass Column {\n  _column;\n  constructor(column) {\n    isValidColumn(column);\n    this._column = column;\n  }\n  get id() {\n    return this._column.id;\n  }\n  get title() {\n    return this._column.title;\n  }\n  get render() {\n    return this._column.render;\n  }\n  get sort() {\n    return this._column.sort;\n  }\n  get summary() {\n    return this._column.summary;\n  }\n}\nconst isValidColumn = function(column) {\n  if (!column.id || typeof column.id !== \"string\") {\n    throw new Error(\"A column id is required\");\n  }\n  if (!column.title || typeof column.title !== \"string\") {\n    throw new Error(\"A column title is required\");\n  }\n  if (!column.render || typeof column.render !== \"function\") {\n    throw new Error(\"A render function is required\");\n  }\n  if (column.sort && typeof column.sort !== \"function\") {\n    throw new Error(\"Column sortFunction must be a function\");\n  }\n  if (column.summary && typeof column.summary !== \"function\") {\n    throw new Error(\"Column summary must be a function\");\n  }\n  return true;\n};\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nvar validator$2 = {};\nvar util$3 = {};\n(function(exports) {\n  const nameStartChar = \":A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  const nameChar = nameStartChar + \"\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  const nameRegexp = \"[\" + nameStartChar + \"][\" + nameChar + \"]*\";\n  const regexName = new RegExp(\"^\" + nameRegexp + \"$\");\n  const getAllMatches = function(string, regex) {\n    const matches = [];\n    let match = regex.exec(string);\n    while (match) {\n      const allmatches = [];\n      allmatches.startIndex = regex.lastIndex - match[0].length;\n      const len = match.length;\n      for (let index = 0; index < len; index++) {\n        allmatches.push(match[index]);\n      }\n      matches.push(allmatches);\n      match = regex.exec(string);\n    }\n    return matches;\n  };\n  const isName = function(string) {\n    const match = regexName.exec(string);\n    return !(match === null || typeof match === \"undefined\");\n  };\n  exports.isExist = function(v) {\n    return typeof v !== \"undefined\";\n  };\n  exports.isEmptyObject = function(obj) {\n    return Object.keys(obj).length === 0;\n  };\n  exports.merge = function(target, a2, arrayMode) {\n    if (a2) {\n      const keys = Object.keys(a2);\n      const len = keys.length;\n      for (let i2 = 0; i2 < len; i2++) {\n        if (arrayMode === \"strict\") {\n          target[keys[i2]] = [a2[keys[i2]]];\n        } else {\n          target[keys[i2]] = a2[keys[i2]];\n        }\n      }\n    }\n  };\n  exports.getValue = function(v) {\n    if (exports.isExist(v)) {\n      return v;\n    } else {\n      return \"\";\n    }\n  };\n  exports.isName = isName;\n  exports.getAllMatches = getAllMatches;\n  exports.nameRegexp = nameRegexp;\n})(util$3);\nconst util$2 = util$3;\nconst defaultOptions$2 = {\n  allowBooleanAttributes: false,\n  //A tag can have attributes without any value\n  unpairedTags: []\n};\nvalidator$2.validate = function(xmlData, options) {\n  options = Object.assign({}, defaultOptions$2, options);\n  const tags = [];\n  let tagFound = false;\n  let reachedRoot = false;\n  if (xmlData[0] === \"\\uFEFF\") {\n    xmlData = xmlData.substr(1);\n  }\n  for (let i2 = 0; i2 < xmlData.length; i2++) {\n    if (xmlData[i2] === \"<\" && xmlData[i2 + 1] === \"?\") {\n      i2 += 2;\n      i2 = readPI(xmlData, i2);\n      if (i2.err) return i2;\n    } else if (xmlData[i2] === \"<\") {\n      let tagStartPos = i2;\n      i2++;\n      if (xmlData[i2] === \"!\") {\n        i2 = readCommentAndCDATA(xmlData, i2);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i2] === \"/\") {\n          closingTag = true;\n          i2++;\n        }\n        let tagName = \"\";\n        for (; i2 < xmlData.length && xmlData[i2] !== \">\" && xmlData[i2] !== \" \" && xmlData[i2] !== \"\t\" && xmlData[i2] !== \"\\n\" && xmlData[i2] !== \"\\r\"; i2++) {\n          tagName += xmlData[i2];\n        }\n        tagName = tagName.trim();\n        if (tagName[tagName.length - 1] === \"/\") {\n          tagName = tagName.substring(0, tagName.length - 1);\n          i2--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\" + tagName + \"' is an invalid name.\";\n          }\n          return getErrorObject(\"InvalidTag\", msg, getLineNumberForPosition(xmlData, i2));\n        }\n        const result = readAttributeStr(xmlData, i2);\n        if (result === false) {\n          return getErrorObject(\"InvalidAttr\", \"Attributes for '\" + tagName + \"' have open quote.\", getLineNumberForPosition(xmlData, i2));\n        }\n        let attrStr = result.value;\n        i2 = result.index;\n        if (attrStr[attrStr.length - 1] === \"/\") {\n          const attrStrStart = i2 - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n          } else {\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject(\"InvalidTag\", \"Closing tag '\" + tagName + \"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i2));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject(\"InvalidTag\", \"Closing tag '\" + tagName + \"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject(\"InvalidTag\", \"Closing tag '\" + tagName + \"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject(\n                \"InvalidTag\",\n                \"Expected closing tag '\" + otg.tagName + \"' (opened in line \" + openPos.line + \", col \" + openPos.col + \") instead of closing tag '\" + tagName + \"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos)\n              );\n            }\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i2 - attrStr.length + isValid.err.line));\n          }\n          if (reachedRoot === true) {\n            return getErrorObject(\"InvalidXml\", \"Multiple possible root nodes found.\", getLineNumberForPosition(xmlData, i2));\n          } else if (options.unpairedTags.indexOf(tagName) !== -1) ;\n          else {\n            tags.push({ tagName, tagStartPos });\n          }\n          tagFound = true;\n        }\n        for (i2++; i2 < xmlData.length; i2++) {\n          if (xmlData[i2] === \"<\") {\n            if (xmlData[i2 + 1] === \"!\") {\n              i2++;\n              i2 = readCommentAndCDATA(xmlData, i2);\n              continue;\n            } else if (xmlData[i2 + 1] === \"?\") {\n              i2 = readPI(xmlData, ++i2);\n              if (i2.err) return i2;\n            } else {\n              break;\n            }\n          } else if (xmlData[i2] === \"&\") {\n            const afterAmp = validateAmpersand(xmlData, i2);\n            if (afterAmp == -1)\n              return getErrorObject(\"InvalidChar\", \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i2));\n            i2 = afterAmp;\n          } else {\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i2])) {\n              return getErrorObject(\"InvalidXml\", \"Extra text at the end\", getLineNumberForPosition(xmlData, i2));\n            }\n          }\n        }\n        if (xmlData[i2] === \"<\") {\n          i2--;\n        }\n      }\n    } else {\n      if (isWhiteSpace(xmlData[i2])) {\n        continue;\n      }\n      return getErrorObject(\"InvalidChar\", \"char '\" + xmlData[i2] + \"' is not expected.\", getLineNumberForPosition(xmlData, i2));\n    }\n  }\n  if (!tagFound) {\n    return getErrorObject(\"InvalidXml\", \"Start tag expected.\", 1);\n  } else if (tags.length == 1) {\n    return getErrorObject(\"InvalidTag\", \"Unclosed tag '\" + tags[0].tagName + \"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  } else if (tags.length > 0) {\n    return getErrorObject(\"InvalidXml\", \"Invalid '\" + JSON.stringify(tags.map((t3) => t3.tagName), null, 4).replace(/\\r?\\n/g, \"\") + \"' found.\", { line: 1, col: 1 });\n  }\n  return true;\n};\nfunction isWhiteSpace(char) {\n  return char === \" \" || char === \"\t\" || char === \"\\n\" || char === \"\\r\";\n}\nfunction readPI(xmlData, i2) {\n  const start = i2;\n  for (; i2 < xmlData.length; i2++) {\n    if (xmlData[i2] == \"?\" || xmlData[i2] == \" \") {\n      const tagname = xmlData.substr(start, i2 - start);\n      if (i2 > 5 && tagname === \"xml\") {\n        return getErrorObject(\"InvalidXml\", \"XML declaration allowed only at the start of the document.\", getLineNumberForPosition(xmlData, i2));\n      } else if (xmlData[i2] == \"?\" && xmlData[i2 + 1] == \">\") {\n        i2++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i2;\n}\nfunction readCommentAndCDATA(xmlData, i2) {\n  if (xmlData.length > i2 + 5 && xmlData[i2 + 1] === \"-\" && xmlData[i2 + 2] === \"-\") {\n    for (i2 += 3; i2 < xmlData.length; i2++) {\n      if (xmlData[i2] === \"-\" && xmlData[i2 + 1] === \"-\" && xmlData[i2 + 2] === \">\") {\n        i2 += 2;\n        break;\n      }\n    }\n  } else if (xmlData.length > i2 + 8 && xmlData[i2 + 1] === \"D\" && xmlData[i2 + 2] === \"O\" && xmlData[i2 + 3] === \"C\" && xmlData[i2 + 4] === \"T\" && xmlData[i2 + 5] === \"Y\" && xmlData[i2 + 6] === \"P\" && xmlData[i2 + 7] === \"E\") {\n    let angleBracketsCount = 1;\n    for (i2 += 8; i2 < xmlData.length; i2++) {\n      if (xmlData[i2] === \"<\") {\n        angleBracketsCount++;\n      } else if (xmlData[i2] === \">\") {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (xmlData.length > i2 + 9 && xmlData[i2 + 1] === \"[\" && xmlData[i2 + 2] === \"C\" && xmlData[i2 + 3] === \"D\" && xmlData[i2 + 4] === \"A\" && xmlData[i2 + 5] === \"T\" && xmlData[i2 + 6] === \"A\" && xmlData[i2 + 7] === \"[\") {\n    for (i2 += 8; i2 < xmlData.length; i2++) {\n      if (xmlData[i2] === \"]\" && xmlData[i2 + 1] === \"]\" && xmlData[i2 + 2] === \">\") {\n        i2 += 2;\n        break;\n      }\n    }\n  }\n  return i2;\n}\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\nfunction readAttributeStr(xmlData, i2) {\n  let attrStr = \"\";\n  let startChar = \"\";\n  let tagClosed = false;\n  for (; i2 < xmlData.length; i2++) {\n    if (xmlData[i2] === doubleQuote || xmlData[i2] === singleQuote) {\n      if (startChar === \"\") {\n        startChar = xmlData[i2];\n      } else if (startChar !== xmlData[i2]) ;\n      else {\n        startChar = \"\";\n      }\n    } else if (xmlData[i2] === \">\") {\n      if (startChar === \"\") {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i2];\n  }\n  if (startChar !== \"\") {\n    return false;\n  }\n  return {\n    value: attrStr,\n    index: i2,\n    tagClosed\n  };\n}\nconst validAttrStrRegxp = new RegExp(`(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*(['\"])(([\\\\s\\\\S])*?)\\\\5)?`, \"g\");\nfunction validateAttributeString(attrStr, options) {\n  const matches = util$2.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n  for (let i2 = 0; i2 < matches.length; i2++) {\n    if (matches[i2][1].length === 0) {\n      return getErrorObject(\"InvalidAttr\", \"Attribute '\" + matches[i2][2] + \"' has no space in starting.\", getPositionFromMatch(matches[i2]));\n    } else if (matches[i2][3] !== void 0 && matches[i2][4] === void 0) {\n      return getErrorObject(\"InvalidAttr\", \"Attribute '\" + matches[i2][2] + \"' is without value.\", getPositionFromMatch(matches[i2]));\n    } else if (matches[i2][3] === void 0 && !options.allowBooleanAttributes) {\n      return getErrorObject(\"InvalidAttr\", \"boolean attribute '\" + matches[i2][2] + \"' is not allowed.\", getPositionFromMatch(matches[i2]));\n    }\n    const attrName = matches[i2][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject(\"InvalidAttr\", \"Attribute '\" + attrName + \"' is an invalid name.\", getPositionFromMatch(matches[i2]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject(\"InvalidAttr\", \"Attribute '\" + attrName + \"' is repeated.\", getPositionFromMatch(matches[i2]));\n    }\n  }\n  return true;\n}\nfunction validateNumberAmpersand(xmlData, i2) {\n  let re2 = /\\d/;\n  if (xmlData[i2] === \"x\") {\n    i2++;\n    re2 = /[\\da-fA-F]/;\n  }\n  for (; i2 < xmlData.length; i2++) {\n    if (xmlData[i2] === \";\")\n      return i2;\n    if (!xmlData[i2].match(re2))\n      break;\n  }\n  return -1;\n}\nfunction validateAmpersand(xmlData, i2) {\n  i2++;\n  if (xmlData[i2] === \";\")\n    return -1;\n  if (xmlData[i2] === \"#\") {\n    i2++;\n    return validateNumberAmpersand(xmlData, i2);\n  }\n  let count = 0;\n  for (; i2 < xmlData.length; i2++, count++) {\n    if (xmlData[i2].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i2] === \";\")\n      break;\n    return -1;\n  }\n  return i2;\n}\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col\n    }\n  };\n}\nfunction validateAttrName(attrName) {\n  return util$2.isName(attrName);\n}\nfunction validateTagName(tagname) {\n  return util$2.isName(tagname);\n}\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\nvar OptionsBuilder = {};\nconst defaultOptions$1 = {\n  preserveOrder: false,\n  attributeNamePrefix: \"@_\",\n  attributesGroupName: false,\n  textNodeName: \"#text\",\n  ignoreAttributes: true,\n  removeNSPrefix: false,\n  // remove NS from tag name or attribute name if true\n  allowBooleanAttributes: false,\n  //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseTagValue: true,\n  parseAttributeValue: false,\n  trimValues: true,\n  //Trim string values of tag and attributes\n  cdataPropName: false,\n  numberParseOptions: {\n    hex: true,\n    leadingZeros: true,\n    eNotation: true\n  },\n  tagValueProcessor: function(tagName, val2) {\n    return val2;\n  },\n  attributeValueProcessor: function(attrName, val2) {\n    return val2;\n  },\n  stopNodes: [],\n  //nested tags will not be parsed even for errors\n  alwaysCreateTextNode: false,\n  isArray: () => false,\n  commentPropName: false,\n  unpairedTags: [],\n  processEntities: true,\n  htmlEntities: false,\n  ignoreDeclaration: false,\n  ignorePiTags: false,\n  transformTagName: false,\n  transformAttributeName: false,\n  updateTag: function(tagName, jPath, attrs) {\n    return tagName;\n  }\n  // skipEmptyListItem: false\n};\nconst buildOptions$1 = function(options) {\n  return Object.assign({}, defaultOptions$1, options);\n};\nOptionsBuilder.buildOptions = buildOptions$1;\nOptionsBuilder.defaultOptions = defaultOptions$1;\nclass XmlNode {\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = [];\n    this[\":@\"] = {};\n  }\n  add(key, val2) {\n    if (key === \"__proto__\") key = \"#__proto__\";\n    this.child.push({ [key]: val2 });\n  }\n  addChild(node) {\n    if (node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if (node[\":@\"] && Object.keys(node[\":@\"]).length > 0) {\n      this.child.push({ [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    } else {\n      this.child.push({ [node.tagname]: node.child });\n    }\n  }\n}\nvar xmlNode$1 = XmlNode;\nconst util$1 = util$3;\nfunction readDocType$1(xmlData, i2) {\n  const entities = {};\n  if (xmlData[i2 + 3] === \"O\" && xmlData[i2 + 4] === \"C\" && xmlData[i2 + 5] === \"T\" && xmlData[i2 + 6] === \"Y\" && xmlData[i2 + 7] === \"P\" && xmlData[i2 + 8] === \"E\") {\n    i2 = i2 + 9;\n    let angleBracketsCount = 1;\n    let hasBody = false, comment = false;\n    let exp = \"\";\n    for (; i2 < xmlData.length; i2++) {\n      if (xmlData[i2] === \"<\" && !comment) {\n        if (hasBody && isEntity(xmlData, i2)) {\n          i2 += 7;\n          [entityName, val, i2] = readEntityExp(xmlData, i2 + 1);\n          if (val.indexOf(\"&\") === -1)\n            entities[validateEntityName(entityName)] = {\n              regx: RegExp(`&${entityName};`, \"g\"),\n              val\n            };\n        } else if (hasBody && isElement(xmlData, i2)) i2 += 8;\n        else if (hasBody && isAttlist(xmlData, i2)) i2 += 8;\n        else if (hasBody && isNotation(xmlData, i2)) i2 += 9;\n        else if (isComment) comment = true;\n        else throw new Error(\"Invalid DOCTYPE\");\n        angleBracketsCount++;\n        exp = \"\";\n      } else if (xmlData[i2] === \">\") {\n        if (comment) {\n          if (xmlData[i2 - 1] === \"-\" && xmlData[i2 - 2] === \"-\") {\n            comment = false;\n            angleBracketsCount--;\n          }\n        } else {\n          angleBracketsCount--;\n        }\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      } else if (xmlData[i2] === \"[\") {\n        hasBody = true;\n      } else {\n        exp += xmlData[i2];\n      }\n    }\n    if (angleBracketsCount !== 0) {\n      throw new Error(`Unclosed DOCTYPE`);\n    }\n  } else {\n    throw new Error(`Invalid Tag instead of DOCTYPE`);\n  }\n  return { entities, i: i2 };\n}\nfunction readEntityExp(xmlData, i2) {\n  let entityName2 = \"\";\n  for (; i2 < xmlData.length && (xmlData[i2] !== \"'\" && xmlData[i2] !== '\"'); i2++) {\n    entityName2 += xmlData[i2];\n  }\n  entityName2 = entityName2.trim();\n  if (entityName2.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n  const startChar = xmlData[i2++];\n  let val2 = \"\";\n  for (; i2 < xmlData.length && xmlData[i2] !== startChar; i2++) {\n    val2 += xmlData[i2];\n  }\n  return [entityName2, val2, i2];\n}\nfunction isComment(xmlData, i2) {\n  if (xmlData[i2 + 1] === \"!\" && xmlData[i2 + 2] === \"-\" && xmlData[i2 + 3] === \"-\") return true;\n  return false;\n}\nfunction isEntity(xmlData, i2) {\n  if (xmlData[i2 + 1] === \"!\" && xmlData[i2 + 2] === \"E\" && xmlData[i2 + 3] === \"N\" && xmlData[i2 + 4] === \"T\" && xmlData[i2 + 5] === \"I\" && xmlData[i2 + 6] === \"T\" && xmlData[i2 + 7] === \"Y\") return true;\n  return false;\n}\nfunction isElement(xmlData, i2) {\n  if (xmlData[i2 + 1] === \"!\" && xmlData[i2 + 2] === \"E\" && xmlData[i2 + 3] === \"L\" && xmlData[i2 + 4] === \"E\" && xmlData[i2 + 5] === \"M\" && xmlData[i2 + 6] === \"E\" && xmlData[i2 + 7] === \"N\" && xmlData[i2 + 8] === \"T\") return true;\n  return false;\n}\nfunction isAttlist(xmlData, i2) {\n  if (xmlData[i2 + 1] === \"!\" && xmlData[i2 + 2] === \"A\" && xmlData[i2 + 3] === \"T\" && xmlData[i2 + 4] === \"T\" && xmlData[i2 + 5] === \"L\" && xmlData[i2 + 6] === \"I\" && xmlData[i2 + 7] === \"S\" && xmlData[i2 + 8] === \"T\") return true;\n  return false;\n}\nfunction isNotation(xmlData, i2) {\n  if (xmlData[i2 + 1] === \"!\" && xmlData[i2 + 2] === \"N\" && xmlData[i2 + 3] === \"O\" && xmlData[i2 + 4] === \"T\" && xmlData[i2 + 5] === \"A\" && xmlData[i2 + 6] === \"T\" && xmlData[i2 + 7] === \"I\" && xmlData[i2 + 8] === \"O\" && xmlData[i2 + 9] === \"N\") return true;\n  return false;\n}\nfunction validateEntityName(name) {\n  if (util$1.isName(name))\n    return name;\n  else\n    throw new Error(`Invalid entity name ${name}`);\n}\nvar DocTypeReader = readDocType$1;\nconst hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\nconst consider = {\n  hex: true,\n  leadingZeros: true,\n  decimalPoint: \".\",\n  eNotation: true\n  //skipLike: /regex/\n};\nfunction toNumber$1(str, options = {}) {\n  options = Object.assign({}, consider, options);\n  if (!str || typeof str !== \"string\") return str;\n  let trimmedStr = str.trim();\n  if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr)) return str;\n  else if (options.hex && hexRegex.test(trimmedStr)) {\n    return Number.parseInt(trimmedStr, 16);\n  } else {\n    const match = numRegex.exec(trimmedStr);\n    if (match) {\n      const sign = match[1];\n      const leadingZeros = match[2];\n      let numTrimmedByZeros = trimZeros(match[3]);\n      const eNotation = match[4] || match[6];\n      if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str;\n      else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str;\n      else {\n        const num = Number(trimmedStr);\n        const numStr = \"\" + num;\n        if (numStr.search(/[eE]/) !== -1) {\n          if (options.eNotation) return num;\n          else return str;\n        } else if (eNotation) {\n          if (options.eNotation) return num;\n          else return str;\n        } else if (trimmedStr.indexOf(\".\") !== -1) {\n          if (numStr === \"0\" && numTrimmedByZeros === \"\") return num;\n          else if (numStr === numTrimmedByZeros) return num;\n          else if (sign && numStr === \"-\" + numTrimmedByZeros) return num;\n          else return str;\n        }\n        if (leadingZeros) {\n          if (numTrimmedByZeros === numStr) return num;\n          else if (sign + numTrimmedByZeros === numStr) return num;\n          else return str;\n        }\n        if (trimmedStr === numStr) return num;\n        else if (trimmedStr === sign + numStr) return num;\n        return str;\n      }\n    } else {\n      return str;\n    }\n  }\n}\nfunction trimZeros(numStr) {\n  if (numStr && numStr.indexOf(\".\") !== -1) {\n    numStr = numStr.replace(/0+$/, \"\");\n    if (numStr === \".\") numStr = \"0\";\n    else if (numStr[0] === \".\") numStr = \"0\" + numStr;\n    else if (numStr[numStr.length - 1] === \".\") numStr = numStr.substr(0, numStr.length - 1);\n    return numStr;\n  }\n  return numStr;\n}\nvar strnum = toNumber$1;\nfunction getIgnoreAttributesFn$2(ignoreAttributes2) {\n  if (typeof ignoreAttributes2 === \"function\") {\n    return ignoreAttributes2;\n  }\n  if (Array.isArray(ignoreAttributes2)) {\n    return (attrName) => {\n      for (const pattern of ignoreAttributes2) {\n        if (typeof pattern === \"string\" && attrName === pattern) {\n          return true;\n        }\n        if (pattern instanceof RegExp && pattern.test(attrName)) {\n          return true;\n        }\n      }\n    };\n  }\n  return () => false;\n}\nvar ignoreAttributes = getIgnoreAttributesFn$2;\nconst util = util$3;\nconst xmlNode = xmlNode$1;\nconst readDocType = DocTypeReader;\nconst toNumber = strnum;\nconst getIgnoreAttributesFn$1 = ignoreAttributes;\nlet OrderedObjParser$1 = class OrderedObjParser {\n  constructor(options) {\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\": { regex: /&(apos|#39|#x27);/g, val: \"'\" },\n      \"gt\": { regex: /&(gt|#62|#x3E);/g, val: \">\" },\n      \"lt\": { regex: /&(lt|#60|#x3C);/g, val: \"<\" },\n      \"quot\": { regex: /&(quot|#34|#x22);/g, val: '\"' }\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: \"&\" };\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\": { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\": { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\": { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\": { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\": { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\": { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\": { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val: (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val: (_, str) => String.fromCharCode(Number.parseInt(str, 16)) }\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue$1;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn$1(this.options.ignoreAttributes);\n  }\n};\nfunction addExternalEntities(externalEntities) {\n  const entKeys = Object.keys(externalEntities);\n  for (let i2 = 0; i2 < entKeys.length; i2++) {\n    const ent = entKeys[i2];\n    this.lastEntities[ent] = {\n      regex: new RegExp(\"&\" + ent + \";\", \"g\"),\n      val: externalEntities[ent]\n    };\n  }\n}\nfunction parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val2 !== void 0) {\n    if (this.options.trimValues && !dontTrim) {\n      val2 = val2.trim();\n    }\n    if (val2.length > 0) {\n      if (!escapeEntities) val2 = this.replaceEntitiesValue(val2);\n      const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);\n      if (newval === null || newval === void 0) {\n        return val2;\n      } else if (typeof newval !== typeof val2 || newval !== val2) {\n        return newval;\n      } else if (this.options.trimValues) {\n        return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);\n      } else {\n        const trimmedVal = val2.trim();\n        if (trimmedVal === val2) {\n          return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);\n        } else {\n          return val2;\n        }\n      }\n    }\n  }\n}\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(\":\");\n    const prefix = tagname.charAt(0) === \"/\" ? \"/\" : \"\";\n    if (tags[0] === \"xmlns\") {\n      return \"\";\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\nconst attrsRegx = new RegExp(`([^\\\\s=]+)\\\\s*(=\\\\s*(['\"])([\\\\s\\\\S]*?)\\\\3)?`, \"gm\");\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === \"string\") {\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length;\n    const attrs = {};\n    for (let i2 = 0; i2 < len; i2++) {\n      const attrName = this.resolveNameSpace(matches[i2][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue;\n      }\n      let oldVal = matches[i2][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if (aName === \"__proto__\") aName = \"#__proto__\";\n        if (oldVal !== void 0) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if (newVal === null || newVal === void 0) {\n            attrs[aName] = oldVal;\n          } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {\n            attrs[aName] = newVal;\n          } else {\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\");\n  const xmlObj = new xmlNode(\"!xml\");\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for (let i2 = 0; i2 < xmlData.length; i2++) {\n    const ch = xmlData[i2];\n    if (ch === \"<\") {\n      if (xmlData[i2 + 1] === \"/\") {\n        const closeIndex = findClosingIndex(xmlData, \">\", i2, \"Closing Tag is not closed.\");\n        let tagName = xmlData.substring(i2 + 2, closeIndex).trim();\n        if (this.options.removeNSPrefix) {\n          const colonIndex = tagName.indexOf(\":\");\n          if (colonIndex !== -1) {\n            tagName = tagName.substr(colonIndex + 1);\n          }\n        }\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        if (currentNode) {\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\") + 1);\n        if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0;\n        if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {\n          propIndex = jPath.lastIndexOf(\".\", jPath.lastIndexOf(\".\") - 1);\n          this.tagsNodeStack.pop();\n        } else {\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n        currentNode = this.tagsNodeStack.pop();\n        textData = \"\";\n        i2 = closeIndex;\n      } else if (xmlData[i2 + 1] === \"?\") {\n        let tagData = readTagExp(xmlData, i2, false, \"?>\");\n        if (!tagData) throw new Error(\"Pi Tag is not closed.\");\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if (this.options.ignoreDeclaration && tagData.tagName === \"?xml\" || this.options.ignorePiTags) ;\n        else {\n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath);\n        }\n        i2 = tagData.closeIndex + 1;\n      } else if (xmlData.substr(i2 + 1, 3) === \"!--\") {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i2 + 4, \"Comment is not closed.\");\n        if (this.options.commentPropName) {\n          const comment = xmlData.substring(i2 + 4, endIndex - 2);\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n          currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);\n        }\n        i2 = endIndex;\n      } else if (xmlData.substr(i2 + 1, 2) === \"!D\") {\n        const result = readDocType(xmlData, i2);\n        this.docTypeEntities = result.entities;\n        i2 = result.i;\n      } else if (xmlData.substr(i2 + 1, 2) === \"![\") {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i2, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i2 + 9, closeIndex);\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if (val2 == void 0) val2 = \"\";\n        if (this.options.cdataPropName) {\n          currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);\n        } else {\n          currentNode.add(this.options.textNodeName, val2);\n        }\n        i2 = closeIndex + 2;\n      } else {\n        let result = readTagExp(xmlData, i2, this.options.removeNSPrefix);\n        let tagName = result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        if (currentNode && textData) {\n          if (currentNode.tagname !== \"!xml\") {\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n        const lastTag = currentNode;\n        if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if (tagName !== xmlObj.tagname) {\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          if (tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {\n            if (tagName[tagName.length - 1] === \"/\") {\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            } else {\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i2 = result.closeIndex;\n          } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {\n            i2 = result.closeIndex;\n          } else {\n            const result2 = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if (!result2) throw new Error(`Unexpected end of ${rawTagName}`);\n            i2 = result2.i;\n            tagContent = result2.tagContent;\n          }\n          const childNode = new xmlNode(tagName);\n          if (tagName !== tagExp && attrExpPresent) {\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if (tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          this.addChild(currentNode, childNode, jPath);\n        } else {\n          if (tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {\n            if (tagName[tagName.length - 1] === \"/\") {\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            } else {\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            if (this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n            const childNode = new xmlNode(tagName);\n            if (tagName !== tagExp && attrExpPresent) {\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath);\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          } else {\n            const childNode = new xmlNode(tagName);\n            this.tagsNodeStack.push(currentNode);\n            if (tagName !== tagExp && attrExpPresent) {\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i2 = closeIndex;\n        }\n      }\n    } else {\n      textData += xmlData[i2];\n    }\n  }\n  return xmlObj.child;\n};\nfunction addChild(currentNode, childNode, jPath) {\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"]);\n  if (result === false) ;\n  else if (typeof result === \"string\") {\n    childNode.tagname = result;\n    currentNode.addChild(childNode);\n  } else {\n    currentNode.addChild(childNode);\n  }\n}\nconst replaceEntitiesValue$1 = function(val2) {\n  if (this.options.processEntities) {\n    for (let entityName2 in this.docTypeEntities) {\n      const entity = this.docTypeEntities[entityName2];\n      val2 = val2.replace(entity.regx, entity.val);\n    }\n    for (let entityName2 in this.lastEntities) {\n      const entity = this.lastEntities[entityName2];\n      val2 = val2.replace(entity.regex, entity.val);\n    }\n    if (this.options.htmlEntities) {\n      for (let entityName2 in this.htmlEntities) {\n        const entity = this.htmlEntities[entityName2];\n        val2 = val2.replace(entity.regex, entity.val);\n      }\n    }\n    val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val2;\n};\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) {\n    if (isLeafNode === void 0) isLeafNode = Object.keys(currentNode.child).length === 0;\n    textData = this.parseTextData(\n      textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode\n    );\n    if (textData !== void 0 && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\nfunction isItStopNode(stopNodes, jPath, currentTagName) {\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;\n  }\n  return false;\n}\nfunction tagExpWithClosingIndex(xmlData, i2, closingChar = \">\") {\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i2; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n      if (ch === attrBoundary) attrBoundary = \"\";\n    } else if (ch === '\"' || ch === \"'\") {\n      attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if (closingChar[1]) {\n        if (xmlData[index + 1] === closingChar[1]) {\n          return {\n            data: tagExp,\n            index\n          };\n        }\n      } else {\n        return {\n          data: tagExp,\n          index\n        };\n      }\n    } else if (ch === \"\t\") {\n      ch = \" \";\n    }\n    tagExp += ch;\n  }\n}\nfunction findClosingIndex(xmlData, str, i2, errMsg) {\n  const closingIndex = xmlData.indexOf(str, i2);\n  if (closingIndex === -1) {\n    throw new Error(errMsg);\n  } else {\n    return closingIndex + str.length - 1;\n  }\n}\nfunction readTagExp(xmlData, i2, removeNSPrefix, closingChar = \">\") {\n  const result = tagExpWithClosingIndex(xmlData, i2 + 1, closingChar);\n  if (!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if (separatorIndex !== -1) {\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n  const rawTagName = tagName;\n  if (removeNSPrefix) {\n    const colonIndex = tagName.indexOf(\":\");\n    if (colonIndex !== -1) {\n      tagName = tagName.substr(colonIndex + 1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n  return {\n    tagName,\n    tagExp,\n    closeIndex,\n    attrExpPresent,\n    rawTagName\n  };\n}\nfunction readStopNodeData(xmlData, tagName, i2) {\n  const startIndex = i2;\n  let openTagCount = 1;\n  for (; i2 < xmlData.length; i2++) {\n    if (xmlData[i2] === \"<\") {\n      if (xmlData[i2 + 1] === \"/\") {\n        const closeIndex = findClosingIndex(xmlData, \">\", i2, `${tagName} is not closed`);\n        let closeTagName = xmlData.substring(i2 + 2, closeIndex).trim();\n        if (closeTagName === tagName) {\n          openTagCount--;\n          if (openTagCount === 0) {\n            return {\n              tagContent: xmlData.substring(startIndex, i2),\n              i: closeIndex\n            };\n          }\n        }\n        i2 = closeIndex;\n      } else if (xmlData[i2 + 1] === \"?\") {\n        const closeIndex = findClosingIndex(xmlData, \"?>\", i2 + 1, \"StopNode is not closed.\");\n        i2 = closeIndex;\n      } else if (xmlData.substr(i2 + 1, 3) === \"!--\") {\n        const closeIndex = findClosingIndex(xmlData, \"-->\", i2 + 3, \"StopNode is not closed.\");\n        i2 = closeIndex;\n      } else if (xmlData.substr(i2 + 1, 2) === \"![\") {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i2, \"StopNode is not closed.\") - 2;\n        i2 = closeIndex;\n      } else {\n        const tagData = readTagExp(xmlData, i2, \">\");\n        if (tagData) {\n          const openTagName = tagData && tagData.tagName;\n          if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== \"/\") {\n            openTagCount++;\n          }\n          i2 = tagData.closeIndex;\n        }\n      }\n    }\n  }\n}\nfunction parseValue(val2, shouldParse, options) {\n  if (shouldParse && typeof val2 === \"string\") {\n    const newval = val2.trim();\n    if (newval === \"true\") return true;\n    else if (newval === \"false\") return false;\n    else return toNumber(val2, options);\n  } else {\n    if (util.isExist(val2)) {\n      return val2;\n    } else {\n      return \"\";\n    }\n  }\n}\nvar OrderedObjParser_1 = OrderedObjParser$1;\nvar node2json = {};\nfunction prettify$1(node, options) {\n  return compress(node, options);\n}\nfunction compress(arr, options, jPath) {\n  let text;\n  const compressedObj = {};\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    const tagObj = arr[i2];\n    const property = propName$1(tagObj);\n    let newJpath = \"\";\n    if (jPath === void 0) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n    if (property === options.textNodeName) {\n      if (text === void 0) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    } else if (property === void 0) {\n      continue;\n    } else if (tagObj[property]) {\n      let val2 = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val2, options);\n      if (tagObj[\":@\"]) {\n        assignAttributes(val2, tagObj[\":@\"], newJpath, options);\n      } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {\n        val2 = val2[options.textNodeName];\n      } else if (Object.keys(val2).length === 0) {\n        if (options.alwaysCreateTextNode) val2[options.textNodeName] = \"\";\n        else val2 = \"\";\n      }\n      if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {\n        if (!Array.isArray(compressedObj[property])) {\n          compressedObj[property] = [compressedObj[property]];\n        }\n        compressedObj[property].push(val2);\n      } else {\n        if (options.isArray(property, newJpath, isLeaf)) {\n          compressedObj[property] = [val2];\n        } else {\n          compressedObj[property] = val2;\n        }\n      }\n    }\n  }\n  if (typeof text === \"string\") {\n    if (text.length > 0) compressedObj[options.textNodeName] = text;\n  } else if (text !== void 0) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\nfunction propName$1(obj) {\n  const keys = Object.keys(obj);\n  for (let i2 = 0; i2 < keys.length; i2++) {\n    const key = keys[i2];\n    if (key !== \":@\") return key;\n  }\n}\nfunction assignAttributes(obj, attrMap, jpath, options) {\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length;\n    for (let i2 = 0; i2 < len; i2++) {\n      const atrrName = keys[i2];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [attrMap[atrrName]];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\nfunction isLeafTag(obj, options) {\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  if (propCount === 0) {\n    return true;\n  }\n  if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)) {\n    return true;\n  }\n  return false;\n}\nnode2json.prettify = prettify$1;\nconst { buildOptions } = OptionsBuilder;\nconst OrderedObjParser2 = OrderedObjParser_1;\nconst { prettify } = node2json;\nconst validator$1 = validator$2;\nlet XMLParser$1 = class XMLParser {\n  constructor(options) {\n    this.externalEntities = {};\n    this.options = buildOptions(options);\n  }\n  /**\n   * Parse XML dats to JS object \n   * @param {string|Buffer} xmlData \n   * @param {boolean|Object} validationOption \n   */\n  parse(xmlData, validationOption) {\n    if (typeof xmlData === \"string\") ;\n    else if (xmlData.toString) {\n      xmlData = xmlData.toString();\n    } else {\n      throw new Error(\"XML data is accepted in String or Bytes[] form.\");\n    }\n    if (validationOption) {\n      if (validationOption === true) validationOption = {};\n      const result = validator$1.validate(xmlData, validationOption);\n      if (result !== true) {\n        throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);\n      }\n    }\n    const orderedObjParser = new OrderedObjParser2(this.options);\n    orderedObjParser.addExternalEntities(this.externalEntities);\n    const orderedResult = orderedObjParser.parseXml(xmlData);\n    if (this.options.preserveOrder || orderedResult === void 0) return orderedResult;\n    else return prettify(orderedResult, this.options);\n  }\n  /**\n   * Add Entity which is not by default supported by this library\n   * @param {string} key \n   * @param {string} value \n   */\n  addEntity(key, value) {\n    if (value.indexOf(\"&\") !== -1) {\n      throw new Error(\"Entity value can't have '&'\");\n    } else if (key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1) {\n      throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\");\n    } else if (value === \"&\") {\n      throw new Error(\"An entity with value '&' is not permitted\");\n    } else {\n      this.externalEntities[key] = value;\n    }\n  }\n};\nvar XMLParser_1 = XMLParser$1;\nconst EOL = \"\\n\";\nfunction toXml(jArray, options) {\n  let indentation = \"\";\n  if (options.format && options.indentBy.length > 0) {\n    indentation = EOL;\n  }\n  return arrToStr(jArray, options, \"\", indentation);\n}\nfunction arrToStr(arr, options, jPath, indentation) {\n  let xmlStr = \"\";\n  let isPreviousElementTag = false;\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    const tagObj = arr[i2];\n    const tagName = propName(tagObj);\n    if (tagName === void 0) continue;\n    let newJPath = \"\";\n    if (jPath.length === 0) newJPath = tagName;\n    else newJPath = `${jPath}.${tagName}`;\n    if (tagName === options.textNodeName) {\n      let tagText = tagObj[tagName];\n      if (!isStopNode(newJPath, options)) {\n        tagText = options.tagValueProcessor(tagName, tagText);\n        tagText = replaceEntitiesValue(tagText, options);\n      }\n      if (isPreviousElementTag) {\n        xmlStr += indentation;\n      }\n      xmlStr += tagText;\n      isPreviousElementTag = false;\n      continue;\n    } else if (tagName === options.cdataPropName) {\n      if (isPreviousElementTag) {\n        xmlStr += indentation;\n      }\n      xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n      isPreviousElementTag = false;\n      continue;\n    } else if (tagName === options.commentPropName) {\n      xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n      isPreviousElementTag = true;\n      continue;\n    } else if (tagName[0] === \"?\") {\n      const attStr2 = attr_to_str(tagObj[\":@\"], options);\n      const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n      let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n      piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\";\n      xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;\n      isPreviousElementTag = true;\n      continue;\n    }\n    let newIdentation = indentation;\n    if (newIdentation !== \"\") {\n      newIdentation += options.indentBy;\n    }\n    const attStr = attr_to_str(tagObj[\":@\"], options);\n    const tagStart = indentation + `<${tagName}${attStr}`;\n    const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n    if (options.unpairedTags.indexOf(tagName) !== -1) {\n      if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n      else xmlStr += tagStart + \"/>\";\n    } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n      xmlStr += tagStart + \"/>\";\n    } else if (tagValue && tagValue.endsWith(\">\")) {\n      xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n    } else {\n      xmlStr += tagStart + \">\";\n      if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n        xmlStr += indentation + options.indentBy + tagValue + indentation;\n      } else {\n        xmlStr += tagValue;\n      }\n      xmlStr += `</${tagName}>`;\n    }\n    isPreviousElementTag = true;\n  }\n  return xmlStr;\n}\nfunction propName(obj) {\n  const keys = Object.keys(obj);\n  for (let i2 = 0; i2 < keys.length; i2++) {\n    const key = keys[i2];\n    if (!obj.hasOwnProperty(key)) continue;\n    if (key !== \":@\") return key;\n  }\n}\nfunction attr_to_str(attrMap, options) {\n  let attrStr = \"\";\n  if (attrMap && !options.ignoreAttributes) {\n    for (let attr in attrMap) {\n      if (!attrMap.hasOwnProperty(attr)) continue;\n      let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n      attrVal = replaceEntitiesValue(attrVal, options);\n      if (attrVal === true && options.suppressBooleanAttributes) {\n        attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n      } else {\n        attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n      }\n    }\n  }\n  return attrStr;\n}\nfunction isStopNode(jPath, options) {\n  jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n  let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n  for (let index in options.stopNodes) {\n    if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n  }\n  return false;\n}\nfunction replaceEntitiesValue(textValue, options) {\n  if (textValue && textValue.length > 0 && options.processEntities) {\n    for (let i2 = 0; i2 < options.entities.length; i2++) {\n      const entity = options.entities[i2];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\nvar orderedJs2Xml = toXml;\nconst buildFromOrderedJs = orderedJs2Xml;\nconst getIgnoreAttributesFn = ignoreAttributes;\nconst defaultOptions = {\n  attributeNamePrefix: \"@_\",\n  attributesGroupName: false,\n  textNodeName: \"#text\",\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: \"  \",\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a2) {\n    return a2;\n  },\n  attributeValueProcessor: function(attrName, a2) {\n    return a2;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },\n    //it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp('\"', \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function() {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes);\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n  this.processTextOrObjNode = processTextOrObjNode;\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = \">\\n\";\n    this.newLine = \"\\n\";\n  } else {\n    this.indentate = function() {\n      return \"\";\n    };\n    this.tagEndChar = \">\";\n    this.newLine = \"\";\n  }\n}\nBuilder.prototype.build = function(jObj) {\n  if (this.options.preserveOrder) {\n    return buildFromOrderedJs(jObj, this.options);\n  } else {\n    if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {\n      jObj = {\n        [this.options.arrayNodeName]: jObj\n      };\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = \"\";\n  let val2 = \"\";\n  const jPath = ajPath.join(\".\");\n  for (let key in jObj) {\n    if (!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === \"undefined\") {\n      if (this.isAttribute(key)) {\n        val2 += \"\";\n      }\n    } else if (jObj[key] === null) {\n      if (this.isAttribute(key)) {\n        val2 += \"\";\n      } else if (key[0] === \"?\") {\n        val2 += this.indentate(level) + \"<\" + key + \"?\" + this.tagEndChar;\n      } else {\n        val2 += this.indentate(level) + \"<\" + key + \"/\" + this.tagEndChar;\n      }\n    } else if (jObj[key] instanceof Date) {\n      val2 += this.buildTextValNode(jObj[key], key, \"\", level);\n    } else if (typeof jObj[key] !== \"object\") {\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, \"\" + jObj[key]);\n      } else if (!attr) {\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, \"\" + jObj[key]);\n          val2 += this.replaceEntitiesValue(newval);\n        } else {\n          val2 += this.buildTextValNode(jObj[key], key, \"\", level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j2 = 0; j2 < arrLen; j2++) {\n        const item = jObj[key][j2];\n        if (typeof item === \"undefined\") ;\n        else if (item === null) {\n          if (key[0] === \"?\") val2 += this.indentate(level) + \"<\" + key + \"?\" + this.tagEndChar;\n          else val2 += this.indentate(level) + \"<\" + key + \"/\" + this.tagEndChar;\n        } else if (typeof item === \"object\") {\n          if (this.options.oneListGroup) {\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr;\n            }\n          } else {\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath);\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, \"\", level);\n          }\n        }\n      }\n      if (this.options.oneListGroup) {\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val2 += listTagVal;\n    } else {\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j2 = 0; j2 < L; j2++) {\n          attrStr += this.buildAttrPairStr(Ks[j2], \"\" + jObj[key][Ks[j2]]);\n        }\n      } else {\n        val2 += this.processTextOrObjNode(jObj[key], key, level, ajPath);\n      }\n    }\n  }\n  return { attrStr, val: val2 };\n};\nBuilder.prototype.buildAttrPairStr = function(attrName, val2) {\n  val2 = this.options.attributeValueProcessor(attrName, \"\" + val2);\n  val2 = this.replaceEntitiesValue(val2);\n  if (this.options.suppressBooleanAttributes && val2 === \"true\") {\n    return \" \" + attrName;\n  } else return \" \" + attrName + '=\"' + val2 + '\"';\n};\nfunction processTextOrObjNode(object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\nBuilder.prototype.buildObjectNode = function(val2, key, attrStr, level) {\n  if (val2 === \"\") {\n    if (key[0] === \"?\") return this.indentate(level) + \"<\" + key + attrStr + \"?\" + this.tagEndChar;\n    else {\n      return this.indentate(level) + \"<\" + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  } else {\n    let tagEndExp = \"</\" + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    if (key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n    if ((attrStr || attrStr === \"\") && val2.indexOf(\"<\") === -1) {\n      return this.indentate(level) + \"<\" + key + attrStr + piClosingChar + \">\" + val2 + tagEndExp;\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val2}-->` + this.newLine;\n    } else {\n      return this.indentate(level) + \"<\" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;\n    }\n  }\n};\nBuilder.prototype.closeTag = function(key) {\n  let closeTag = \"\";\n  if (this.options.unpairedTags.indexOf(key) !== -1) {\n    if (!this.options.suppressUnpairedNode) closeTag = \"/\";\n  } else if (this.options.suppressEmptyNode) {\n    closeTag = \"/\";\n  } else {\n    closeTag = `></${key}`;\n  }\n  return closeTag;\n};\nBuilder.prototype.buildTextValNode = function(val2, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;\n  } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val2}-->` + this.newLine;\n  } else if (key[0] === \"?\") {\n    return this.indentate(level) + \"<\" + key + attrStr + \"?\" + this.tagEndChar;\n  } else {\n    let textValue = this.options.tagValueProcessor(key, val2);\n    textValue = this.replaceEntitiesValue(textValue);\n    if (textValue === \"\") {\n      return this.indentate(level) + \"<\" + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    } else {\n      return this.indentate(level) + \"<\" + key + attrStr + \">\" + textValue + \"</\" + key + this.tagEndChar;\n    }\n  }\n};\nBuilder.prototype.replaceEntitiesValue = function(textValue) {\n  if (textValue && textValue.length > 0 && this.options.processEntities) {\n    for (let i2 = 0; i2 < this.options.entities.length; i2++) {\n      const entity = this.options.entities[i2];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n};\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\nfunction isAttribute(name) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\nvar json2xml = Builder;\nconst validator = validator$2;\nconst XMLParser2 = XMLParser_1;\nconst XMLBuilder = json2xml;\nvar fxp = {\n  XMLParser: XMLParser2,\n  XMLValidator: validator,\n  XMLBuilder\n};\nfunction isSvg(string) {\n  if (typeof string !== \"string\") {\n    throw new TypeError(`Expected a \\`string\\`, got \\`${typeof string}\\``);\n  }\n  string = string.trim();\n  if (string.length === 0) {\n    return false;\n  }\n  if (fxp.XMLValidator.validate(string) !== true) {\n    return false;\n  }\n  let jsonObject;\n  const parser = new fxp.XMLParser();\n  try {\n    jsonObject = parser.parse(string);\n  } catch {\n    return false;\n  }\n  if (!jsonObject) {\n    return false;\n  }\n  if (!Object.keys(jsonObject).some((x) => x.toLowerCase() === \"svg\")) {\n    return false;\n  }\n  return true;\n}\nclass View {\n  _view;\n  constructor(view) {\n    isValidView(view);\n    this._view = view;\n  }\n  get id() {\n    return this._view.id;\n  }\n  get name() {\n    return this._view.name;\n  }\n  get caption() {\n    return this._view.caption;\n  }\n  get emptyTitle() {\n    return this._view.emptyTitle;\n  }\n  get emptyCaption() {\n    return this._view.emptyCaption;\n  }\n  get getContents() {\n    return this._view.getContents;\n  }\n  get icon() {\n    return this._view.icon;\n  }\n  set icon(icon) {\n    this._view.icon = icon;\n  }\n  get order() {\n    return this._view.order;\n  }\n  set order(order) {\n    this._view.order = order;\n  }\n  get params() {\n    return this._view.params;\n  }\n  set params(params) {\n    this._view.params = params;\n  }\n  get columns() {\n    return this._view.columns;\n  }\n  get emptyView() {\n    return this._view.emptyView;\n  }\n  get parent() {\n    return this._view.parent;\n  }\n  get sticky() {\n    return this._view.sticky;\n  }\n  get expanded() {\n    return this._view.expanded;\n  }\n  set expanded(expanded) {\n    this._view.expanded = expanded;\n  }\n  get defaultSortKey() {\n    return this._view.defaultSortKey;\n  }\n  get loadChildViews() {\n    return this._view.loadChildViews;\n  }\n}\nconst isValidView = function(view) {\n  if (!view.id || typeof view.id !== \"string\") {\n    throw new Error(\"View id is required and must be a string\");\n  }\n  if (!view.name || typeof view.name !== \"string\") {\n    throw new Error(\"View name is required and must be a string\");\n  }\n  if (\"caption\" in view && typeof view.caption !== \"string\") {\n    throw new Error(\"View caption must be a string\");\n  }\n  if (!view.getContents || typeof view.getContents !== \"function\") {\n    throw new Error(\"View getContents is required and must be a function\");\n  }\n  if (!view.icon || typeof view.icon !== \"string\" || !isSvg(view.icon)) {\n    throw new Error(\"View icon is required and must be a valid svg string\");\n  }\n  if (\"order\" in view && typeof view.order !== \"number\") {\n    throw new Error(\"View order must be a number\");\n  }\n  if (view.columns) {\n    view.columns.forEach((column) => {\n      if (!(column instanceof Column)) {\n        throw new Error(\"View columns must be an array of Column. Invalid column found\");\n      }\n    });\n  }\n  if (view.emptyView && typeof view.emptyView !== \"function\") {\n    throw new Error(\"View emptyView must be a function\");\n  }\n  if (view.parent && typeof view.parent !== \"string\") {\n    throw new Error(\"View parent must be a string\");\n  }\n  if (\"sticky\" in view && typeof view.sticky !== \"boolean\") {\n    throw new Error(\"View sticky must be a boolean\");\n  }\n  if (\"expanded\" in view && typeof view.expanded !== \"boolean\") {\n    throw new Error(\"View expanded must be a boolean\");\n  }\n  if (view.defaultSortKey && typeof view.defaultSortKey !== \"string\") {\n    throw new Error(\"View defaultSortKey must be a string\");\n  }\n  if (view.loadChildViews && typeof view.loadChildViews !== \"function\") {\n    throw new Error(\"View loadChildViews must be a function\");\n  }\n  return true;\n};\nconst debug$1 = typeof process === \"object\" && process.env && process.env.NODE_DEBUG && /\\bsemver\\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error(\"SEMVER\", ...args) : () => {\n};\nvar debug_1 = debug$1;\nconst SEMVER_SPEC_VERSION = \"2.0.0\";\nconst MAX_LENGTH$1 = 256;\nconst MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */\n9007199254740991;\nconst MAX_SAFE_COMPONENT_LENGTH = 16;\nconst MAX_SAFE_BUILD_LENGTH = MAX_LENGTH$1 - 6;\nconst RELEASE_TYPES = [\n  \"major\",\n  \"premajor\",\n  \"minor\",\n  \"preminor\",\n  \"patch\",\n  \"prepatch\",\n  \"prerelease\"\n];\nvar constants = {\n  MAX_LENGTH: MAX_LENGTH$1,\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1,\n  RELEASE_TYPES,\n  SEMVER_SPEC_VERSION,\n  FLAG_INCLUDE_PRERELEASE: 1,\n  FLAG_LOOSE: 2\n};\nvar re$1 = { exports: {} };\n(function(module, exports) {\n  const {\n    MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH2,\n    MAX_SAFE_BUILD_LENGTH: MAX_SAFE_BUILD_LENGTH2,\n    MAX_LENGTH: MAX_LENGTH2\n  } = constants;\n  const debug2 = debug_1;\n  exports = module.exports = {};\n  const re2 = exports.re = [];\n  const safeRe = exports.safeRe = [];\n  const src = exports.src = [];\n  const t3 = exports.t = {};\n  let R = 0;\n  const LETTERDASHNUMBER = \"[a-zA-Z0-9-]\";\n  const safeRegexReplacements = [\n    [\"\\\\s\", 1],\n    [\"\\\\d\", MAX_LENGTH2],\n    [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH2]\n  ];\n  const makeSafeRegex = (value) => {\n    for (const [token, max] of safeRegexReplacements) {\n      value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);\n    }\n    return value;\n  };\n  const createToken = (name, value, isGlobal) => {\n    const safe = makeSafeRegex(value);\n    const index = R++;\n    debug2(name, index, value);\n    t3[name] = index;\n    src[index] = value;\n    re2[index] = new RegExp(value, isGlobal ? \"g\" : void 0);\n    safeRe[index] = new RegExp(safe, isGlobal ? \"g\" : void 0);\n  };\n  createToken(\"NUMERICIDENTIFIER\", \"0|[1-9]\\\\d*\");\n  createToken(\"NUMERICIDENTIFIERLOOSE\", \"\\\\d+\");\n  createToken(\"NONNUMERICIDENTIFIER\", `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);\n  createToken(\"MAINVERSION\", `(${src[t3.NUMERICIDENTIFIER]})\\\\.(${src[t3.NUMERICIDENTIFIER]})\\\\.(${src[t3.NUMERICIDENTIFIER]})`);\n  createToken(\"MAINVERSIONLOOSE\", `(${src[t3.NUMERICIDENTIFIERLOOSE]})\\\\.(${src[t3.NUMERICIDENTIFIERLOOSE]})\\\\.(${src[t3.NUMERICIDENTIFIERLOOSE]})`);\n  createToken(\"PRERELEASEIDENTIFIER\", `(?:${src[t3.NUMERICIDENTIFIER]}|${src[t3.NONNUMERICIDENTIFIER]})`);\n  createToken(\"PRERELEASEIDENTIFIERLOOSE\", `(?:${src[t3.NUMERICIDENTIFIERLOOSE]}|${src[t3.NONNUMERICIDENTIFIER]})`);\n  createToken(\"PRERELEASE\", `(?:-(${src[t3.PRERELEASEIDENTIFIER]}(?:\\\\.${src[t3.PRERELEASEIDENTIFIER]})*))`);\n  createToken(\"PRERELEASELOOSE\", `(?:-?(${src[t3.PRERELEASEIDENTIFIERLOOSE]}(?:\\\\.${src[t3.PRERELEASEIDENTIFIERLOOSE]})*))`);\n  createToken(\"BUILDIDENTIFIER\", `${LETTERDASHNUMBER}+`);\n  createToken(\"BUILD\", `(?:\\\\+(${src[t3.BUILDIDENTIFIER]}(?:\\\\.${src[t3.BUILDIDENTIFIER]})*))`);\n  createToken(\"FULLPLAIN\", `v?${src[t3.MAINVERSION]}${src[t3.PRERELEASE]}?${src[t3.BUILD]}?`);\n  createToken(\"FULL\", `^${src[t3.FULLPLAIN]}$`);\n  createToken(\"LOOSEPLAIN\", `[v=\\\\s]*${src[t3.MAINVERSIONLOOSE]}${src[t3.PRERELEASELOOSE]}?${src[t3.BUILD]}?`);\n  createToken(\"LOOSE\", `^${src[t3.LOOSEPLAIN]}$`);\n  createToken(\"GTLT\", \"((?:<|>)?=?)\");\n  createToken(\"XRANGEIDENTIFIERLOOSE\", `${src[t3.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`);\n  createToken(\"XRANGEIDENTIFIER\", `${src[t3.NUMERICIDENTIFIER]}|x|X|\\\\*`);\n  createToken(\"XRANGEPLAIN\", `[v=\\\\s]*(${src[t3.XRANGEIDENTIFIER]})(?:\\\\.(${src[t3.XRANGEIDENTIFIER]})(?:\\\\.(${src[t3.XRANGEIDENTIFIER]})(?:${src[t3.PRERELEASE]})?${src[t3.BUILD]}?)?)?`);\n  createToken(\"XRANGEPLAINLOOSE\", `[v=\\\\s]*(${src[t3.XRANGEIDENTIFIERLOOSE]})(?:\\\\.(${src[t3.XRANGEIDENTIFIERLOOSE]})(?:\\\\.(${src[t3.XRANGEIDENTIFIERLOOSE]})(?:${src[t3.PRERELEASELOOSE]})?${src[t3.BUILD]}?)?)?`);\n  createToken(\"XRANGE\", `^${src[t3.GTLT]}\\\\s*${src[t3.XRANGEPLAIN]}$`);\n  createToken(\"XRANGELOOSE\", `^${src[t3.GTLT]}\\\\s*${src[t3.XRANGEPLAINLOOSE]}$`);\n  createToken(\"COERCEPLAIN\", `${\"(^|[^\\\\d])(\\\\d{1,\"}${MAX_SAFE_COMPONENT_LENGTH2}})(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?`);\n  createToken(\"COERCE\", `${src[t3.COERCEPLAIN]}(?:$|[^\\\\d])`);\n  createToken(\"COERCEFULL\", src[t3.COERCEPLAIN] + `(?:${src[t3.PRERELEASE]})?(?:${src[t3.BUILD]})?(?:$|[^\\\\d])`);\n  createToken(\"COERCERTL\", src[t3.COERCE], true);\n  createToken(\"COERCERTLFULL\", src[t3.COERCEFULL], true);\n  createToken(\"LONETILDE\", \"(?:~>?)\");\n  createToken(\"TILDETRIM\", `(\\\\s*)${src[t3.LONETILDE]}\\\\s+`, true);\n  exports.tildeTrimReplace = \"$1~\";\n  createToken(\"TILDE\", `^${src[t3.LONETILDE]}${src[t3.XRANGEPLAIN]}$`);\n  createToken(\"TILDELOOSE\", `^${src[t3.LONETILDE]}${src[t3.XRANGEPLAINLOOSE]}$`);\n  createToken(\"LONECARET\", \"(?:\\\\^)\");\n  createToken(\"CARETTRIM\", `(\\\\s*)${src[t3.LONECARET]}\\\\s+`, true);\n  exports.caretTrimReplace = \"$1^\";\n  createToken(\"CARET\", `^${src[t3.LONECARET]}${src[t3.XRANGEPLAIN]}$`);\n  createToken(\"CARETLOOSE\", `^${src[t3.LONECARET]}${src[t3.XRANGEPLAINLOOSE]}$`);\n  createToken(\"COMPARATORLOOSE\", `^${src[t3.GTLT]}\\\\s*(${src[t3.LOOSEPLAIN]})$|^$`);\n  createToken(\"COMPARATOR\", `^${src[t3.GTLT]}\\\\s*(${src[t3.FULLPLAIN]})$|^$`);\n  createToken(\"COMPARATORTRIM\", `(\\\\s*)${src[t3.GTLT]}\\\\s*(${src[t3.LOOSEPLAIN]}|${src[t3.XRANGEPLAIN]})`, true);\n  exports.comparatorTrimReplace = \"$1$2$3\";\n  createToken(\"HYPHENRANGE\", `^\\\\s*(${src[t3.XRANGEPLAIN]})\\\\s+-\\\\s+(${src[t3.XRANGEPLAIN]})\\\\s*$`);\n  createToken(\"HYPHENRANGELOOSE\", `^\\\\s*(${src[t3.XRANGEPLAINLOOSE]})\\\\s+-\\\\s+(${src[t3.XRANGEPLAINLOOSE]})\\\\s*$`);\n  createToken(\"STAR\", \"(<|>)?=?\\\\s*\\\\*\");\n  createToken(\"GTE0\", \"^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$\");\n  createToken(\"GTE0PRE\", \"^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$\");\n})(re$1, re$1.exports);\nvar reExports = re$1.exports;\nconst looseOption = Object.freeze({ loose: true });\nconst emptyOpts = Object.freeze({});\nconst parseOptions$1 = (options) => {\n  if (!options) {\n    return emptyOpts;\n  }\n  if (typeof options !== \"object\") {\n    return looseOption;\n  }\n  return options;\n};\nvar parseOptions_1 = parseOptions$1;\nconst numeric = /^[0-9]+$/;\nconst compareIdentifiers$1 = (a2, b2) => {\n  const anum = numeric.test(a2);\n  const bnum = numeric.test(b2);\n  if (anum && bnum) {\n    a2 = +a2;\n    b2 = +b2;\n  }\n  return a2 === b2 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a2 < b2 ? -1 : 1;\n};\nconst rcompareIdentifiers = (a2, b2) => compareIdentifiers$1(b2, a2);\nvar identifiers = {\n  compareIdentifiers: compareIdentifiers$1,\n  rcompareIdentifiers\n};\nconst debug = debug_1;\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = constants;\nconst { safeRe: re, t: t2 } = reExports;\nconst parseOptions = parseOptions_1;\nconst { compareIdentifiers } = identifiers;\nlet SemVer$2 = class SemVer {\n  constructor(version, options) {\n    options = parseOptions(options);\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {\n        return version;\n      } else {\n        version = version.version;\n      }\n    } else if (typeof version !== \"string\") {\n      throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`);\n    }\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      );\n    }\n    debug(\"SemVer\", version, options);\n    this.options = options;\n    this.loose = !!options.loose;\n    this.includePrerelease = !!options.includePrerelease;\n    const m2 = version.trim().match(options.loose ? re[t2.LOOSE] : re[t2.FULL]);\n    if (!m2) {\n      throw new TypeError(`Invalid Version: ${version}`);\n    }\n    this.raw = version;\n    this.major = +m2[1];\n    this.minor = +m2[2];\n    this.patch = +m2[3];\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError(\"Invalid major version\");\n    }\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError(\"Invalid minor version\");\n    }\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError(\"Invalid patch version\");\n    }\n    if (!m2[4]) {\n      this.prerelease = [];\n    } else {\n      this.prerelease = m2[4].split(\".\").map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id;\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num;\n          }\n        }\n        return id;\n      });\n    }\n    this.build = m2[5] ? m2[5].split(\".\") : [];\n    this.format();\n  }\n  format() {\n    this.version = `${this.major}.${this.minor}.${this.patch}`;\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join(\".\")}`;\n    }\n    return this.version;\n  }\n  toString() {\n    return this.version;\n  }\n  compare(other) {\n    debug(\"SemVer.compare\", this.version, this.options, other);\n    if (!(other instanceof SemVer)) {\n      if (typeof other === \"string\" && other === this.version) {\n        return 0;\n      }\n      other = new SemVer(other, this.options);\n    }\n    if (other.version === this.version) {\n      return 0;\n    }\n    return this.compareMain(other) || this.comparePre(other);\n  }\n  compareMain(other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options);\n    }\n    return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);\n  }\n  comparePre(other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options);\n    }\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1;\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1;\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0;\n    }\n    let i2 = 0;\n    do {\n      const a2 = this.prerelease[i2];\n      const b2 = other.prerelease[i2];\n      debug(\"prerelease compare\", i2, a2, b2);\n      if (a2 === void 0 && b2 === void 0) {\n        return 0;\n      } else if (b2 === void 0) {\n        return 1;\n      } else if (a2 === void 0) {\n        return -1;\n      } else if (a2 === b2) {\n        continue;\n      } else {\n        return compareIdentifiers(a2, b2);\n      }\n    } while (++i2);\n  }\n  compareBuild(other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options);\n    }\n    let i2 = 0;\n    do {\n      const a2 = this.build[i2];\n      const b2 = other.build[i2];\n      debug(\"build compare\", i2, a2, b2);\n      if (a2 === void 0 && b2 === void 0) {\n        return 0;\n      } else if (b2 === void 0) {\n        return 1;\n      } else if (a2 === void 0) {\n        return -1;\n      } else if (a2 === b2) {\n        continue;\n      } else {\n        return compareIdentifiers(a2, b2);\n      }\n    } while (++i2);\n  }\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc(release, identifier, identifierBase) {\n    switch (release) {\n      case \"premajor\":\n        this.prerelease.length = 0;\n        this.patch = 0;\n        this.minor = 0;\n        this.major++;\n        this.inc(\"pre\", identifier, identifierBase);\n        break;\n      case \"preminor\":\n        this.prerelease.length = 0;\n        this.patch = 0;\n        this.minor++;\n        this.inc(\"pre\", identifier, identifierBase);\n        break;\n      case \"prepatch\":\n        this.prerelease.length = 0;\n        this.inc(\"patch\", identifier, identifierBase);\n        this.inc(\"pre\", identifier, identifierBase);\n        break;\n      case \"prerelease\":\n        if (this.prerelease.length === 0) {\n          this.inc(\"patch\", identifier, identifierBase);\n        }\n        this.inc(\"pre\", identifier, identifierBase);\n        break;\n      case \"major\":\n        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {\n          this.major++;\n        }\n        this.minor = 0;\n        this.patch = 0;\n        this.prerelease = [];\n        break;\n      case \"minor\":\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++;\n        }\n        this.patch = 0;\n        this.prerelease = [];\n        break;\n      case \"patch\":\n        if (this.prerelease.length === 0) {\n          this.patch++;\n        }\n        this.prerelease = [];\n        break;\n      case \"pre\": {\n        const base = Number(identifierBase) ? 1 : 0;\n        if (!identifier && identifierBase === false) {\n          throw new Error(\"invalid increment argument: identifier is empty\");\n        }\n        if (this.prerelease.length === 0) {\n          this.prerelease = [base];\n        } else {\n          let i2 = this.prerelease.length;\n          while (--i2 >= 0) {\n            if (typeof this.prerelease[i2] === \"number\") {\n              this.prerelease[i2]++;\n              i2 = -2;\n            }\n          }\n          if (i2 === -1) {\n            if (identifier === this.prerelease.join(\".\") && identifierBase === false) {\n              throw new Error(\"invalid increment argument: identifier already exists\");\n            }\n            this.prerelease.push(base);\n          }\n        }\n        if (identifier) {\n          let prerelease = [identifier, base];\n          if (identifierBase === false) {\n            prerelease = [identifier];\n          }\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = prerelease;\n            }\n          } else {\n            this.prerelease = prerelease;\n          }\n        }\n        break;\n      }\n      default:\n        throw new Error(`invalid increment argument: ${release}`);\n    }\n    this.raw = this.format();\n    if (this.build.length) {\n      this.raw += `+${this.build.join(\".\")}`;\n    }\n    return this;\n  }\n};\nvar semver = SemVer$2;\nconst SemVer$1 = semver;\nconst parse$1 = (version, options, throwErrors = false) => {\n  if (version instanceof SemVer$1) {\n    return version;\n  }\n  try {\n    return new SemVer$1(version, options);\n  } catch (er) {\n    if (!throwErrors) {\n      return null;\n    }\n    throw er;\n  }\n};\nvar parse_1 = parse$1;\nconst parse = parse_1;\nconst valid = (version, options) => {\n  const v = parse(version, options);\n  return v ? v.version : null;\n};\nvar valid_1 = valid;\nconst valid$1 = /* @__PURE__ */ getDefaultExportFromCjs(valid_1);\nconst SemVer2 = semver;\nconst major = (a2, loose) => new SemVer2(a2, loose).major;\nvar major_1 = major;\nconst major$1 = /* @__PURE__ */ getDefaultExportFromCjs(major_1);\nclass ProxyBus {\n  bus;\n  constructor(bus2) {\n    if (typeof bus2.getVersion !== \"function\" || !valid$1(bus2.getVersion())) {\n      console.warn(\"Proxying an event bus with an unknown or invalid version\");\n    } else if (major$1(bus2.getVersion()) !== major$1(this.getVersion())) {\n      console.warn(\n        \"Proxying an event bus of version \" + bus2.getVersion() + \" with \" + this.getVersion()\n      );\n    }\n    this.bus = bus2;\n  }\n  getVersion() {\n    return \"3.3.1\";\n  }\n  subscribe(name, handler) {\n    this.bus.subscribe(name, handler);\n  }\n  unsubscribe(name, handler) {\n    this.bus.unsubscribe(name, handler);\n  }\n  emit(name, event) {\n    this.bus.emit(name, event);\n  }\n}\nclass SimpleBus {\n  handlers = /* @__PURE__ */ new Map();\n  getVersion() {\n    return \"3.3.1\";\n  }\n  subscribe(name, handler) {\n    this.handlers.set(\n      name,\n      (this.handlers.get(name) || []).concat(\n        handler\n      )\n    );\n  }\n  unsubscribe(name, handler) {\n    this.handlers.set(\n      name,\n      (this.handlers.get(name) || []).filter((h2) => h2 !== handler)\n    );\n  }\n  emit(name, event) {\n    (this.handlers.get(name) || []).forEach((h2) => {\n      try {\n        h2(event);\n      } catch (e2) {\n        console.error(\"could not invoke event listener\", e2);\n      }\n    });\n  }\n}\nlet bus = null;\nfunction getBus() {\n  if (bus !== null) {\n    return bus;\n  }\n  if (typeof window === \"undefined\") {\n    return new Proxy({}, {\n      get: () => {\n        return () => console.error(\n          \"Window not available, EventBus can not be established!\"\n        );\n      }\n    });\n  }\n  if (window.OC?._eventBus && typeof window._nc_event_bus === \"undefined\") {\n    console.warn(\n      \"found old event bus instance at OC._eventBus. Update your version!\"\n    );\n    window._nc_event_bus = window.OC._eventBus;\n  }\n  if (typeof window?._nc_event_bus !== \"undefined\") {\n    bus = new ProxyBus(window._nc_event_bus);\n  } else {\n    bus = window._nc_event_bus = new SimpleBus();\n  }\n  return bus;\n}\nfunction emit(name, event) {\n  getBus().emit(name, event);\n}\n/*!\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nclass FileListFilter extends TypedEventTarget {\n  id;\n  order;\n  constructor(id, order = 100) {\n    super();\n    this.id = id;\n    this.order = order;\n  }\n  filter(nodes) {\n    throw new Error(\"Not implemented\");\n  }\n  updateChips(chips) {\n    this.dispatchTypedEvent(\"update:chips\", new CustomEvent(\"update:chips\", { detail: chips }));\n  }\n  filterUpdated() {\n    this.dispatchTypedEvent(\"update:filter\", new CustomEvent(\"update:filter\"));\n  }\n}\nfunction registerFileListFilter(filter) {\n  if (!window._nc_filelist_filters) {\n    window._nc_filelist_filters = /* @__PURE__ */ new Map();\n  }\n  if (window._nc_filelist_filters.has(filter.id)) {\n    throw new Error(`File list filter \"${filter.id}\" already registered`);\n  }\n  window._nc_filelist_filters.set(filter.id, filter);\n  emit(\"files:filter:added\", filter);\n}\nfunction unregisterFileListFilter(filterId) {\n  if (window._nc_filelist_filters && window._nc_filelist_filters.has(filterId)) {\n    window._nc_filelist_filters.delete(filterId);\n    emit(\"files:filter:removed\", filterId);\n  }\n}\nfunction getFileListFilters() {\n  if (!window._nc_filelist_filters) {\n    return [];\n  }\n  return [...window._nc_filelist_filters.values()];\n}\nconst addNewFileMenuEntry = function(entry) {\n  const newFileMenu = getNewFileMenu();\n  return newFileMenu.registerEntry(entry);\n};\nconst removeNewFileMenuEntry = function(entry) {\n  const newFileMenu = getNewFileMenu();\n  return newFileMenu.unregisterEntry(entry);\n};\nconst getNewFileMenuEntries = function(context) {\n  const newFileMenu = getNewFileMenu();\n  return newFileMenu.getEntries(context).sort((a2, b2) => {\n    if (a2.order !== void 0 && b2.order !== void 0 && a2.order !== b2.order) {\n      return a2.order - b2.order;\n    }\n    return a2.displayName.localeCompare(b2.displayName, void 0, { numeric: true, sensitivity: \"base\" });\n  });\n};\nexport {\n  Column,\n  DefaultType,\n  q as File,\n  FileAction,\n  FileListAction,\n  FileListFilter,\n  F as FileType,\n  FilesSortingMode,\n  s as Folder,\n  Header,\n  InvalidFilenameError,\n  InvalidFilenameErrorReason,\n  Navigation,\n  NewMenuEntryCategory,\n  N as Node,\n  t as NodeStatus,\n  P as Permission,\n  View,\n  addNewFileMenuEntry,\n  c as davGetClient,\n  l as davGetDefaultPropfind,\n  m as davGetFavoritesReport,\n  n as davGetRecentSearch,\n  a as davGetRemoteURL,\n  g as davGetRootPath,\n  p as davParsePermissions,\n  b as davRemoteURL,\n  r as davResultToNode,\n  d as davRootPath,\n  h as defaultDavNamespaces,\n  f as defaultDavProperties,\n  formatFileSize,\n  k as getDavNameSpaces,\n  j as getDavProperties,\n  e as getFavoriteNodes,\n  getFileActions,\n  getFileListActions,\n  getFileListFilters,\n  getFileListHeaders,\n  getNavigation,\n  getNewFileMenuEntries,\n  getUniqueName,\n  isFilenameValid,\n  orderBy,\n  parseFileSize,\n  i as registerDavProperty,\n  registerFileAction,\n  registerFileListAction,\n  registerFileListFilter,\n  registerFileListHeaders,\n  removeNewFileMenuEntry,\n  sortNodes,\n  unregisterFileListFilter,\n  validateFilename\n};\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}\n\nmodule.exports = getIgnoreAttributesFn","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/* eslint-disable jsdoc/require-jsdoc */\n\ntype FileDropEntry = {\n\tciphertext: string, // encrypted metadata (AES/GCM/NoPadding, 128 bit key size) of folder (see below for the plaintext structure). first gzipped, then encrypted, then base64 encoded.\"\n\tnonce: string,\n\tauthenticationTag: string,\n\tusers: [\n\t\t{\n\t\t\tuserId: string\n\t\t\tencryptedFiledropKey: string, // The metadata-key is encrypted with RSA/ECB/OAEPWithSHA-256AndMGF1Padding\n\t\t}\n\t],\n}\n\nexport type UserWithAccess = {\n\tuserId: string,\n\tcertificate: string, // PEM format. Example: \"-----BEGIN CERTIFICATE-----\\nMIIDkjCCAnqgAwIBAgIBADANBgkqhkiG9w0BAQsFADBiMQswCQYDVQQGEwJERTEb\\nMBkGA1UECAwSQmFkZW4tV3VlcnR0ZW1iZXJnMRIwEAYDVQQHDAlTdHV0dGdhcnQx\\nEjAQBgNVBAoMCU5leHRjbG91ZDEOMAwGA1UEAwwFYWRtaW4wHhcNMjQxMjA5MTQw\\nNTI2WhcNNDQxMjA0MTQwNTI2WjBiMQswCQYDVQQGEwJERTEbMBkGA1UECAwSQmFk\\nZW4tV3VlcnR0ZW1iZXJnMRIwEAYDVQQHDAlTdHV0dGdhcnQxEjAQBgNVBAoMCU5l\\neHRjbG91ZDEOMAwGA1UEAwwFYWRtaW4wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw\\nggEKAoIBAQCR5e87QtuM8uyh2W+PVPVklS/7xnpYH6QmkwKgK8lNHkrsGFRdaHP0\\nx98FbjlVHM/wandZlqKlyspANX57tGUFoR+Ya3ymYkvyrKeFv34WsbBL/3QDS6nT\\nNrl40hgsuhAJVl99JfFmJPrHwb9iU8yM89ktWsAa+xhDH9n37vmADJiBjOR7IW1b\\nF0xjpwp2+9SDMkWCK5A2WMPIY45waZLJw9PsaiKikhV+n1q00PTnULKSkDuUrENy\\nYdqY4MnHs/k70QkTdynyDLS2LUdmMyHEHyyMktiwaRileqrsGsQf2pErD5pKhvcf\\nuIhN1g7sNDyOtPtyB1ioX5DGTg6LuhrJAgMBAAGjUzBRMB0GA1UdDgQWBBQgTmjF\\nLB/B3VZ6sYYZTXFKGL245TAfBgNVHSMEGDAWgBQgTmjFLB/B3VZ6sYYZTXFKGL24\\n5TAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQABg8Sz2rlkG6/x\\nc6GxwWr64EaqrAPfPpi6yUg1HfscokrgGjMuj/g0N6OBXNodkAxQAxOYdaI8LuAe\\niqjuiJh0tn1u0yxF0cxUqk3EUZsPmF8YRN4cG55z0hTnXJ/9YxCrYQl/LRUmvP8q\\nufnJX+CtRLs5oDVpmCJrEc8hA1rEDaeGYZDy+sfOqk3YjpVKR/ETI+AdQ9ubxFhj\\nvUzF4gZNbCyLk1ul0QzwNW1aKV920BVMhYnMaYM9Xaume4pn6wuZoD0k7py+tKCe\\nXaemHYSvFS1lY4Q8Ih2cacIan6FgxI/jkanCEOxdUcwtSOTocrn6DL2wmkcLm0Ao\\nYovd2rO6\\n-----END CERTIFICATE-----\\n\"\n\t// The metadata-key is encrypted with RSA/ECB/OAEPWithSHA-256AndMGF1Padding\n\tencryptedMetadataKey: string, // Base64 encoded. Example:: \"KS9P5Et+i94PAdpTtR9pyyuTlV6/3e3E/Zzwu8ua1j/e6uHUfQDxpXsksgX95Q/Hin0caoYfwwyWVs2/wtdkHttBdjywzcNfz5yDblrdKAYoyeuCavNatA3OuFDJVcMiisiskD6GMz6o3V21ZqpHwTry05dv4jZMs88lzTOLeDJ7bmmv5Pjyfbg8lxk6oW85LJkUku3+szv+kz+as18Pk+Oe1MylLP+Zktw+1Pckem32h19MacefZI/tkZLmdmjPtKNQGqlefeTXHKnIOzykdPjBG9CJ7zS0MPN7nv0ZgXeSoEi6fUHwkzmg8GxGSjLoL6L7BhLxw7Z8YWZ1MAYyCA==\"\n}\n\nexport type Metadata = {\n\tmetadata: {\n\t\t// Encrypted metadata (AES/GCM/NoPadding, 128 bit key size) of folder (see below for the plaintext structure).\n\t\t// first gzipped, then encrypted, then base64 encoded.\"\n\t\t// MAKE SURE to always encrypt it using the BINARY representation (NOT base64) of \"encryptedMetadataKey\" from the \"users\" array below\n\t\tciphertext: string, // Base64 encoded. Example: \"/23sBI4AV3RWUHD7pTJ6pXQgcqGvw7xcuuDj61/kX/XfC21jabpfE6ENExjVuckrL8qy6r11WFyHJAJHWLeTiXLJaDiT++JteFecWEE6Ow69iYGgY3HX/IBr5AdBDJVVhhVOdvmkAKVUJQPxRDvDZuo/J/F4UTFt0phfAtpOuIbXY4g+NrJGZWS/IUNaRg==|Bu6LpNYAu3nUtouxt7sRpg==\"\n\t\tauthenticationTag: string, // Base64 encoded. Example: \"uIbXY4g+NrJGZWS/IUNaRg==\"\n\t\tnonce: string, // Base64 encoded. Example: \"Bu6LpNYAu3nUtouxt7sRpg==\"\n\t},\n\tusers?: UserWithAccess[],\n\tfiledrop?: Record<string, FileDropEntry>,\n\tversion: '2.0',\n}\n\nexport type RootMetadata = Metadata & {\n\tusers: UserWithAccess[],\n}\n\nexport type FileEncryptionInfo = {\n\tauthenticationTag: string // Example: 'nJHAcpZwSS1BCIkGbmtbNg==',\n\tfilename: string // Example: 'test.txt',\n\tkey: string // Example: 'Hj+q7e53ZeQdHKPyF7FKeg==',\n\tmimetype: string // Example: 'text/plain',\n\tnonce: string // Example: 'sqqtY0eRjhuwf+qTv5Kg2g=='\n}\n\nexport type MetadataInfo = {\n\tcounter: number, // Example: 3\n\tfiles: Record<string, FileEncryptionInfo>, // Example: 'ad3b12554e0d4364854ae3e21b170152'\n\tfolders: Record<string, string>, // TODO: Example: { fa666d819a6c4315abba421172f0a0b1: 'Test' }\n\tkeyChecksums?: string[] // Example: ['9a60be9846978884033fcdfb978fbdd428221b20583bca6bfcb425f1b540152a']\n}\n\nexport type PrivateKeyInfo = {\n\tencryptedPrivateKey: Uint8Array,\n\tiv: Uint8Array,\n\tsalt: Uint8Array,\n}\n\nexport function isRootMetadata(metadata: Metadata): metadata is RootMetadata {\n\treturn metadata.users !== undefined\n}\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport { getCurrentUser } from '@nextcloud/auth'\nimport { getLoggerBuilder } from '@nextcloud/logger'\n\nconst getLogger = user => {\n\tif (user === null) {\n\t\treturn getLoggerBuilder()\n\t\t\t.setApp('end_to_end_encryption')\n\t\t\t.build()\n\t}\n\treturn getLoggerBuilder()\n\t\t.setApp('end_to_end_encryption')\n\t\t.setUid(user.uid)\n\t\t.build()\n}\n\nexport default getLogger(getCurrentUser())\n","export class ByteStream {\n    constructor(parameters = {}) {\n        if (\"view\" in parameters) {\n            this.fromUint8Array(parameters.view);\n        }\n        else if (\"buffer\" in parameters) {\n            this.fromArrayBuffer(parameters.buffer);\n        }\n        else if (\"string\" in parameters) {\n            this.fromString(parameters.string);\n        }\n        else if (\"hexstring\" in parameters) {\n            this.fromHexString(parameters.hexstring);\n        }\n        else {\n            if (\"length\" in parameters && parameters.length > 0) {\n                this.length = parameters.length;\n                if (parameters.stub) {\n                    for (let i = 0; i < this._view.length; i++) {\n                        this._view[i] = parameters.stub;\n                    }\n                }\n            }\n            else {\n                this.length = 0;\n            }\n        }\n    }\n    set buffer(value) {\n        this._buffer = value;\n        this._view = new Uint8Array(this._buffer);\n    }\n    get buffer() {\n        return this._buffer;\n    }\n    set view(value) {\n        this._buffer = new ArrayBuffer(value.length);\n        this._view = new Uint8Array(this._buffer);\n        this._view.set(value);\n    }\n    get view() {\n        return this._view;\n    }\n    get length() {\n        return this.view.byteLength;\n    }\n    set length(value) {\n        this._buffer = new ArrayBuffer(value);\n        this._view = new Uint8Array(this._buffer);\n    }\n    clear() {\n        this._buffer = new ArrayBuffer(0);\n        this._view = new Uint8Array(this._buffer);\n    }\n    fromArrayBuffer(array) {\n        this._buffer = array;\n        this._view = new Uint8Array(this._buffer);\n    }\n    fromUint8Array(array) {\n        this.fromArrayBuffer(new Uint8Array(array).buffer);\n    }\n    fromString(string) {\n        const stringLength = string.length;\n        this.length = stringLength;\n        for (let i = 0; i < stringLength; i++)\n            this.view[i] = string.charCodeAt(i);\n    }\n    toString(start = 0, length = (this.view.length - start)) {\n        let result = \"\";\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        for (let i = start; i < (start + length); i++)\n            result += String.fromCharCode(this.view[i]);\n        return result;\n    }\n    fromHexString(hexString) {\n        const stringLength = hexString.length;\n        this.buffer = new ArrayBuffer(stringLength >> 1);\n        this.view = new Uint8Array(this.buffer);\n        const hexMap = new Map();\n        hexMap.set(\"0\", 0x00);\n        hexMap.set(\"1\", 0x01);\n        hexMap.set(\"2\", 0x02);\n        hexMap.set(\"3\", 0x03);\n        hexMap.set(\"4\", 0x04);\n        hexMap.set(\"5\", 0x05);\n        hexMap.set(\"6\", 0x06);\n        hexMap.set(\"7\", 0x07);\n        hexMap.set(\"8\", 0x08);\n        hexMap.set(\"9\", 0x09);\n        hexMap.set(\"A\", 0x0A);\n        hexMap.set(\"a\", 0x0A);\n        hexMap.set(\"B\", 0x0B);\n        hexMap.set(\"b\", 0x0B);\n        hexMap.set(\"C\", 0x0C);\n        hexMap.set(\"c\", 0x0C);\n        hexMap.set(\"D\", 0x0D);\n        hexMap.set(\"d\", 0x0D);\n        hexMap.set(\"E\", 0x0E);\n        hexMap.set(\"e\", 0x0E);\n        hexMap.set(\"F\", 0x0F);\n        hexMap.set(\"f\", 0x0F);\n        let j = 0;\n        let temp = 0x00;\n        for (let i = 0; i < stringLength; i++) {\n            if (!(i % 2)) {\n                temp = hexMap.get(hexString.charAt(i)) << 4;\n            }\n            else {\n                temp |= hexMap.get(hexString.charAt(i));\n                this.view[j] = temp;\n                j++;\n            }\n        }\n    }\n    toHexString(start = 0, length = (this.view.length - start)) {\n        let result = \"\";\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        for (let i = start; i < (start + length); i++) {\n            const str = this.view[i].toString(16).toUpperCase();\n            result = result + ((str.length == 1) ? \"0\" : \"\") + str;\n        }\n        return result;\n    }\n    copy(start = 0, length = (this.length - start)) {\n        if (!start && !this.length) {\n            return new ByteStream();\n        }\n        if ((start < 0) || (start > (this.length - 1))) {\n            throw new Error(`Wrong start position: ${start}`);\n        }\n        const stream = new ByteStream({\n            buffer: this._buffer.slice(start, start + length)\n        });\n        return stream;\n    }\n    slice(start = 0, end = this.length) {\n        if (!start && !this.length) {\n            return new ByteStream();\n        }\n        if ((start < 0) || (start > (this.length - 1))) {\n            throw new Error(`Wrong start position: ${start}`);\n        }\n        const stream = new ByteStream({\n            buffer: this._buffer.slice(start, end),\n        });\n        return stream;\n    }\n    realloc(size) {\n        const buffer = new ArrayBuffer(size);\n        const view = new Uint8Array(buffer);\n        if (size > this._view.length)\n            view.set(this._view);\n        else {\n            view.set(new Uint8Array(this._buffer, 0, size));\n        }\n        this._buffer = buffer;\n        this._view = new Uint8Array(this._buffer);\n    }\n    append(stream) {\n        const initialSize = this.length;\n        const streamViewLength = stream.length;\n        const subarrayView = stream._view.subarray();\n        this.realloc(initialSize + streamViewLength);\n        this._view.set(subarrayView, initialSize);\n    }\n    insert(stream, start = 0, length = (this.length - start)) {\n        if (start > (this.length - 1))\n            return false;\n        if (length > (this.length - start)) {\n            length = this.length - start;\n        }\n        if (length > stream.length) {\n            length = stream.length;\n        }\n        if (length == stream.length)\n            this._view.set(stream._view, start);\n        else {\n            this._view.set(stream._view.subarray(0, length), start);\n        }\n        return true;\n    }\n    isEqual(stream) {\n        if (this.length != stream.length)\n            return false;\n        for (let i = 0; i < stream.length; i++) {\n            if (this.view[i] != stream.view[i])\n                return false;\n        }\n        return true;\n    }\n    isEqualView(view) {\n        if (view.length != this.view.length)\n            return false;\n        for (let i = 0; i < view.length; i++) {\n            if (this.view[i] != view[i])\n                return false;\n        }\n        return true;\n    }\n    findPattern(pattern, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const patternLength = pattern.length;\n        if (patternLength > length) {\n            return (-1);\n        }\n        const patternArray = [];\n        for (let i = 0; i < patternLength; i++)\n            patternArray.push(pattern.view[i]);\n        for (let i = 0; i <= (length - patternLength); i++) {\n            let equal = true;\n            const equalStart = (backward) ? (start - patternLength - i) : (start + i);\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patternArray[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                return (backward) ? (start - patternLength - i) : (start + patternLength + i);\n            }\n        }\n        return (-1);\n    }\n    findFirstIn(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const result = {\n            id: (-1),\n            position: (backward) ? 0 : (start + length),\n            length: 0\n        };\n        for (let i = 0; i < patterns.length; i++) {\n            const position = this.findPattern(patterns[i], start, length, backward);\n            if (position != (-1)) {\n                let valid = false;\n                const patternLength = patterns[i].length;\n                if (backward) {\n                    if ((position - patternLength) >= (result.position - result.length))\n                        valid = true;\n                }\n                else {\n                    if ((position - patternLength) <= (result.position - result.length))\n                        valid = true;\n                }\n                if (valid) {\n                    result.position = position;\n                    result.id = i;\n                    result.length = patternLength;\n                }\n            }\n        }\n        return result;\n    }\n    findAllIn(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            id: (-1),\n            position: start\n        };\n        do {\n            const position = patternFound.position;\n            patternFound = this.findFirstIn(patterns, patternFound.position, length);\n            if (patternFound.id == (-1)) {\n                break;\n            }\n            length -= (patternFound.position - position);\n            result.push({\n                id: patternFound.id,\n                position: patternFound.position\n            });\n        } while (true);\n        return result;\n    }\n    findAllPatternIn(pattern, start_, length_) {\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        const patternLength = pattern.length;\n        if (patternLength > length) {\n            return (-1);\n        }\n        const patternArray = Array.from(pattern.view);\n        for (let i = 0; i <= (length - patternLength); i++) {\n            let equal = true;\n            const equalStart = start + i;\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patternArray[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                result.push(start + patternLength + i);\n                i += (patternLength - 1);\n            }\n        }\n        return result;\n    }\n    findFirstNotIn(patterns, start_, length_, backward_) {\n        let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const result = {\n            left: {\n                id: (-1),\n                position: start\n            },\n            right: {\n                id: (-1),\n                position: 0\n            },\n            value: new ByteStream()\n        };\n        let currentLength = length;\n        while (currentLength > 0) {\n            result.right = this.findFirstIn(patterns, (backward) ? (start - length + currentLength) : (start + length - currentLength), currentLength, backward);\n            if (result.right.id == (-1)) {\n                length = currentLength;\n                if (backward) {\n                    start -= length;\n                }\n                else {\n                    start = result.left.position;\n                }\n                result.value = new ByteStream({\n                    buffer: this._buffer.slice(start, start + length),\n                });\n                break;\n            }\n            if (result.right.position != ((backward) ? (result.left.position - patterns[result.right.id].length) : (result.left.position + patterns[result.right.id].length))) {\n                if (backward) {\n                    start = result.right.position + patterns[result.right.id].length;\n                    length = result.left.position - result.right.position - patterns[result.right.id].length;\n                }\n                else {\n                    start = result.left.position;\n                    length = result.right.position - result.left.position - patterns[result.right.id].length;\n                }\n                result.value = new ByteStream({\n                    buffer: this._buffer.slice(start, start + length),\n                });\n                break;\n            }\n            result.left = result.right;\n            currentLength -= patterns[result.right.id].length;\n        }\n        if (backward) {\n            const temp = result.right;\n            result.right = result.left;\n            result.left = temp;\n        }\n        return result;\n    }\n    findAllNotIn(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            left: {\n                id: (-1),\n                position: start\n            },\n            right: {\n                id: (-1),\n                position: start\n            },\n            value: new ByteStream()\n        };\n        do {\n            const position = patternFound.right.position;\n            patternFound = this.findFirstNotIn(patterns, patternFound.right.position, length);\n            length -= (patternFound.right.position - position);\n            result.push({\n                left: {\n                    id: patternFound.left.id,\n                    position: patternFound.left.position\n                },\n                right: {\n                    id: patternFound.right.id,\n                    position: patternFound.right.position\n                },\n                value: patternFound.value\n            });\n        } while (patternFound.right.id != (-1));\n        return result;\n    }\n    findFirstSequence(patterns, start_, length_, backward_) {\n        let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const firstIn = this.skipNotPatterns(patterns, start, length, backward);\n        if (firstIn == (-1)) {\n            return {\n                position: (-1),\n                value: new ByteStream()\n            };\n        }\n        const firstNotIn = this.skipPatterns(patterns, firstIn, length - ((backward) ? (start - firstIn) : (firstIn - start)), backward);\n        if (backward) {\n            start = firstNotIn;\n            length = (firstIn - firstNotIn);\n        }\n        else {\n            start = firstIn;\n            length = (firstNotIn - firstIn);\n        }\n        const value = new ByteStream({\n            buffer: this._buffer.slice(start, start + length),\n        });\n        return {\n            position: firstNotIn,\n            value\n        };\n    }\n    findAllSequences(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            position: start,\n            value: new ByteStream()\n        };\n        do {\n            const position = patternFound.position;\n            patternFound = this.findFirstSequence(patterns, patternFound.position, length);\n            if (patternFound.position != (-1)) {\n                length -= (patternFound.position - position);\n                result.push({\n                    position: patternFound.position,\n                    value: patternFound.value,\n                });\n            }\n        } while (patternFound.position != (-1));\n        return result;\n    }\n    findPairedPatterns(leftPattern, rightPattern, start_, length_) {\n        const result = [];\n        if (leftPattern.isEqual(rightPattern))\n            return result;\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        let currentPositionLeft = 0;\n        const leftPatterns = this.findAllPatternIn(leftPattern, start, length);\n        if (!Array.isArray(leftPatterns) || leftPatterns.length == 0) {\n            return result;\n        }\n        const rightPatterns = this.findAllPatternIn(rightPattern, start, length);\n        if (!Array.isArray(rightPatterns) || rightPatterns.length == 0) {\n            return result;\n        }\n        while (currentPositionLeft < leftPatterns.length) {\n            if (rightPatterns.length == 0) {\n                break;\n            }\n            if (leftPatterns[0] == rightPatterns[0]) {\n                result.push({\n                    left: leftPatterns[0],\n                    right: rightPatterns[0]\n                });\n                leftPatterns.splice(0, 1);\n                rightPatterns.splice(0, 1);\n                continue;\n            }\n            if (leftPatterns[currentPositionLeft] > rightPatterns[0]) {\n                break;\n            }\n            while (leftPatterns[currentPositionLeft] < rightPatterns[0]) {\n                currentPositionLeft++;\n                if (currentPositionLeft >= leftPatterns.length) {\n                    break;\n                }\n            }\n            result.push({\n                left: leftPatterns[currentPositionLeft - 1],\n                right: rightPatterns[0]\n            });\n            leftPatterns.splice(currentPositionLeft - 1, 1);\n            rightPatterns.splice(0, 1);\n            currentPositionLeft = 0;\n        }\n        result.sort((a, b) => (a.left - b.left));\n        return result;\n    }\n    findPairedArrays(inputLeftPatterns, inputRightPatterns, start_, length_) {\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let currentPositionLeft = 0;\n        const leftPatterns = this.findAllIn(inputLeftPatterns, start, length);\n        if (leftPatterns.length == 0)\n            return result;\n        const rightPatterns = this.findAllIn(inputRightPatterns, start, length);\n        if (rightPatterns.length == 0)\n            return result;\n        while (currentPositionLeft < leftPatterns.length) {\n            if (rightPatterns.length == 0) {\n                break;\n            }\n            if (leftPatterns[0].position == rightPatterns[0].position) {\n                result.push({\n                    left: leftPatterns[0],\n                    right: rightPatterns[0]\n                });\n                leftPatterns.splice(0, 1);\n                rightPatterns.splice(0, 1);\n                continue;\n            }\n            if (leftPatterns[currentPositionLeft].position > rightPatterns[0].position) {\n                break;\n            }\n            while (leftPatterns[currentPositionLeft].position < rightPatterns[0].position) {\n                currentPositionLeft++;\n                if (currentPositionLeft >= leftPatterns.length) {\n                    break;\n                }\n            }\n            result.push({\n                left: leftPatterns[currentPositionLeft - 1],\n                right: rightPatterns[0]\n            });\n            leftPatterns.splice(currentPositionLeft - 1, 1);\n            rightPatterns.splice(0, 1);\n            currentPositionLeft = 0;\n        }\n        result.sort((a, b) => (a.left.position - b.left.position));\n        return result;\n    }\n    replacePattern(searchPattern, replacePattern, start_, length_, findAllResult = null) {\n        let result = [];\n        let i;\n        const output = {\n            status: (-1),\n            searchPatternPositions: [],\n            replacePatternPositions: []\n        };\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        if (findAllResult == null) {\n            result = this.findAllIn([searchPattern], start, length);\n            if (result.length == 0) {\n                return output;\n            }\n        }\n        else {\n            result = findAllResult;\n        }\n        output.searchPatternPositions.push(...Array.from(result, element => element.position));\n        const patternDifference = searchPattern.length - replacePattern.length;\n        const changedBuffer = new ArrayBuffer(this.view.length - (result.length * patternDifference));\n        const changedView = new Uint8Array(changedBuffer);\n        changedView.set(new Uint8Array(this.buffer, 0, start));\n        for (i = 0; i < result.length; i++) {\n            const currentPosition = (i == 0) ? start : result[i - 1].position;\n            changedView.set(new Uint8Array(this.buffer, currentPosition, result[i].position - searchPattern.length - currentPosition), currentPosition - i * patternDifference);\n            changedView.set(replacePattern.view, result[i].position - searchPattern.length - i * patternDifference);\n            output.replacePatternPositions.push(result[i].position - searchPattern.length - i * patternDifference);\n        }\n        i--;\n        changedView.set(new Uint8Array(this.buffer, result[i].position, this.length - result[i].position), result[i].position - searchPattern.length + replacePattern.length - i * patternDifference);\n        this.buffer = changedBuffer;\n        this.view = new Uint8Array(this.buffer);\n        output.status = 1;\n        return output;\n    }\n    skipPatterns(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        let result = start;\n        for (let k = 0; k < patterns.length; k++) {\n            const patternLength = patterns[k].length;\n            const equalStart = (backward) ? (result - patternLength) : (result);\n            let equal = true;\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patterns[k].view[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                k = (-1);\n                if (backward) {\n                    result -= patternLength;\n                    if (result <= 0)\n                        return result;\n                }\n                else {\n                    result += patternLength;\n                    if (result >= (start + length))\n                        return result;\n                }\n            }\n        }\n        return result;\n    }\n    skipNotPatterns(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        let result = (-1);\n        for (let i = 0; i < length; i++) {\n            for (let k = 0; k < patterns.length; k++) {\n                const patternLength = patterns[k].length;\n                const equalStart = (backward) ? (start - i - patternLength) : (start + i);\n                let equal = true;\n                for (let j = 0; j < patternLength; j++) {\n                    if (this.view[j + equalStart] != patterns[k].view[j]) {\n                        equal = false;\n                        break;\n                    }\n                }\n                if (equal) {\n                    result = (backward) ? (start - i) : (start + i);\n                    break;\n                }\n            }\n            if (result != (-1)) {\n                break;\n            }\n        }\n        return result;\n    }\n    prepareFindParameters(start = null, length = null, backward = false) {\n        if (start === null) {\n            start = (backward) ? this.length : 0;\n        }\n        if (start > this.length) {\n            start = this.length;\n        }\n        if (backward) {\n            if (length === null) {\n                length = start;\n            }\n            if (length > start) {\n                length = start;\n            }\n        }\n        else {\n            if (length === null) {\n                length = this.length - start;\n            }\n            if (length > (this.length - start)) {\n                length = this.length - start;\n            }\n        }\n        return { start, length, backward };\n    }\n}\n","import { ByteStream } from \"./byte_stream\";\nconst pow2_24 = 16777216;\nexport class SeqStream {\n    constructor(parameters = {}) {\n        this._stream = new ByteStream();\n        this._length = 0;\n        this._start = 0;\n        this.backward = false;\n        this.appendBlock = 0;\n        this.prevLength = 0;\n        this.prevStart = 0;\n        if (\"view\" in parameters) {\n            this.stream = new ByteStream({ view: parameters.view });\n        }\n        else if (\"buffer\" in parameters) {\n            this.stream = new ByteStream({ buffer: parameters.buffer });\n        }\n        else if (\"string\" in parameters) {\n            this.stream = new ByteStream({ string: parameters.string });\n        }\n        else if (\"hexstring\" in parameters) {\n            this.stream = new ByteStream({ hexstring: parameters.hexstring });\n        }\n        else if (\"stream\" in parameters) {\n            this.stream = parameters.stream.slice();\n        }\n        else {\n            this.stream = new ByteStream();\n        }\n        if (\"backward\" in parameters && parameters.backward) {\n            this.backward = parameters.backward;\n            this._start = this.stream.length;\n        }\n        if (\"length\" in parameters && parameters.length > 0) {\n            this._length = parameters.length;\n        }\n        if (\"start\" in parameters && parameters.start && parameters.start > 0) {\n            this._start = parameters.start;\n        }\n        if (\"appendBlock\" in parameters && parameters.appendBlock && parameters.appendBlock > 0) {\n            this.appendBlock = parameters.appendBlock;\n        }\n    }\n    set stream(value) {\n        this._stream = value;\n        this.prevLength = this._length;\n        this._length = value.length;\n        this.prevStart = this._start;\n        this._start = 0;\n    }\n    get stream() {\n        return this._stream;\n    }\n    set length(value) {\n        this.prevLength = this._length;\n        this._length = value;\n    }\n    get length() {\n        if (this.appendBlock) {\n            return this.start;\n        }\n        return this._length;\n    }\n    set start(value) {\n        if (value > this.stream.length)\n            return;\n        this.prevStart = this._start;\n        this.prevLength = this._length;\n        this._length -= (this.backward) ? (this._start - value) : (value - this._start);\n        this._start = value;\n    }\n    get start() {\n        return this._start;\n    }\n    get buffer() {\n        return this._stream.buffer.slice(0, this._length);\n    }\n    resetPosition() {\n        this._start = this.prevStart;\n        this._length = this.prevLength;\n    }\n    findPattern(pattern, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const result = this.stream.findPattern(pattern, this.start, this.length, this.backward);\n        if (result == (-1))\n            return result;\n        if (this.backward) {\n            if (result < (this.start - pattern.length - gap)) {\n                return (-1);\n            }\n        }\n        else {\n            if (result > (this.start + pattern.length + gap)) {\n                return (-1);\n            }\n        }\n        this.start = result;\n        return result;\n    }\n    findFirstIn(patterns, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const result = this.stream.findFirstIn(patterns, this.start, this.length, this.backward);\n        if (result.id == (-1))\n            return result;\n        if (this.backward) {\n            if (result.position < (this.start - patterns[result.id].length - gap)) {\n                return {\n                    id: (-1),\n                    position: (this.backward) ? 0 : (this.start + this.length)\n                };\n            }\n        }\n        else {\n            if (result.position > (this.start + patterns[result.id].length + gap)) {\n                return {\n                    id: (-1),\n                    position: (this.backward) ? 0 : (this.start + this.length)\n                };\n            }\n        }\n        this.start = result.position;\n        return result;\n    }\n    findAllIn(patterns) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.findAllIn(patterns, start, this.length);\n    }\n    findFirstNotIn(patterns, gap = null) {\n        if ((gap == null) || (gap > this._length)) {\n            gap = this._length;\n        }\n        const result = this._stream.findFirstNotIn(patterns, this._start, this._length, this.backward);\n        if ((result.left.id == (-1)) && (result.right.id == (-1))) {\n            return result;\n        }\n        if (this.backward) {\n            if (result.right.id != (-1)) {\n                if (result.right.position < (this._start - patterns[result.right.id].length - gap)) {\n                    return {\n                        left: {\n                            id: (-1),\n                            position: this._start\n                        },\n                        right: {\n                            id: (-1),\n                            position: 0\n                        },\n                        value: new ByteStream()\n                    };\n                }\n            }\n        }\n        else {\n            if (result.left.id != (-1)) {\n                if (result.left.position > (this._start + patterns[result.left.id].length + gap)) {\n                    return {\n                        left: {\n                            id: (-1),\n                            position: this._start\n                        },\n                        right: {\n                            id: (-1),\n                            position: 0\n                        },\n                        value: new ByteStream()\n                    };\n                }\n            }\n        }\n        if (this.backward) {\n            if (result.left.id == (-1)) {\n                this.start = 0;\n            }\n            else {\n                this.start = result.left.position;\n            }\n        }\n        else {\n            if (result.right.id == (-1)) {\n                this.start = (this._start + this._length);\n            }\n            else {\n                this.start = result.right.position;\n            }\n        }\n        return result;\n    }\n    findAllNotIn(patterns) {\n        const start = (this.backward) ? (this._start - this._length) : this._start;\n        return this._stream.findAllNotIn(patterns, start, this._length);\n    }\n    findFirstSequence(patterns, length = null, gap = null) {\n        if ((length == null) || (length > this._length)) {\n            length = this._length;\n        }\n        if ((gap == null) || (gap > length)) {\n            gap = length;\n        }\n        const result = this._stream.findFirstSequence(patterns, this._start, length, this.backward);\n        if (result.value.length == 0) {\n            return result;\n        }\n        if (this.backward) {\n            if (result.position < (this._start - result.value.length - gap)) {\n                return {\n                    position: (-1),\n                    value: new ByteStream()\n                };\n            }\n        }\n        else {\n            if (result.position > (this._start + result.value.length + gap)) {\n                return {\n                    position: (-1),\n                    value: new ByteStream()\n                };\n            }\n        }\n        this.start = result.position;\n        return result;\n    }\n    findAllSequences(patterns) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.findAllSequences(patterns, start, this.length);\n    }\n    findPairedPatterns(leftPattern, rightPattern, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        const result = this.stream.findPairedPatterns(leftPattern, rightPattern, start, this.length);\n        if (result.length) {\n            if (this.backward) {\n                if (result[0].right < (this.start - rightPattern.length - gap)) {\n                    return [];\n                }\n            }\n            else {\n                if (result[0].left > (this.start + leftPattern.length + gap)) {\n                    return [];\n                }\n            }\n        }\n        return result;\n    }\n    findPairedArrays(leftPatterns, rightPatterns, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        const result = this.stream.findPairedArrays(leftPatterns, rightPatterns, start, this.length);\n        if (result.length) {\n            if (this.backward) {\n                if (result[0].right.position < (this.start - rightPatterns[result[0].right.id].length - gap)) {\n                    return [];\n                }\n            }\n            else {\n                if (result[0].left.position > (this.start + leftPatterns[result[0].left.id].length + gap)) {\n                    return [];\n                }\n            }\n        }\n        return result;\n    }\n    replacePattern(searchPattern, replacePattern) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.replacePattern(searchPattern, replacePattern, start, this.length);\n    }\n    skipPatterns(patterns) {\n        const result = this.stream.skipPatterns(patterns, this.start, this.length, this.backward);\n        this.start = result;\n        return result;\n    }\n    skipNotPatterns(patterns) {\n        const result = this.stream.skipNotPatterns(patterns, this.start, this.length, this.backward);\n        if (result == (-1))\n            return (-1);\n        this.start = result;\n        return result;\n    }\n    append(stream) {\n        this.beforeAppend(stream.length);\n        this._stream.view.set(stream.view, this._start);\n        this._length += (stream.length * 2);\n        this.start = (this._start + stream.length);\n        this.prevLength -= (stream.length * 2);\n    }\n    appendView(view) {\n        this.beforeAppend(view.length);\n        this._stream.view.set(view, this._start);\n        this._length += (view.length * 2);\n        this.start = (this._start + view.length);\n        this.prevLength -= (view.length * 2);\n    }\n    appendChar(char) {\n        this.beforeAppend(1);\n        this._stream.view[this._start] = char;\n        this._length += 2;\n        this.start = (this._start + 1);\n        this.prevLength -= 2;\n    }\n    appendUint16(number) {\n        this.beforeAppend(2);\n        const value = new Uint16Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this.stream.view[this._start] = view[1];\n        this._stream.view[this._start + 1] = view[0];\n        this._length += 4;\n        this.start = this._start + 2;\n        this.prevLength -= 4;\n    }\n    appendUint24(number) {\n        this.beforeAppend(3);\n        const value = new Uint32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[2];\n        this._stream.view[this._start + 1] = view[1];\n        this._stream.view[this._start + 2] = view[0];\n        this._length += 6;\n        this.start = (this._start + 3);\n        this.prevLength -= 6;\n    }\n    appendUint32(number) {\n        this.beforeAppend(4);\n        const value = new Uint32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[3];\n        this._stream.view[this._start + 1] = view[2];\n        this._stream.view[this._start + 2] = view[1];\n        this._stream.view[this._start + 3] = view[0];\n        this._length += 8;\n        this.start = (this._start + 4);\n        this.prevLength -= 8;\n    }\n    appendInt16(number) {\n        this.beforeAppend(2);\n        const value = new Int16Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[1];\n        this._stream.view[this._start + 1] = view[0];\n        this._length += 4;\n        this.start = (this._start + 2);\n        this.prevLength -= 4;\n    }\n    appendInt32(number) {\n        this.beforeAppend(4);\n        const value = new Int32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[3];\n        this._stream.view[this._start + 1] = view[2];\n        this._stream.view[this._start + 2] = view[1];\n        this._stream.view[this._start + 3] = view[0];\n        this._length += 8;\n        this.start = (this._start + 4);\n        this.prevLength -= 8;\n    }\n    getBlock(size, changeLength = true) {\n        if (this._length <= 0) {\n            return new Uint8Array(0);\n        }\n        if (this._length < size) {\n            size = this._length;\n        }\n        let result;\n        if (this.backward) {\n            const view = this._stream.view.subarray(this._length - size, this._length);\n            result = new Uint8Array(size);\n            for (let i = 0; i < size; i++) {\n                result[size - 1 - i] = view[i];\n            }\n        }\n        else {\n            result = this._stream.view.subarray(this._start, this._start + size);\n        }\n        if (changeLength) {\n            this.start += ((this.backward) ? ((-1) * size) : size);\n        }\n        return result;\n    }\n    getUint16(changeLength = true) {\n        const block = this.getBlock(2, changeLength);\n        if (block.length < 2)\n            return 0;\n        return (block[0] << 8) | block[1];\n    }\n    getInt16(changeLength = true) {\n        const num = this.getUint16(changeLength);\n        const negative = 0x8000;\n        if (num & negative) {\n            return -(negative - (num ^ negative));\n        }\n        return num;\n    }\n    getUint24(changeLength = true) {\n        const block = this.getBlock(4, changeLength);\n        if (block.length < 3)\n            return 0;\n        return (block[0] << 16) |\n            (block[1] << 8) |\n            block[2];\n    }\n    getUint32(changeLength = true) {\n        const block = this.getBlock(4, changeLength);\n        if (block.length < 4)\n            return 0;\n        return (block[0] * pow2_24) +\n            (block[1] << 16) +\n            (block[2] << 8) +\n            block[3];\n    }\n    getInt32(changeLength = true) {\n        const num = this.getUint32(changeLength);\n        const negative = 0x80000000;\n        if (num & negative) {\n            return -(negative - (num ^ negative));\n        }\n        return num;\n    }\n    beforeAppend(size) {\n        if ((this._start + size) > this._stream.length) {\n            if (size > this.appendBlock) {\n                this.appendBlock = size + SeqStream.APPEND_BLOCK;\n            }\n            this._stream.realloc(this._stream.length + this.appendBlock);\n        }\n    }\n}\nSeqStream.APPEND_BLOCK = 1000;\n","/**\n * Assertion helpers\n * @module\n */\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n// copied from utils\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\nexport { anumber, abytes, ahash, aexists, aoutput };\n//# sourceMappingURL=_assert.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n/** The rotate right (circular right shift) operation for uint32 */\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n/** The rotate left (circular left shift) operation for uint32 */\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('utf8ToBytes expected string, got ' + typeof str);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return crypto.randomBytes(bytesLength);\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { aexists, aoutput } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n/**\n * Merkle-Damgard hash utils.\n * @module\n */\n/**\n * Polyfill for Safari 14\n */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotl, wrapConstructor } from './utils.js';\n/**\n * SHA1 (RFC 3174) legacy hash function.\n * @module\n */\n// Initial state\nconst SHA1_IV = /* @__PURE__ */ new Uint32Array([\n    0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA1 extends HashMD {\n    constructor() {\n        super(64, 20, 8, false);\n        this.A = SHA1_IV[0] | 0;\n        this.B = SHA1_IV[1] | 0;\n        this.C = SHA1_IV[2] | 0;\n        this.D = SHA1_IV[3] | 0;\n        this.E = SHA1_IV[4] | 0;\n    }\n    get() {\n        const { A, B, C, D, E } = this;\n        return [A, B, C, D, E];\n    }\n    set(A, B, C, D, E) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA1_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 80; i++)\n            SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n        // Compression function main loop, 80 rounds\n        let { A, B, C, D, E } = this;\n        for (let i = 0; i < 80; i++) {\n            let F, K;\n            if (i < 20) {\n                F = Chi(B, C, D);\n                K = 0x5a827999;\n            }\n            else if (i < 40) {\n                F = B ^ C ^ D;\n                K = 0x6ed9eba1;\n            }\n            else if (i < 60) {\n                F = Maj(B, C, D);\n                K = 0x8f1bbcdc;\n            }\n            else {\n                F = B ^ C ^ D;\n                K = 0xca62c1d6;\n            }\n            const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\n            E = D;\n            D = C;\n            C = rotl(B, 30);\n            B = A;\n            A = T;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        this.set(A, B, C, D, E);\n    }\n    roundClean() {\n        SHA1_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\nexport const sha1 = /* @__PURE__ */ wrapConstructor(() => new SHA1());\n//# sourceMappingURL=sha1.js.map","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/** SHA2-256 hash function */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n/**\n * BigUint64Array is too slow as per 2024, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n */\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\n/** SHA2-512 hash function. */\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\n/** SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\n/** SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\n/** SHA2-384 hash function. */\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","/*!\n * Copyright (c) 2014, GlobalSign\n * Copyright (c) 2015-2019, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the {organization} nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\nimport * as asn1js from 'asn1js';\nimport * as pvtsutils from 'pvtsutils';\nimport { BufferSourceConverter } from 'pvtsutils';\nimport * as pvutils from 'pvutils';\nimport * as bs from 'bytestreamjs';\nimport { sha1 } from '@noble/hashes/sha1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512, sha384 } from '@noble/hashes/sha512';\n\nconst EMPTY_BUFFER = new ArrayBuffer(0);\nconst EMPTY_STRING = \"\";\n\nclass ArgumentError extends TypeError {\n    constructor() {\n        super(...arguments);\n        this.name = ArgumentError.NAME;\n    }\n    static isType(value, type) {\n        if (typeof type === \"string\") {\n            if (type === \"Array\" && Array.isArray(value)) {\n                return true;\n            }\n            else if (type === \"ArrayBuffer\" && value instanceof ArrayBuffer) {\n                return true;\n            }\n            else if (type === \"ArrayBufferView\" && ArrayBuffer.isView(value)) {\n                return true;\n            }\n            else if (typeof value === type) {\n                return true;\n            }\n        }\n        else if (value instanceof type) {\n            return true;\n        }\n        return false;\n    }\n    static assert(value, name, ...types) {\n        for (const type of types) {\n            if (this.isType(value, type)) {\n                return;\n            }\n        }\n        const typeNames = types.map(o => o instanceof Function && \"name\" in o ? o.name : `${o}`);\n        throw new ArgumentError(`Parameter '${name}' is not of type ${typeNames.length > 1 ? `(${typeNames.join(\" or \")})` : typeNames[0]}`);\n    }\n}\nArgumentError.NAME = \"ArgumentError\";\n\nclass ParameterError extends TypeError {\n    static assert(...args) {\n        let target = null;\n        let params;\n        let fields;\n        if (typeof args[0] === \"string\") {\n            target = args[0];\n            params = args[1];\n            fields = args.slice(2);\n        }\n        else {\n            params = args[0];\n            fields = args.slice(1);\n        }\n        ArgumentError.assert(params, \"parameters\", \"object\");\n        for (const field of fields) {\n            const value = params[field];\n            if (value === undefined || value === null) {\n                throw new ParameterError(field, target);\n            }\n        }\n    }\n    static assertEmpty(value, name, target) {\n        if (value === undefined || value === null) {\n            throw new ParameterError(name, target);\n        }\n    }\n    constructor(field, target = null, message) {\n        super();\n        this.name = ParameterError.NAME;\n        this.field = field;\n        if (target) {\n            this.target = target;\n        }\n        if (message) {\n            this.message = message;\n        }\n        else {\n            this.message = `Absent mandatory parameter '${field}' ${target ? ` in '${target}'` : EMPTY_STRING}`;\n        }\n    }\n}\nParameterError.NAME = \"ParameterError\";\n\nclass AsnError extends Error {\n    static assertSchema(asn1, target) {\n        if (!asn1.verified) {\n            throw new Error(`Object's schema was not verified against input data for ${target}`);\n        }\n    }\n    static assert(asn, target) {\n        if (asn.offset === -1) {\n            throw new AsnError(`Error during parsing of ASN.1 data. Data is not correct for '${target}'.`);\n        }\n    }\n    constructor(message) {\n        super(message);\n        this.name = \"AsnError\";\n    }\n}\n\nclass PkiObject {\n    static blockName() {\n        return this.CLASS_NAME;\n    }\n    static fromBER(raw) {\n        const asn1 = asn1js.fromBER(raw);\n        AsnError.assert(asn1, this.name);\n        try {\n            return new this({ schema: asn1.result });\n        }\n        catch (e) {\n            throw new AsnError(`Cannot create '${this.CLASS_NAME}' from ASN.1 object`);\n        }\n    }\n    static defaultValues(memberName) {\n        throw new Error(`Invalid member name for ${this.CLASS_NAME} class: ${memberName}`);\n    }\n    static schema(parameters = {}) {\n        throw new Error(`Method '${this.CLASS_NAME}.schema' should be overridden`);\n    }\n    get className() {\n        return this.constructor.CLASS_NAME;\n    }\n    toString(encoding = \"hex\") {\n        let schema;\n        try {\n            schema = this.toSchema();\n        }\n        catch {\n            schema = this.toSchema(true);\n        }\n        return pvtsutils.Convert.ToString(schema.toBER(), encoding);\n    }\n}\nPkiObject.CLASS_NAME = \"PkiObject\";\n\nfunction stringPrep(inputString) {\n    let isSpace = false;\n    let cutResult = EMPTY_STRING;\n    const result = inputString.trim();\n    for (let i = 0; i < result.length; i++) {\n        if (result.charCodeAt(i) === 32) {\n            if (isSpace === false)\n                isSpace = true;\n        }\n        else {\n            if (isSpace) {\n                cutResult += \" \";\n                isSpace = false;\n            }\n            cutResult += result[i];\n        }\n    }\n    return cutResult.toLowerCase();\n}\n\nconst TYPE$5 = \"type\";\nconst VALUE$6 = \"value\";\nclass AttributeTypeAndValue extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils.getParametersValue(parameters, TYPE$5, AttributeTypeAndValue.defaultValues(TYPE$5));\n        this.value = pvutils.getParametersValue(parameters, VALUE$6, AttributeTypeAndValue.defaultValues(VALUE$6));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$5:\n                return EMPTY_STRING;\n            case VALUE$6:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.type || EMPTY_STRING) }),\n                new asn1js.Any({ name: (names.value || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            TYPE$5,\n            \"typeValue\"\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeTypeAndValue.schema({\n            names: {\n                type: TYPE$5,\n                value: \"typeValue\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.type.valueBlock.toString();\n        this.value = asn1.result.typeValue;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.type }),\n                this.value\n            ]\n        }));\n    }\n    toJSON() {\n        const _object = {\n            type: this.type\n        };\n        if (Object.keys(this.value).length !== 0) {\n            _object.value = (this.value).toJSON();\n        }\n        else {\n            _object.value = this.value;\n        }\n        return _object;\n    }\n    isEqual(compareTo) {\n        const stringBlockNames = [\n            asn1js.Utf8String.blockName(),\n            asn1js.BmpString.blockName(),\n            asn1js.UniversalString.blockName(),\n            asn1js.NumericString.blockName(),\n            asn1js.PrintableString.blockName(),\n            asn1js.TeletexString.blockName(),\n            asn1js.VideotexString.blockName(),\n            asn1js.IA5String.blockName(),\n            asn1js.GraphicString.blockName(),\n            asn1js.VisibleString.blockName(),\n            asn1js.GeneralString.blockName(),\n            asn1js.CharacterString.blockName()\n        ];\n        if (compareTo instanceof ArrayBuffer) {\n            return pvtsutils.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo);\n        }\n        if (compareTo.constructor.blockName() === AttributeTypeAndValue.blockName()) {\n            if (this.type !== compareTo.type)\n                return false;\n            const isStringPair = [false, false];\n            const thisName = this.value.constructor.blockName();\n            for (const name of stringBlockNames) {\n                if (thisName === name) {\n                    isStringPair[0] = true;\n                }\n                if (compareTo.value.constructor.blockName() === name) {\n                    isStringPair[1] = true;\n                }\n            }\n            if (isStringPair[0] !== isStringPair[1]) {\n                return false;\n            }\n            const isString = (isStringPair[0] && isStringPair[1]);\n            if (isString) {\n                const value1 = stringPrep(this.value.valueBlock.value);\n                const value2 = stringPrep(compareTo.value.valueBlock.value);\n                if (value1.localeCompare(value2) !== 0)\n                    return false;\n            }\n            else {\n                if (!pvtsutils.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo.value.valueBeforeDecodeView))\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\nAttributeTypeAndValue.CLASS_NAME = \"AttributeTypeAndValue\";\n\nconst TYPE_AND_VALUES = \"typesAndValues\";\nconst VALUE_BEFORE_DECODE = \"valueBeforeDecode\";\nconst RDN = \"RDN\";\nclass RelativeDistinguishedNames extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.typesAndValues = pvutils.getParametersValue(parameters, TYPE_AND_VALUES, RelativeDistinguishedNames.defaultValues(TYPE_AND_VALUES));\n        this.valueBeforeDecode = pvutils.getParametersValue(parameters, VALUE_BEFORE_DECODE, RelativeDistinguishedNames.defaultValues(VALUE_BEFORE_DECODE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE_AND_VALUES:\n                return [];\n            case VALUE_BEFORE_DECODE:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE_AND_VALUES:\n                return (memberValue.length === 0);\n            case VALUE_BEFORE_DECODE:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.repeatedSequence || EMPTY_STRING),\n                    value: new asn1js.Set({\n                        value: [\n                            new asn1js.Repeated({\n                                name: (names.repeatedSet || EMPTY_STRING),\n                                value: AttributeTypeAndValue.schema(names.typeAndValue || {})\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            RDN,\n            TYPE_AND_VALUES\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, RelativeDistinguishedNames.schema({\n            names: {\n                blockName: RDN,\n                repeatedSet: TYPE_AND_VALUES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (TYPE_AND_VALUES in asn1.result) {\n            this.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\n        }\n        this.valueBeforeDecode = asn1.result.RDN.valueBeforeDecodeView.slice().buffer;\n    }\n    toSchema() {\n        if (this.valueBeforeDecode.byteLength === 0) {\n            return (new asn1js.Sequence({\n                value: [new asn1js.Set({\n                        value: Array.from(this.typesAndValues, o => o.toSchema())\n                    })]\n            }));\n        }\n        const asn1 = asn1js.fromBER(this.valueBeforeDecode);\n        AsnError.assert(asn1, \"RelativeDistinguishedNames\");\n        if (!(asn1.result instanceof asn1js.Sequence)) {\n            throw new Error(\"ASN.1 result should be SEQUENCE\");\n        }\n        return asn1.result;\n    }\n    toJSON() {\n        return {\n            typesAndValues: Array.from(this.typesAndValues, o => o.toJSON())\n        };\n    }\n    isEqual(compareTo) {\n        if (compareTo instanceof RelativeDistinguishedNames) {\n            if (this.typesAndValues.length !== compareTo.typesAndValues.length)\n                return false;\n            for (const [index, typeAndValue] of this.typesAndValues.entries()) {\n                if (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\n                    return false;\n            }\n            return true;\n        }\n        if (compareTo instanceof ArrayBuffer) {\n            return pvutils.isEqualBuffer(this.valueBeforeDecode, compareTo);\n        }\n        return false;\n    }\n}\nRelativeDistinguishedNames.CLASS_NAME = \"RelativeDistinguishedNames\";\n\nconst TYPE$4 = \"type\";\nconst VALUE$5 = \"value\";\nfunction builtInStandardAttributes(parameters = {}, optional = false) {\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\n    return (new asn1js.Sequence({\n        optional,\n        value: [\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 2,\n                    tagNumber: 1\n                },\n                name: (names.country_name || EMPTY_STRING),\n                value: [\n                    new asn1js.Choice({\n                        value: [\n                            new asn1js.NumericString(),\n                            new asn1js.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 2,\n                    tagNumber: 2\n                },\n                name: (names.administration_domain_name || EMPTY_STRING),\n                value: [\n                    new asn1js.Choice({\n                        value: [\n                            new asn1js.NumericString(),\n                            new asn1js.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                name: (names.network_address || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                name: (names.terminal_identifier || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                name: (names.private_domain_name || EMPTY_STRING),\n                value: [\n                    new asn1js.Choice({\n                        value: [\n                            new asn1js.NumericString(),\n                            new asn1js.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                name: (names.organization_name || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js.Primitive({\n                optional: true,\n                name: (names.numeric_user_identifier || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 4\n                },\n                isHexOnly: true\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                name: (names.personal_name || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 5\n                },\n                value: [\n                    new asn1js.Primitive({\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 0\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 1\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 2\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 3\n                        },\n                        isHexOnly: true\n                    })\n                ]\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                name: (names.organizational_unit_names || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 6\n                },\n                value: [\n                    new asn1js.Repeated({\n                        value: new asn1js.PrintableString()\n                    })\n                ]\n            })\n        ]\n    }));\n}\nfunction builtInDomainDefinedAttributes(optional = false) {\n    return (new asn1js.Sequence({\n        optional,\n        value: [\n            new asn1js.PrintableString(),\n            new asn1js.PrintableString()\n        ]\n    }));\n}\nfunction extensionAttributes(optional = false) {\n    return (new asn1js.Set({\n        optional,\n        value: [\n            new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                isHexOnly: true\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [new asn1js.Any()]\n            })\n        ]\n    }));\n}\nclass GeneralName extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils.getParametersValue(parameters, TYPE$4, GeneralName.defaultValues(TYPE$4));\n        this.value = pvutils.getParametersValue(parameters, VALUE$5, GeneralName.defaultValues(VALUE$5));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$4:\n                return 9;\n            case VALUE$5:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE$4:\n                return (memberValue === GeneralName.defaultValues(memberName));\n            case VALUE$5:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            value: [\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        new asn1js.ObjectIdentifier(),\n                        new asn1js.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [new asn1js.Any()]\n                        })\n                    ]\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        builtInStandardAttributes((names.builtInStandardAttributes || {}), false),\n                        builtInDomainDefinedAttributes(true),\n                        extensionAttributes(true)\n                    ]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [RelativeDistinguishedNames.schema(names.directoryName || {})]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 5\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        new asn1js.Constructed({\n                            optional: true,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [\n                                new asn1js.Choice({\n                                    value: [\n                                        new asn1js.TeletexString(),\n                                        new asn1js.PrintableString(),\n                                        new asn1js.UniversalString(),\n                                        new asn1js.Utf8String(),\n                                        new asn1js.BmpString()\n                                    ]\n                                })\n                            ]\n                        }),\n                        new asn1js.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [\n                                new asn1js.Choice({\n                                    value: [\n                                        new asn1js.TeletexString(),\n                                        new asn1js.PrintableString(),\n                                        new asn1js.UniversalString(),\n                                        new asn1js.Utf8String(),\n                                        new asn1js.BmpString()\n                                    ]\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 6\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 7\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 8\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            \"blockName\",\n            \"otherName\",\n            \"rfc822Name\",\n            \"dNSName\",\n            \"x400Address\",\n            \"directoryName\",\n            \"ediPartyName\",\n            \"uniformResourceIdentifier\",\n            \"iPAddress\",\n            \"registeredID\"\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, GeneralName.schema({\n            names: {\n                blockName: \"blockName\",\n                otherName: \"otherName\",\n                rfc822Name: \"rfc822Name\",\n                dNSName: \"dNSName\",\n                x400Address: \"x400Address\",\n                directoryName: {\n                    names: {\n                        blockName: \"directoryName\"\n                    }\n                },\n                ediPartyName: \"ediPartyName\",\n                uniformResourceIdentifier: \"uniformResourceIdentifier\",\n                iPAddress: \"iPAddress\",\n                registeredID: \"registeredID\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.blockName.idBlock.tagNumber;\n        switch (this.type) {\n            case 0:\n                this.value = asn1.result.blockName;\n                break;\n            case 1:\n            case 2:\n            case 6:\n                {\n                    const value = asn1.result.blockName;\n                    value.idBlock.tagClass = 1;\n                    value.idBlock.tagNumber = 22;\n                    const valueBER = value.toBER(false);\n                    const asnValue = asn1js.fromBER(valueBER);\n                    AsnError.assert(asnValue, \"GeneralName value\");\n                    this.value = asnValue.result.valueBlock.value;\n                }\n                break;\n            case 3:\n                this.value = asn1.result.blockName;\n                break;\n            case 4:\n                this.value = new RelativeDistinguishedNames({ schema: asn1.result.directoryName });\n                break;\n            case 5:\n                this.value = asn1.result.ediPartyName;\n                break;\n            case 7:\n                this.value = new asn1js.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\n                break;\n            case 8:\n                {\n                    const value = asn1.result.blockName;\n                    value.idBlock.tagClass = 1;\n                    value.idBlock.tagNumber = 6;\n                    const valueBER = value.toBER(false);\n                    const asnValue = asn1js.fromBER(valueBER);\n                    AsnError.assert(asnValue, \"GeneralName registeredID\");\n                    this.value = asnValue.result.valueBlock.toString();\n                }\n                break;\n        }\n    }\n    toSchema() {\n        switch (this.type) {\n            case 0:\n            case 3:\n            case 5:\n                return new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: this.type\n                    },\n                    value: [\n                        this.value\n                    ]\n                });\n            case 1:\n            case 2:\n            case 6:\n                {\n                    const value = new asn1js.IA5String({ value: this.value });\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            case 4:\n                return new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    value: [this.value.toSchema()]\n                });\n            case 7:\n                {\n                    const value = this.value;\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            case 8:\n                {\n                    const value = new asn1js.ObjectIdentifier({ value: this.value });\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            default:\n                return GeneralName.schema();\n        }\n    }\n    toJSON() {\n        const _object = {\n            type: this.type,\n            value: EMPTY_STRING\n        };\n        if ((typeof this.value) === \"string\")\n            _object.value = this.value;\n        else {\n            try {\n                _object.value = this.value.toJSON();\n            }\n            catch (ex) {\n            }\n        }\n        return _object;\n    }\n}\nGeneralName.CLASS_NAME = \"GeneralName\";\n\nconst ACCESS_METHOD = \"accessMethod\";\nconst ACCESS_LOCATION = \"accessLocation\";\nconst CLEAR_PROPS$1v = [\n    ACCESS_METHOD,\n    ACCESS_LOCATION,\n];\nclass AccessDescription extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.accessMethod = pvutils.getParametersValue(parameters, ACCESS_METHOD, AccessDescription.defaultValues(ACCESS_METHOD));\n        this.accessLocation = pvutils.getParametersValue(parameters, ACCESS_LOCATION, AccessDescription.defaultValues(ACCESS_LOCATION));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACCESS_METHOD:\n                return EMPTY_STRING;\n            case ACCESS_LOCATION:\n                return new GeneralName();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.accessMethod || EMPTY_STRING) }),\n                GeneralName.schema(names.accessLocation || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1v);\n        const asn1 = asn1js.compareSchema(schema, schema, AccessDescription.schema({\n            names: {\n                accessMethod: ACCESS_METHOD,\n                accessLocation: {\n                    names: {\n                        blockName: ACCESS_LOCATION\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.accessMethod = asn1.result.accessMethod.valueBlock.toString();\n        this.accessLocation = new GeneralName({ schema: asn1.result.accessLocation });\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.accessMethod }),\n                this.accessLocation.toSchema()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            accessMethod: this.accessMethod,\n            accessLocation: this.accessLocation.toJSON()\n        };\n    }\n}\nAccessDescription.CLASS_NAME = \"AccessDescription\";\n\nconst SECONDS = \"seconds\";\nconst MILLIS = \"millis\";\nconst MICROS = \"micros\";\nclass Accuracy extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (SECONDS in parameters) {\n            this.seconds = pvutils.getParametersValue(parameters, SECONDS, Accuracy.defaultValues(SECONDS));\n        }\n        if (MILLIS in parameters) {\n            this.millis = pvutils.getParametersValue(parameters, MILLIS, Accuracy.defaultValues(MILLIS));\n        }\n        if (MICROS in parameters) {\n            this.micros = pvutils.getParametersValue(parameters, MICROS, Accuracy.defaultValues(MICROS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SECONDS:\n            case MILLIS:\n            case MICROS:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SECONDS:\n            case MILLIS:\n            case MICROS:\n                return (memberValue === Accuracy.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: true,\n            value: [\n                new asn1js.Integer({\n                    optional: true,\n                    name: (names.seconds || EMPTY_STRING)\n                }),\n                new asn1js.Primitive({\n                    name: (names.millis || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.micros || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            SECONDS,\n            MILLIS,\n            MICROS,\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, Accuracy.schema({\n            names: {\n                seconds: SECONDS,\n                millis: MILLIS,\n                micros: MICROS,\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (\"seconds\" in asn1.result) {\n            this.seconds = asn1.result.seconds.valueBlock.valueDec;\n        }\n        if (\"millis\" in asn1.result) {\n            const intMillis = new asn1js.Integer({ valueHex: asn1.result.millis.valueBlock.valueHex });\n            this.millis = intMillis.valueBlock.valueDec;\n        }\n        if (\"micros\" in asn1.result) {\n            const intMicros = new asn1js.Integer({ valueHex: asn1.result.micros.valueBlock.valueHex });\n            this.micros = intMicros.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.seconds !== undefined)\n            outputArray.push(new asn1js.Integer({ value: this.seconds }));\n        if (this.millis !== undefined) {\n            const intMillis = new asn1js.Integer({ value: this.millis });\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: intMillis.valueBlock.valueHexView\n            }));\n        }\n        if (this.micros !== undefined) {\n            const intMicros = new asn1js.Integer({ value: this.micros });\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: intMicros.valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const _object = {};\n        if (this.seconds !== undefined)\n            _object.seconds = this.seconds;\n        if (this.millis !== undefined)\n            _object.millis = this.millis;\n        if (this.micros !== undefined)\n            _object.micros = this.micros;\n        return _object;\n    }\n}\nAccuracy.CLASS_NAME = \"Accuracy\";\n\nconst ALGORITHM_ID = \"algorithmId\";\nconst ALGORITHM_PARAMS = \"algorithmParams\";\nconst ALGORITHM$2 = \"algorithm\";\nconst PARAMS = \"params\";\nconst CLEAR_PROPS$1u = [\n    ALGORITHM$2,\n    PARAMS\n];\nclass AlgorithmIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.algorithmId = pvutils.getParametersValue(parameters, ALGORITHM_ID, AlgorithmIdentifier.defaultValues(ALGORITHM_ID));\n        if (ALGORITHM_PARAMS in parameters) {\n            this.algorithmParams = pvutils.getParametersValue(parameters, ALGORITHM_PARAMS, AlgorithmIdentifier.defaultValues(ALGORITHM_PARAMS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM_ID:\n                return EMPTY_STRING;\n            case ALGORITHM_PARAMS:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ALGORITHM_ID:\n                return (memberValue === EMPTY_STRING);\n            case ALGORITHM_PARAMS:\n                return (memberValue instanceof asn1js.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: (names.optional || false),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.algorithmIdentifier || EMPTY_STRING) }),\n                new asn1js.Any({ name: (names.algorithmParams || EMPTY_STRING), optional: true })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1u);\n        const asn1 = asn1js.compareSchema(schema, schema, AlgorithmIdentifier.schema({\n            names: {\n                algorithmIdentifier: ALGORITHM$2,\n                algorithmParams: PARAMS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithmId = asn1.result.algorithm.valueBlock.toString();\n        if (PARAMS in asn1.result) {\n            this.algorithmParams = asn1.result.params;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));\n        if (this.algorithmParams && !(this.algorithmParams instanceof asn1js.Any)) {\n            outputArray.push(this.algorithmParams);\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {\n            algorithmId: this.algorithmId\n        };\n        if (this.algorithmParams && !(this.algorithmParams instanceof asn1js.Any)) {\n            object.algorithmParams = this.algorithmParams.toJSON();\n        }\n        return object;\n    }\n    isEqual(algorithmIdentifier) {\n        if (!(algorithmIdentifier instanceof AlgorithmIdentifier)) {\n            return false;\n        }\n        if (this.algorithmId !== algorithmIdentifier.algorithmId) {\n            return false;\n        }\n        if (this.algorithmParams) {\n            if (algorithmIdentifier.algorithmParams) {\n                return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\n            }\n            return false;\n        }\n        if (algorithmIdentifier.algorithmParams) {\n            return false;\n        }\n        return true;\n    }\n}\nAlgorithmIdentifier.CLASS_NAME = \"AlgorithmIdentifier\";\n\nconst ALT_NAMES = \"altNames\";\nconst CLEAR_PROPS$1t = [\n    ALT_NAMES\n];\nclass AltName extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.altNames = pvutils.getParametersValue(parameters, ALT_NAMES, AltName.defaultValues(ALT_NAMES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALT_NAMES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.altNames || EMPTY_STRING),\n                    value: GeneralName.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1t);\n        const asn1 = asn1js.compareSchema(schema, schema, AltName.schema({\n            names: {\n                altNames: ALT_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (ALT_NAMES in asn1.result) {\n            this.altNames = Array.from(asn1.result.altNames, element => new GeneralName({ schema: element }));\n        }\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.altNames, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            altNames: Array.from(this.altNames, o => o.toJSON())\n        };\n    }\n}\nAltName.CLASS_NAME = \"AltName\";\n\nconst TYPE$3 = \"type\";\nconst VALUES$1 = \"values\";\nconst CLEAR_PROPS$1s = [\n    TYPE$3,\n    VALUES$1\n];\nclass Attribute extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils.getParametersValue(parameters, TYPE$3, Attribute.defaultValues(TYPE$3));\n        this.values = pvutils.getParametersValue(parameters, VALUES$1, Attribute.defaultValues(VALUES$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$3:\n                return EMPTY_STRING;\n            case VALUES$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE$3:\n                return (memberValue === EMPTY_STRING);\n            case VALUES$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.type || EMPTY_STRING) }),\n                new asn1js.Set({\n                    name: (names.setName || EMPTY_STRING),\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.values || EMPTY_STRING),\n                            value: new asn1js.Any()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1s);\n        const asn1 = asn1js.compareSchema(schema, schema, Attribute.schema({\n            names: {\n                type: TYPE$3,\n                values: VALUES$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.type.valueBlock.toString();\n        this.values = asn1.result.values;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.type }),\n                new asn1js.Set({\n                    value: this.values\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            values: Array.from(this.values, o => o.toJSON())\n        };\n    }\n}\nAttribute.CLASS_NAME = \"Attribute\";\n\nconst NOT_BEFORE_TIME = \"notBeforeTime\";\nconst NOT_AFTER_TIME = \"notAfterTime\";\nconst CLEAR_PROPS$1r = [\n    NOT_BEFORE_TIME,\n    NOT_AFTER_TIME,\n];\nclass AttCertValidityPeriod extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.notBeforeTime = pvutils.getParametersValue(parameters, NOT_BEFORE_TIME, AttCertValidityPeriod.defaultValues(NOT_BEFORE_TIME));\n        this.notAfterTime = pvutils.getParametersValue(parameters, NOT_AFTER_TIME, AttCertValidityPeriod.defaultValues(NOT_AFTER_TIME));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case NOT_BEFORE_TIME:\n            case NOT_AFTER_TIME:\n                return new Date(0, 0, 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.GeneralizedTime({ name: (names.notBeforeTime || EMPTY_STRING) }),\n                new asn1js.GeneralizedTime({ name: (names.notAfterTime || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1r);\n        const asn1 = asn1js.compareSchema(schema, schema, AttCertValidityPeriod.schema({\n            names: {\n                notBeforeTime: NOT_BEFORE_TIME,\n                notAfterTime: NOT_AFTER_TIME\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.notBeforeTime = asn1.result.notBeforeTime.toDate();\n        this.notAfterTime = asn1.result.notAfterTime.toDate();\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.GeneralizedTime({ valueDate: this.notBeforeTime }),\n                new asn1js.GeneralizedTime({ valueDate: this.notAfterTime }),\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            notBeforeTime: this.notBeforeTime,\n            notAfterTime: this.notAfterTime\n        };\n    }\n}\nAttCertValidityPeriod.CLASS_NAME = \"AttCertValidityPeriod\";\n\nconst NAMES = \"names\";\nconst GENERAL_NAMES = \"generalNames\";\nclass GeneralNames extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.names = pvutils.getParametersValue(parameters, NAMES, GeneralNames.defaultValues(NAMES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case \"names\":\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils.getParametersValue(parameters, NAMES, {});\n        return (new asn1js.Sequence({\n            optional,\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.generalNames || EMPTY_STRING),\n                    value: GeneralName.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            NAMES,\n            GENERAL_NAMES\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, GeneralNames.schema({\n            names: {\n                blockName: NAMES,\n                generalNames: GENERAL_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.names = Array.from(asn1.result.generalNames, element => new GeneralName({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.names, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            names: Array.from(this.names, o => o.toJSON())\n        };\n    }\n}\nGeneralNames.CLASS_NAME = \"GeneralNames\";\n\nconst id_SubjectDirectoryAttributes = \"2.5.29.9\";\nconst id_SubjectKeyIdentifier = \"2.5.29.14\";\nconst id_KeyUsage = \"2.5.29.15\";\nconst id_PrivateKeyUsagePeriod = \"2.5.29.16\";\nconst id_SubjectAltName = \"2.5.29.17\";\nconst id_IssuerAltName = \"2.5.29.18\";\nconst id_BasicConstraints = \"2.5.29.19\";\nconst id_CRLNumber = \"2.5.29.20\";\nconst id_BaseCRLNumber = \"2.5.29.27\";\nconst id_CRLReason = \"2.5.29.21\";\nconst id_InvalidityDate = \"2.5.29.24\";\nconst id_IssuingDistributionPoint = \"2.5.29.28\";\nconst id_CertificateIssuer = \"2.5.29.29\";\nconst id_NameConstraints = \"2.5.29.30\";\nconst id_CRLDistributionPoints = \"2.5.29.31\";\nconst id_FreshestCRL = \"2.5.29.46\";\nconst id_CertificatePolicies = \"2.5.29.32\";\nconst id_AnyPolicy = \"2.5.29.32.0\";\nconst id_MicrosoftAppPolicies = \"1.3.6.1.4.1.311.21.10\";\nconst id_PolicyMappings = \"2.5.29.33\";\nconst id_AuthorityKeyIdentifier = \"2.5.29.35\";\nconst id_PolicyConstraints = \"2.5.29.36\";\nconst id_ExtKeyUsage = \"2.5.29.37\";\nconst id_InhibitAnyPolicy = \"2.5.29.54\";\nconst id_AuthorityInfoAccess = \"1.3.6.1.5.5.7.1.1\";\nconst id_SubjectInfoAccess = \"1.3.6.1.5.5.7.1.11\";\nconst id_SignedCertificateTimestampList = \"1.3.6.1.4.1.11129.2.4.2\";\nconst id_MicrosoftCertTemplateV1 = \"1.3.6.1.4.1.311.20.2\";\nconst id_MicrosoftPrevCaCertHash = \"1.3.6.1.4.1.311.21.2\";\nconst id_MicrosoftCertTemplateV2 = \"1.3.6.1.4.1.311.21.7\";\nconst id_MicrosoftCaVersion = \"1.3.6.1.4.1.311.21.1\";\nconst id_QCStatements = \"1.3.6.1.5.5.7.1.3\";\nconst id_ContentType_Data = \"1.2.840.113549.1.7.1\";\nconst id_ContentType_SignedData = \"1.2.840.113549.1.7.2\";\nconst id_ContentType_EnvelopedData = \"1.2.840.113549.1.7.3\";\nconst id_ContentType_EncryptedData = \"1.2.840.113549.1.7.6\";\nconst id_eContentType_TSTInfo = \"1.2.840.113549.1.9.16.1.4\";\nconst id_CertBag_X509Certificate = \"1.2.840.113549.1.9.22.1\";\nconst id_CertBag_SDSICertificate = \"1.2.840.113549.1.9.22.2\";\nconst id_CertBag_AttributeCertificate = \"1.2.840.113549.1.9.22.3\";\nconst id_CRLBag_X509CRL = \"1.2.840.113549.1.9.23.1\";\nconst id_pkix = \"1.3.6.1.5.5.7\";\nconst id_ad = `${id_pkix}.48`;\nconst id_PKIX_OCSP_Basic = `${id_ad}.1.1`;\nconst id_ad_caIssuers = `${id_ad}.2`;\nconst id_ad_ocsp = `${id_ad}.1`;\nconst id_sha1 = \"1.3.14.3.2.26\";\nconst id_sha256 = \"2.16.840.1.101.3.4.2.1\";\nconst id_sha384 = \"2.16.840.1.101.3.4.2.2\";\nconst id_sha512 = \"2.16.840.1.101.3.4.2.3\";\n\nconst KEY_IDENTIFIER$1 = \"keyIdentifier\";\nconst AUTHORITY_CERT_ISSUER = \"authorityCertIssuer\";\nconst AUTHORITY_CERT_SERIAL_NUMBER = \"authorityCertSerialNumber\";\nconst CLEAR_PROPS$1q = [\n    KEY_IDENTIFIER$1,\n    AUTHORITY_CERT_ISSUER,\n    AUTHORITY_CERT_SERIAL_NUMBER,\n];\nclass AuthorityKeyIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (KEY_IDENTIFIER$1 in parameters) {\n            this.keyIdentifier = pvutils.getParametersValue(parameters, KEY_IDENTIFIER$1, AuthorityKeyIdentifier.defaultValues(KEY_IDENTIFIER$1));\n        }\n        if (AUTHORITY_CERT_ISSUER in parameters) {\n            this.authorityCertIssuer = pvutils.getParametersValue(parameters, AUTHORITY_CERT_ISSUER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_ISSUER));\n        }\n        if (AUTHORITY_CERT_SERIAL_NUMBER in parameters) {\n            this.authorityCertSerialNumber = pvutils.getParametersValue(parameters, AUTHORITY_CERT_SERIAL_NUMBER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_SERIAL_NUMBER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_IDENTIFIER$1:\n                return new asn1js.OctetString();\n            case AUTHORITY_CERT_ISSUER:\n                return [];\n            case AUTHORITY_CERT_SERIAL_NUMBER:\n                return new asn1js.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Primitive({\n                    name: (names.keyIdentifier || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.authorityCertIssuer || EMPTY_STRING),\n                            value: GeneralName.schema()\n                        })\n                    ]\n                }),\n                new asn1js.Primitive({\n                    name: (names.authorityCertSerialNumber || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1q);\n        const asn1 = asn1js.compareSchema(schema, schema, AuthorityKeyIdentifier.schema({\n            names: {\n                keyIdentifier: KEY_IDENTIFIER$1,\n                authorityCertIssuer: AUTHORITY_CERT_ISSUER,\n                authorityCertSerialNumber: AUTHORITY_CERT_SERIAL_NUMBER\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (KEY_IDENTIFIER$1 in asn1.result)\n            this.keyIdentifier = new asn1js.OctetString({ valueHex: asn1.result.keyIdentifier.valueBlock.valueHex });\n        if (AUTHORITY_CERT_ISSUER in asn1.result)\n            this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, o => new GeneralName({ schema: o }));\n        if (AUTHORITY_CERT_SERIAL_NUMBER in asn1.result)\n            this.authorityCertSerialNumber = new asn1js.Integer({ valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex });\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.keyIdentifier) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: this.keyIdentifier.valueBlock.valueHexView\n            }));\n        }\n        if (this.authorityCertIssuer) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.authorityCertIssuer, o => o.toSchema())\n            }));\n        }\n        if (this.authorityCertSerialNumber) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: this.authorityCertSerialNumber.valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.keyIdentifier) {\n            object.keyIdentifier = this.keyIdentifier.toJSON();\n        }\n        if (this.authorityCertIssuer) {\n            object.authorityCertIssuer = Array.from(this.authorityCertIssuer, o => o.toJSON());\n        }\n        if (this.authorityCertSerialNumber) {\n            object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\n        }\n        return object;\n    }\n}\nAuthorityKeyIdentifier.CLASS_NAME = \"AuthorityKeyIdentifier\";\n\nconst PATH_LENGTH_CONSTRAINT = \"pathLenConstraint\";\nconst CA = \"cA\";\nclass BasicConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.cA = pvutils.getParametersValue(parameters, CA, false);\n        if (PATH_LENGTH_CONSTRAINT in parameters) {\n            this.pathLenConstraint = pvutils.getParametersValue(parameters, PATH_LENGTH_CONSTRAINT, 0);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CA:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Boolean({\n                    optional: true,\n                    name: (names.cA || EMPTY_STRING)\n                }),\n                new asn1js.Integer({\n                    optional: true,\n                    name: (names.pathLenConstraint || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            CA,\n            PATH_LENGTH_CONSTRAINT\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, BasicConstraints.schema({\n            names: {\n                cA: CA,\n                pathLenConstraint: PATH_LENGTH_CONSTRAINT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (CA in asn1.result) {\n            this.cA = asn1.result.cA.valueBlock.value;\n        }\n        if (PATH_LENGTH_CONSTRAINT in asn1.result) {\n            if (asn1.result.pathLenConstraint.valueBlock.isHexOnly) {\n                this.pathLenConstraint = asn1.result.pathLenConstraint;\n            }\n            else {\n                this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;\n            }\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.cA !== BasicConstraints.defaultValues(CA))\n            outputArray.push(new asn1js.Boolean({ value: this.cA }));\n        if (PATH_LENGTH_CONSTRAINT in this) {\n            if (this.pathLenConstraint instanceof asn1js.Integer) {\n                outputArray.push(this.pathLenConstraint);\n            }\n            else {\n                outputArray.push(new asn1js.Integer({ value: this.pathLenConstraint }));\n            }\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.cA !== BasicConstraints.defaultValues(CA)) {\n            object.cA = this.cA;\n        }\n        if (PATH_LENGTH_CONSTRAINT in this) {\n            if (this.pathLenConstraint instanceof asn1js.Integer) {\n                object.pathLenConstraint = this.pathLenConstraint.toJSON();\n            }\n            else {\n                object.pathLenConstraint = this.pathLenConstraint;\n            }\n        }\n        return object;\n    }\n}\nBasicConstraints.CLASS_NAME = \"BasicConstraints\";\n\nconst CERTIFICATE_INDEX = \"certificateIndex\";\nconst KEY_INDEX = \"keyIndex\";\nclass CAVersion extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificateIndex = pvutils.getParametersValue(parameters, CERTIFICATE_INDEX, CAVersion.defaultValues(CERTIFICATE_INDEX));\n        this.keyIndex = pvutils.getParametersValue(parameters, KEY_INDEX, CAVersion.defaultValues(KEY_INDEX));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATE_INDEX:\n            case KEY_INDEX:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema() {\n        return (new asn1js.Integer());\n    }\n    fromSchema(schema) {\n        if (schema.constructor.blockName() !== asn1js.Integer.blockName()) {\n            throw new Error(\"Object's schema was not verified against input data for CAVersion\");\n        }\n        let value = schema.valueBlock.valueHex.slice(0);\n        const valueView = new Uint8Array(value);\n        switch (true) {\n            case (value.byteLength < 4):\n                {\n                    const tempValue = new ArrayBuffer(4);\n                    const tempValueView = new Uint8Array(tempValue);\n                    tempValueView.set(valueView, 4 - value.byteLength);\n                    value = tempValue.slice(0);\n                }\n                break;\n            case (value.byteLength > 4):\n                {\n                    const tempValue = new ArrayBuffer(4);\n                    const tempValueView = new Uint8Array(tempValue);\n                    tempValueView.set(valueView.slice(0, 4));\n                    value = tempValue.slice(0);\n                }\n                break;\n        }\n        const keyIndexBuffer = value.slice(0, 2);\n        const keyIndexView8 = new Uint8Array(keyIndexBuffer);\n        let temp = keyIndexView8[0];\n        keyIndexView8[0] = keyIndexView8[1];\n        keyIndexView8[1] = temp;\n        const keyIndexView16 = new Uint16Array(keyIndexBuffer);\n        this.keyIndex = keyIndexView16[0];\n        const certificateIndexBuffer = value.slice(2);\n        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n        temp = certificateIndexView8[0];\n        certificateIndexView8[0] = certificateIndexView8[1];\n        certificateIndexView8[1] = temp;\n        const certificateIndexView16 = new Uint16Array(certificateIndexBuffer);\n        this.certificateIndex = certificateIndexView16[0];\n    }\n    toSchema() {\n        const certificateIndexBuffer = new ArrayBuffer(2);\n        const certificateIndexView = new Uint16Array(certificateIndexBuffer);\n        certificateIndexView[0] = this.certificateIndex;\n        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n        let temp = certificateIndexView8[0];\n        certificateIndexView8[0] = certificateIndexView8[1];\n        certificateIndexView8[1] = temp;\n        const keyIndexBuffer = new ArrayBuffer(2);\n        const keyIndexView = new Uint16Array(keyIndexBuffer);\n        keyIndexView[0] = this.keyIndex;\n        const keyIndexView8 = new Uint8Array(keyIndexBuffer);\n        temp = keyIndexView8[0];\n        keyIndexView8[0] = keyIndexView8[1];\n        keyIndexView8[1] = temp;\n        return (new asn1js.Integer({\n            valueHex: pvutils.utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)\n        }));\n    }\n    toJSON() {\n        return {\n            certificateIndex: this.certificateIndex,\n            keyIndex: this.keyIndex\n        };\n    }\n}\nCAVersion.CLASS_NAME = \"CAVersion\";\n\nconst POLICY_QUALIFIER_ID = \"policyQualifierId\";\nconst QUALIFIER = \"qualifier\";\nconst CLEAR_PROPS$1p = [\n    POLICY_QUALIFIER_ID,\n    QUALIFIER\n];\nclass PolicyQualifierInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.policyQualifierId = pvutils.getParametersValue(parameters, POLICY_QUALIFIER_ID, PolicyQualifierInfo.defaultValues(POLICY_QUALIFIER_ID));\n        this.qualifier = pvutils.getParametersValue(parameters, QUALIFIER, PolicyQualifierInfo.defaultValues(QUALIFIER));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case POLICY_QUALIFIER_ID:\n                return EMPTY_STRING;\n            case QUALIFIER:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.policyQualifierId || EMPTY_STRING) }),\n                new asn1js.Any({ name: (names.qualifier || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1p);\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyQualifierInfo.schema({\n            names: {\n                policyQualifierId: POLICY_QUALIFIER_ID,\n                qualifier: QUALIFIER\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();\n        this.qualifier = asn1.result.qualifier;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.policyQualifierId }),\n                this.qualifier\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            policyQualifierId: this.policyQualifierId,\n            qualifier: this.qualifier.toJSON()\n        };\n    }\n}\nPolicyQualifierInfo.CLASS_NAME = \"PolicyQualifierInfo\";\n\nconst POLICY_IDENTIFIER = \"policyIdentifier\";\nconst POLICY_QUALIFIERS = \"policyQualifiers\";\nconst CLEAR_PROPS$1o = [\n    POLICY_IDENTIFIER,\n    POLICY_QUALIFIERS\n];\nclass PolicyInformation extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.policyIdentifier = pvutils.getParametersValue(parameters, POLICY_IDENTIFIER, PolicyInformation.defaultValues(POLICY_IDENTIFIER));\n        if (POLICY_QUALIFIERS in parameters) {\n            this.policyQualifiers = pvutils.getParametersValue(parameters, POLICY_QUALIFIERS, PolicyInformation.defaultValues(POLICY_QUALIFIERS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case POLICY_IDENTIFIER:\n                return EMPTY_STRING;\n            case POLICY_QUALIFIERS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.policyIdentifier || EMPTY_STRING) }),\n                new asn1js.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.policyQualifiers || EMPTY_STRING),\n                            value: PolicyQualifierInfo.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1o);\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyInformation.schema({\n            names: {\n                policyIdentifier: POLICY_IDENTIFIER,\n                policyQualifiers: POLICY_QUALIFIERS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\n        if (POLICY_QUALIFIERS in asn1.result) {\n            this.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));\n        if (this.policyQualifiers) {\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.policyQualifiers, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            policyIdentifier: this.policyIdentifier\n        };\n        if (this.policyQualifiers)\n            res.policyQualifiers = Array.from(this.policyQualifiers, o => o.toJSON());\n        return res;\n    }\n}\nPolicyInformation.CLASS_NAME = \"PolicyInformation\";\n\nconst CERTIFICATE_POLICIES = \"certificatePolicies\";\nconst CLEAR_PROPS$1n = [\n    CERTIFICATE_POLICIES,\n];\nclass CertificatePolicies extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificatePolicies = pvutils.getParametersValue(parameters, CERTIFICATE_POLICIES, CertificatePolicies.defaultValues(CERTIFICATE_POLICIES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATE_POLICIES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.certificatePolicies || EMPTY_STRING),\n                    value: PolicyInformation.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1n);\n        const asn1 = asn1js.compareSchema(schema, schema, CertificatePolicies.schema({\n            names: {\n                certificatePolicies: CERTIFICATE_POLICIES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certificatePolicies = Array.from(asn1.result.certificatePolicies, element => new PolicyInformation({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.certificatePolicies, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            certificatePolicies: Array.from(this.certificatePolicies, o => o.toJSON())\n        };\n    }\n}\nCertificatePolicies.CLASS_NAME = \"CertificatePolicies\";\n\nconst TEMPLATE_ID = \"templateID\";\nconst TEMPLATE_MAJOR_VERSION = \"templateMajorVersion\";\nconst TEMPLATE_MINOR_VERSION = \"templateMinorVersion\";\nconst CLEAR_PROPS$1m = [\n    TEMPLATE_ID,\n    TEMPLATE_MAJOR_VERSION,\n    TEMPLATE_MINOR_VERSION\n];\nclass CertificateTemplate extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.templateID = pvutils.getParametersValue(parameters, TEMPLATE_ID, CertificateTemplate.defaultValues(TEMPLATE_ID));\n        if (TEMPLATE_MAJOR_VERSION in parameters) {\n            this.templateMajorVersion = pvutils.getParametersValue(parameters, TEMPLATE_MAJOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MAJOR_VERSION));\n        }\n        if (TEMPLATE_MINOR_VERSION in parameters) {\n            this.templateMinorVersion = pvutils.getParametersValue(parameters, TEMPLATE_MINOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MINOR_VERSION));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TEMPLATE_ID:\n                return EMPTY_STRING;\n            case TEMPLATE_MAJOR_VERSION:\n            case TEMPLATE_MINOR_VERSION:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.templateID || EMPTY_STRING) }),\n                new asn1js.Integer({\n                    name: (names.templateMajorVersion || EMPTY_STRING),\n                    optional: true\n                }),\n                new asn1js.Integer({\n                    name: (names.templateMinorVersion || EMPTY_STRING),\n                    optional: true\n                }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1m);\n        const asn1 = asn1js.compareSchema(schema, schema, CertificateTemplate.schema({\n            names: {\n                templateID: TEMPLATE_ID,\n                templateMajorVersion: TEMPLATE_MAJOR_VERSION,\n                templateMinorVersion: TEMPLATE_MINOR_VERSION\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.templateID = asn1.result.templateID.valueBlock.toString();\n        if (TEMPLATE_MAJOR_VERSION in asn1.result) {\n            this.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;\n        }\n        if (TEMPLATE_MINOR_VERSION in asn1.result) {\n            this.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.templateID }));\n        if (TEMPLATE_MAJOR_VERSION in this) {\n            outputArray.push(new asn1js.Integer({ value: this.templateMajorVersion }));\n        }\n        if (TEMPLATE_MINOR_VERSION in this) {\n            outputArray.push(new asn1js.Integer({ value: this.templateMinorVersion }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            templateID: this.templateID\n        };\n        if (TEMPLATE_MAJOR_VERSION in this)\n            res.templateMajorVersion = this.templateMajorVersion;\n        if (TEMPLATE_MINOR_VERSION in this)\n            res.templateMinorVersion = this.templateMinorVersion;\n        return res;\n    }\n}\n\nconst DISTRIBUTION_POINT$1 = \"distributionPoint\";\nconst DISTRIBUTION_POINT_NAMES$1 = \"distributionPointNames\";\nconst REASONS = \"reasons\";\nconst CRL_ISSUER = \"cRLIssuer\";\nconst CRL_ISSUER_NAMES = \"cRLIssuerNames\";\nconst CLEAR_PROPS$1l = [\n    DISTRIBUTION_POINT$1,\n    DISTRIBUTION_POINT_NAMES$1,\n    REASONS,\n    CRL_ISSUER,\n    CRL_ISSUER_NAMES,\n];\nclass DistributionPoint extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (DISTRIBUTION_POINT$1 in parameters) {\n            this.distributionPoint = pvutils.getParametersValue(parameters, DISTRIBUTION_POINT$1, DistributionPoint.defaultValues(DISTRIBUTION_POINT$1));\n        }\n        if (REASONS in parameters) {\n            this.reasons = pvutils.getParametersValue(parameters, REASONS, DistributionPoint.defaultValues(REASONS));\n        }\n        if (CRL_ISSUER in parameters) {\n            this.cRLIssuer = pvutils.getParametersValue(parameters, CRL_ISSUER, DistributionPoint.defaultValues(CRL_ISSUER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINT$1:\n                return [];\n            case REASONS:\n                return new asn1js.BitString();\n            case CRL_ISSUER:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Choice({\n                            value: [\n                                new asn1js.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [\n                                        new asn1js.Repeated({\n                                            name: (names.distributionPointNames || EMPTY_STRING),\n                                            value: GeneralName.schema()\n                                        })\n                                    ]\n                                }),\n                                new asn1js.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 1\n                                    },\n                                    value: RelativeDistinguishedNames.schema().valueBlock.value\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js.Primitive({\n                    name: (names.reasons || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js.Constructed({\n                    name: (names.cRLIssuer || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.cRLIssuerNames || EMPTY_STRING),\n                            value: GeneralName.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1l);\n        const asn1 = asn1js.compareSchema(schema, schema, DistributionPoint.schema({\n            names: {\n                distributionPoint: DISTRIBUTION_POINT$1,\n                distributionPointNames: DISTRIBUTION_POINT_NAMES$1,\n                reasons: REASONS,\n                cRLIssuer: CRL_ISSUER,\n                cRLIssuerNames: CRL_ISSUER_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (DISTRIBUTION_POINT$1 in asn1.result) {\n            if (asn1.result.distributionPoint.idBlock.tagNumber === 0) {\n                this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\n            }\n            if (asn1.result.distributionPoint.idBlock.tagNumber === 1) {\n                this.distributionPoint = new RelativeDistinguishedNames({\n                    schema: new asn1js.Sequence({\n                        value: asn1.result.distributionPoint.valueBlock.value\n                    })\n                });\n            }\n        }\n        if (REASONS in asn1.result) {\n            this.reasons = new asn1js.BitString({ valueHex: asn1.result.reasons.valueBlock.valueHex });\n        }\n        if (CRL_ISSUER in asn1.result) {\n            this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, element => new GeneralName({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.distributionPoint) {\n            let internalValue;\n            if (this.distributionPoint instanceof Array) {\n                internalValue = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: Array.from(this.distributionPoint, o => o.toSchema())\n                });\n            }\n            else {\n                internalValue = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.distributionPoint.toSchema()]\n                });\n            }\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [internalValue]\n            }));\n        }\n        if (this.reasons) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: this.reasons.valueBlock.valueHexView\n            }));\n        }\n        if (this.cRLIssuer) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: Array.from(this.cRLIssuer, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.distributionPoint) {\n            if (this.distributionPoint instanceof Array) {\n                object.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());\n            }\n            else {\n                object.distributionPoint = this.distributionPoint.toJSON();\n            }\n        }\n        if (this.reasons) {\n            object.reasons = this.reasons.toJSON();\n        }\n        if (this.cRLIssuer) {\n            object.cRLIssuer = Array.from(this.cRLIssuer, o => o.toJSON());\n        }\n        return object;\n    }\n}\nDistributionPoint.CLASS_NAME = \"DistributionPoint\";\n\nconst DISTRIBUTION_POINTS = \"distributionPoints\";\nconst CLEAR_PROPS$1k = [\n    DISTRIBUTION_POINTS\n];\nclass CRLDistributionPoints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.distributionPoints = pvutils.getParametersValue(parameters, DISTRIBUTION_POINTS, CRLDistributionPoints.defaultValues(DISTRIBUTION_POINTS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINTS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.distributionPoints || EMPTY_STRING),\n                    value: DistributionPoint.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1k);\n        const asn1 = asn1js.compareSchema(schema, schema, CRLDistributionPoints.schema({\n            names: {\n                distributionPoints: DISTRIBUTION_POINTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.distributionPoints = Array.from(asn1.result.distributionPoints, element => new DistributionPoint({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.distributionPoints, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            distributionPoints: Array.from(this.distributionPoints, o => o.toJSON())\n        };\n    }\n}\nCRLDistributionPoints.CLASS_NAME = \"CRLDistributionPoints\";\n\nconst KEY_PURPOSES = \"keyPurposes\";\nconst CLEAR_PROPS$1j = [\n    KEY_PURPOSES,\n];\nclass ExtKeyUsage extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyPurposes = pvutils.getParametersValue(parameters, KEY_PURPOSES, ExtKeyUsage.defaultValues(KEY_PURPOSES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_PURPOSES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.keyPurposes || EMPTY_STRING),\n                    value: new asn1js.ObjectIdentifier()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1j);\n        const asn1 = asn1js.compareSchema(schema, schema, ExtKeyUsage.schema({\n            names: {\n                keyPurposes: KEY_PURPOSES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyPurposes = Array.from(asn1.result.keyPurposes, (element) => element.valueBlock.toString());\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.keyPurposes, element => new asn1js.ObjectIdentifier({ value: element }))\n        }));\n    }\n    toJSON() {\n        return {\n            keyPurposes: Array.from(this.keyPurposes)\n        };\n    }\n}\nExtKeyUsage.CLASS_NAME = \"ExtKeyUsage\";\n\nconst ACCESS_DESCRIPTIONS = \"accessDescriptions\";\nclass InfoAccess extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.accessDescriptions = pvutils.getParametersValue(parameters, ACCESS_DESCRIPTIONS, InfoAccess.defaultValues(ACCESS_DESCRIPTIONS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACCESS_DESCRIPTIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.accessDescriptions || EMPTY_STRING),\n                    value: AccessDescription.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            ACCESS_DESCRIPTIONS\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, InfoAccess.schema({\n            names: {\n                accessDescriptions: ACCESS_DESCRIPTIONS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.accessDescriptions = Array.from(asn1.result.accessDescriptions, element => new AccessDescription({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.accessDescriptions, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            accessDescriptions: Array.from(this.accessDescriptions, o => o.toJSON())\n        };\n    }\n}\nInfoAccess.CLASS_NAME = \"InfoAccess\";\n\nconst DISTRIBUTION_POINT = \"distributionPoint\";\nconst DISTRIBUTION_POINT_NAMES = \"distributionPointNames\";\nconst ONLY_CONTAINS_USER_CERTS = \"onlyContainsUserCerts\";\nconst ONLY_CONTAINS_CA_CERTS = \"onlyContainsCACerts\";\nconst ONLY_SOME_REASON = \"onlySomeReasons\";\nconst INDIRECT_CRL = \"indirectCRL\";\nconst ONLY_CONTAINS_ATTRIBUTE_CERTS = \"onlyContainsAttributeCerts\";\nconst CLEAR_PROPS$1i = [\n    DISTRIBUTION_POINT,\n    DISTRIBUTION_POINT_NAMES,\n    ONLY_CONTAINS_USER_CERTS,\n    ONLY_CONTAINS_CA_CERTS,\n    ONLY_SOME_REASON,\n    INDIRECT_CRL,\n    ONLY_CONTAINS_ATTRIBUTE_CERTS,\n];\nclass IssuingDistributionPoint extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (DISTRIBUTION_POINT in parameters) {\n            this.distributionPoint = pvutils.getParametersValue(parameters, DISTRIBUTION_POINT, IssuingDistributionPoint.defaultValues(DISTRIBUTION_POINT));\n        }\n        this.onlyContainsUserCerts = pvutils.getParametersValue(parameters, ONLY_CONTAINS_USER_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS));\n        this.onlyContainsCACerts = pvutils.getParametersValue(parameters, ONLY_CONTAINS_CA_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS));\n        if (ONLY_SOME_REASON in parameters) {\n            this.onlySomeReasons = pvutils.getParametersValue(parameters, ONLY_SOME_REASON, IssuingDistributionPoint.defaultValues(ONLY_SOME_REASON));\n        }\n        this.indirectCRL = pvutils.getParametersValue(parameters, INDIRECT_CRL, IssuingDistributionPoint.defaultValues(INDIRECT_CRL));\n        this.onlyContainsAttributeCerts = pvutils.getParametersValue(parameters, ONLY_CONTAINS_ATTRIBUTE_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINT:\n                return [];\n            case ONLY_CONTAINS_USER_CERTS:\n                return false;\n            case ONLY_CONTAINS_CA_CERTS:\n                return false;\n            case ONLY_SOME_REASON:\n                return 0;\n            case INDIRECT_CRL:\n                return false;\n            case ONLY_CONTAINS_ATTRIBUTE_CERTS:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Choice({\n                            value: [\n                                new asn1js.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [\n                                        new asn1js.Repeated({\n                                            name: (names.distributionPointNames || EMPTY_STRING),\n                                            value: GeneralName.schema()\n                                        })\n                                    ]\n                                }),\n                                new asn1js.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 1\n                                    },\n                                    value: RelativeDistinguishedNames.schema().valueBlock.value\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js.Primitive({\n                    name: (names.onlyContainsUserCerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.onlyContainsCACerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.onlySomeReasons || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.indirectCRL || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.onlyContainsAttributeCerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 5\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1i);\n        const asn1 = asn1js.compareSchema(schema, schema, IssuingDistributionPoint.schema({\n            names: {\n                distributionPoint: DISTRIBUTION_POINT,\n                distributionPointNames: DISTRIBUTION_POINT_NAMES,\n                onlyContainsUserCerts: ONLY_CONTAINS_USER_CERTS,\n                onlyContainsCACerts: ONLY_CONTAINS_CA_CERTS,\n                onlySomeReasons: ONLY_SOME_REASON,\n                indirectCRL: INDIRECT_CRL,\n                onlyContainsAttributeCerts: ONLY_CONTAINS_ATTRIBUTE_CERTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (DISTRIBUTION_POINT in asn1.result) {\n            switch (true) {\n                case (asn1.result.distributionPoint.idBlock.tagNumber === 0):\n                    this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\n                    break;\n                case (asn1.result.distributionPoint.idBlock.tagNumber === 1):\n                    {\n                        this.distributionPoint = new RelativeDistinguishedNames({\n                            schema: new asn1js.Sequence({\n                                value: asn1.result.distributionPoint.valueBlock.value\n                            })\n                        });\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}\");\n            }\n        }\n        if (ONLY_CONTAINS_USER_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);\n            this.onlyContainsUserCerts = (view[0] !== 0x00);\n        }\n        if (ONLY_CONTAINS_CA_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);\n            this.onlyContainsCACerts = (view[0] !== 0x00);\n        }\n        if (ONLY_SOME_REASON in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);\n            this.onlySomeReasons = view[0];\n        }\n        if (INDIRECT_CRL in asn1.result) {\n            const view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);\n            this.indirectCRL = (view[0] !== 0x00);\n        }\n        if (ONLY_CONTAINS_ATTRIBUTE_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);\n            this.onlyContainsAttributeCerts = (view[0] !== 0x00);\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.distributionPoint) {\n            let value;\n            if (this.distributionPoint instanceof Array) {\n                value = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: Array.from(this.distributionPoint, o => o.toSchema())\n                });\n            }\n            else {\n                value = this.distributionPoint.toSchema();\n                value.idBlock.tagClass = 3;\n                value.idBlock.tagNumber = 1;\n            }\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [value]\n            }));\n        }\n        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlySomeReasons !== undefined) {\n            const buffer = new ArrayBuffer(1);\n            const view = new Uint8Array(buffer);\n            view[0] = this.onlySomeReasons;\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                valueHex: buffer\n            }));\n        }\n        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 4\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 5\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const obj = {};\n        if (this.distributionPoint) {\n            if (this.distributionPoint instanceof Array) {\n                obj.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());\n            }\n            else {\n                obj.distributionPoint = this.distributionPoint.toJSON();\n            }\n        }\n        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {\n            obj.onlyContainsUserCerts = this.onlyContainsUserCerts;\n        }\n        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {\n            obj.onlyContainsCACerts = this.onlyContainsCACerts;\n        }\n        if (ONLY_SOME_REASON in this) {\n            obj.onlySomeReasons = this.onlySomeReasons;\n        }\n        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {\n            obj.indirectCRL = this.indirectCRL;\n        }\n        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {\n            obj.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\n        }\n        return obj;\n    }\n}\nIssuingDistributionPoint.CLASS_NAME = \"IssuingDistributionPoint\";\n\nconst BASE = \"base\";\nconst MINIMUM = \"minimum\";\nconst MAXIMUM = \"maximum\";\nconst CLEAR_PROPS$1h = [\n    BASE,\n    MINIMUM,\n    MAXIMUM\n];\nclass GeneralSubtree extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.base = pvutils.getParametersValue(parameters, BASE, GeneralSubtree.defaultValues(BASE));\n        this.minimum = pvutils.getParametersValue(parameters, MINIMUM, GeneralSubtree.defaultValues(MINIMUM));\n        if (MAXIMUM in parameters) {\n            this.maximum = pvutils.getParametersValue(parameters, MAXIMUM, GeneralSubtree.defaultValues(MAXIMUM));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BASE:\n                return new GeneralName();\n            case MINIMUM:\n                return 0;\n            case MAXIMUM:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralName.schema(names.base || {}),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Integer({ name: (names.minimum || EMPTY_STRING) })]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js.Integer({ name: (names.maximum || EMPTY_STRING) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1h);\n        const asn1 = asn1js.compareSchema(schema, schema, GeneralSubtree.schema({\n            names: {\n                base: {\n                    names: {\n                        blockName: BASE\n                    }\n                },\n                minimum: MINIMUM,\n                maximum: MAXIMUM\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.base = new GeneralName({ schema: asn1.result.base });\n        if (MINIMUM in asn1.result) {\n            if (asn1.result.minimum.valueBlock.isHexOnly)\n                this.minimum = asn1.result.minimum;\n            else\n                this.minimum = asn1.result.minimum.valueBlock.valueDec;\n        }\n        if (MAXIMUM in asn1.result) {\n            if (asn1.result.maximum.valueBlock.isHexOnly)\n                this.maximum = asn1.result.maximum;\n            else\n                this.maximum = asn1.result.maximum.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.base.toSchema());\n        if (this.minimum !== 0) {\n            let valueMinimum = 0;\n            if (this.minimum instanceof asn1js.Integer) {\n                valueMinimum = this.minimum;\n            }\n            else {\n                valueMinimum = new asn1js.Integer({ value: this.minimum });\n            }\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [valueMinimum]\n            }));\n        }\n        if (MAXIMUM in this) {\n            let valueMaximum = 0;\n            if (this.maximum instanceof asn1js.Integer) {\n                valueMaximum = this.maximum;\n            }\n            else {\n                valueMaximum = new asn1js.Integer({ value: this.maximum });\n            }\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [valueMaximum]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            base: this.base.toJSON()\n        };\n        if (this.minimum !== 0) {\n            if (typeof this.minimum === \"number\") {\n                res.minimum = this.minimum;\n            }\n            else {\n                res.minimum = this.minimum.toJSON();\n            }\n        }\n        if (this.maximum !== undefined) {\n            if (typeof this.maximum === \"number\") {\n                res.maximum = this.maximum;\n            }\n            else {\n                res.maximum = this.maximum.toJSON();\n            }\n        }\n        return res;\n    }\n}\nGeneralSubtree.CLASS_NAME = \"GeneralSubtree\";\n\nconst PERMITTED_SUBTREES = \"permittedSubtrees\";\nconst EXCLUDED_SUBTREES = \"excludedSubtrees\";\nconst CLEAR_PROPS$1g = [\n    PERMITTED_SUBTREES,\n    EXCLUDED_SUBTREES\n];\nclass NameConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (PERMITTED_SUBTREES in parameters) {\n            this.permittedSubtrees = pvutils.getParametersValue(parameters, PERMITTED_SUBTREES, NameConstraints.defaultValues(PERMITTED_SUBTREES));\n        }\n        if (EXCLUDED_SUBTREES in parameters) {\n            this.excludedSubtrees = pvutils.getParametersValue(parameters, EXCLUDED_SUBTREES, NameConstraints.defaultValues(EXCLUDED_SUBTREES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case PERMITTED_SUBTREES:\n            case EXCLUDED_SUBTREES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.permittedSubtrees || EMPTY_STRING),\n                            value: GeneralSubtree.schema()\n                        })\n                    ]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.excludedSubtrees || EMPTY_STRING),\n                            value: GeneralSubtree.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1g);\n        const asn1 = asn1js.compareSchema(schema, schema, NameConstraints.schema({\n            names: {\n                permittedSubtrees: PERMITTED_SUBTREES,\n                excludedSubtrees: EXCLUDED_SUBTREES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (PERMITTED_SUBTREES in asn1.result)\n            this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\n        if (EXCLUDED_SUBTREES in asn1.result)\n            this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.permittedSubtrees) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.permittedSubtrees, o => o.toSchema())\n            }));\n        }\n        if (this.excludedSubtrees) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.excludedSubtrees, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.permittedSubtrees) {\n            object.permittedSubtrees = Array.from(this.permittedSubtrees, o => o.toJSON());\n        }\n        if (this.excludedSubtrees) {\n            object.excludedSubtrees = Array.from(this.excludedSubtrees, o => o.toJSON());\n        }\n        return object;\n    }\n}\nNameConstraints.CLASS_NAME = \"NameConstraints\";\n\nconst REQUIRE_EXPLICIT_POLICY = \"requireExplicitPolicy\";\nconst INHIBIT_POLICY_MAPPING = \"inhibitPolicyMapping\";\nconst CLEAR_PROPS$1f = [\n    REQUIRE_EXPLICIT_POLICY,\n    INHIBIT_POLICY_MAPPING,\n];\nclass PolicyConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (REQUIRE_EXPLICIT_POLICY in parameters) {\n            this.requireExplicitPolicy = pvutils.getParametersValue(parameters, REQUIRE_EXPLICIT_POLICY, PolicyConstraints.defaultValues(REQUIRE_EXPLICIT_POLICY));\n        }\n        if (INHIBIT_POLICY_MAPPING in parameters) {\n            this.inhibitPolicyMapping = pvutils.getParametersValue(parameters, INHIBIT_POLICY_MAPPING, PolicyConstraints.defaultValues(INHIBIT_POLICY_MAPPING));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case REQUIRE_EXPLICIT_POLICY:\n                return 0;\n            case INHIBIT_POLICY_MAPPING:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Primitive({\n                    name: (names.requireExplicitPolicy || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.inhibitPolicyMapping || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1f);\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyConstraints.schema({\n            names: {\n                requireExplicitPolicy: REQUIRE_EXPLICIT_POLICY,\n                inhibitPolicyMapping: INHIBIT_POLICY_MAPPING\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (REQUIRE_EXPLICIT_POLICY in asn1.result) {\n            const field1 = asn1.result.requireExplicitPolicy;\n            field1.idBlock.tagClass = 1;\n            field1.idBlock.tagNumber = 2;\n            const ber1 = field1.toBER(false);\n            const int1 = asn1js.fromBER(ber1);\n            AsnError.assert(int1, \"Integer\");\n            this.requireExplicitPolicy = int1.result.valueBlock.valueDec;\n        }\n        if (INHIBIT_POLICY_MAPPING in asn1.result) {\n            const field2 = asn1.result.inhibitPolicyMapping;\n            field2.idBlock.tagClass = 1;\n            field2.idBlock.tagNumber = 2;\n            const ber2 = field2.toBER(false);\n            const int2 = asn1js.fromBER(ber2);\n            AsnError.assert(int2, \"Integer\");\n            this.inhibitPolicyMapping = int2.result.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (REQUIRE_EXPLICIT_POLICY in this) {\n            const int1 = new asn1js.Integer({ value: this.requireExplicitPolicy });\n            int1.idBlock.tagClass = 3;\n            int1.idBlock.tagNumber = 0;\n            outputArray.push(int1);\n        }\n        if (INHIBIT_POLICY_MAPPING in this) {\n            const int2 = new asn1js.Integer({ value: this.inhibitPolicyMapping });\n            int2.idBlock.tagClass = 3;\n            int2.idBlock.tagNumber = 1;\n            outputArray.push(int2);\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (REQUIRE_EXPLICIT_POLICY in this) {\n            res.requireExplicitPolicy = this.requireExplicitPolicy;\n        }\n        if (INHIBIT_POLICY_MAPPING in this) {\n            res.inhibitPolicyMapping = this.inhibitPolicyMapping;\n        }\n        return res;\n    }\n}\nPolicyConstraints.CLASS_NAME = \"PolicyConstraints\";\n\nconst ISSUER_DOMAIN_POLICY = \"issuerDomainPolicy\";\nconst SUBJECT_DOMAIN_POLICY = \"subjectDomainPolicy\";\nconst CLEAR_PROPS$1e = [\n    ISSUER_DOMAIN_POLICY,\n    SUBJECT_DOMAIN_POLICY\n];\nclass PolicyMapping extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuerDomainPolicy = pvutils.getParametersValue(parameters, ISSUER_DOMAIN_POLICY, PolicyMapping.defaultValues(ISSUER_DOMAIN_POLICY));\n        this.subjectDomainPolicy = pvutils.getParametersValue(parameters, SUBJECT_DOMAIN_POLICY, PolicyMapping.defaultValues(SUBJECT_DOMAIN_POLICY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER_DOMAIN_POLICY:\n                return EMPTY_STRING;\n            case SUBJECT_DOMAIN_POLICY:\n                return EMPTY_STRING;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.issuerDomainPolicy || EMPTY_STRING) }),\n                new asn1js.ObjectIdentifier({ name: (names.subjectDomainPolicy || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1e);\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyMapping.schema({\n            names: {\n                issuerDomainPolicy: ISSUER_DOMAIN_POLICY,\n                subjectDomainPolicy: SUBJECT_DOMAIN_POLICY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();\n        this.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.issuerDomainPolicy }),\n                new asn1js.ObjectIdentifier({ value: this.subjectDomainPolicy })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            issuerDomainPolicy: this.issuerDomainPolicy,\n            subjectDomainPolicy: this.subjectDomainPolicy\n        };\n    }\n}\nPolicyMapping.CLASS_NAME = \"PolicyMapping\";\n\nconst MAPPINGS = \"mappings\";\nconst CLEAR_PROPS$1d = [\n    MAPPINGS,\n];\nclass PolicyMappings extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.mappings = pvutils.getParametersValue(parameters, MAPPINGS, PolicyMappings.defaultValues(MAPPINGS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MAPPINGS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.mappings || EMPTY_STRING),\n                    value: PolicyMapping.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1d);\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyMappings.schema({\n            names: {\n                mappings: MAPPINGS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.mappings = Array.from(asn1.result.mappings, element => new PolicyMapping({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.mappings, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            mappings: Array.from(this.mappings, o => o.toJSON())\n        };\n    }\n}\nPolicyMappings.CLASS_NAME = \"PolicyMappings\";\n\nconst NOT_BEFORE$1 = \"notBefore\";\nconst NOT_AFTER$1 = \"notAfter\";\nconst CLEAR_PROPS$1c = [\n    NOT_BEFORE$1,\n    NOT_AFTER$1\n];\nclass PrivateKeyUsagePeriod extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (NOT_BEFORE$1 in parameters) {\n            this.notBefore = pvutils.getParametersValue(parameters, NOT_BEFORE$1, PrivateKeyUsagePeriod.defaultValues(NOT_BEFORE$1));\n        }\n        if (NOT_AFTER$1 in parameters) {\n            this.notAfter = pvutils.getParametersValue(parameters, NOT_AFTER$1, PrivateKeyUsagePeriod.defaultValues(NOT_AFTER$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case NOT_BEFORE$1:\n                return new Date();\n            case NOT_AFTER$1:\n                return new Date();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Primitive({\n                    name: (names.notBefore || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.notAfter || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1c);\n        const asn1 = asn1js.compareSchema(schema, schema, PrivateKeyUsagePeriod.schema({\n            names: {\n                notBefore: NOT_BEFORE$1,\n                notAfter: NOT_AFTER$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (NOT_BEFORE$1 in asn1.result) {\n            const localNotBefore = new asn1js.GeneralizedTime();\n            localNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);\n            this.notBefore = localNotBefore.toDate();\n        }\n        if (NOT_AFTER$1 in asn1.result) {\n            const localNotAfter = new asn1js.GeneralizedTime({ valueHex: asn1.result.notAfter.valueBlock.valueHex });\n            localNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);\n            this.notAfter = localNotAfter.toDate();\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (NOT_BEFORE$1 in this) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: (new asn1js.GeneralizedTime({ valueDate: this.notBefore })).valueBlock.valueHexView\n            }));\n        }\n        if (NOT_AFTER$1 in this) {\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: (new asn1js.GeneralizedTime({ valueDate: this.notAfter })).valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (this.notBefore) {\n            res.notBefore = this.notBefore;\n        }\n        if (this.notAfter) {\n            res.notAfter = this.notAfter;\n        }\n        return res;\n    }\n}\nPrivateKeyUsagePeriod.CLASS_NAME = \"PrivateKeyUsagePeriod\";\n\nconst ID = \"id\";\nconst TYPE$2 = \"type\";\nconst VALUES = \"values\";\nconst QC_STATEMENT_CLEAR_PROPS = [\n    ID,\n    TYPE$2\n];\nconst QC_STATEMENTS_CLEAR_PROPS = [\n    VALUES\n];\nclass QCStatement extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.id = pvutils.getParametersValue(parameters, ID, QCStatement.defaultValues(ID));\n        if (TYPE$2 in parameters) {\n            this.type = pvutils.getParametersValue(parameters, TYPE$2, QCStatement.defaultValues(TYPE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ID:\n                return EMPTY_STRING;\n            case TYPE$2:\n                return new asn1js.Null();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ID:\n                return (memberValue === EMPTY_STRING);\n            case TYPE$2:\n                return (memberValue instanceof asn1js.Null);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.id || EMPTY_STRING) }),\n                new asn1js.Any({\n                    name: (names.type || EMPTY_STRING),\n                    optional: true\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, QC_STATEMENT_CLEAR_PROPS);\n        const asn1 = asn1js.compareSchema(schema, schema, QCStatement.schema({\n            names: {\n                id: ID,\n                type: TYPE$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.id = asn1.result.id.valueBlock.toString();\n        if (TYPE$2 in asn1.result)\n            this.type = asn1.result.type;\n    }\n    toSchema() {\n        const value = [\n            new asn1js.ObjectIdentifier({ value: this.id })\n        ];\n        if (TYPE$2 in this)\n            value.push(this.type);\n        return (new asn1js.Sequence({\n            value,\n        }));\n    }\n    toJSON() {\n        const object = {\n            id: this.id\n        };\n        if (this.type) {\n            object.type = this.type.toJSON();\n        }\n        return object;\n    }\n}\nQCStatement.CLASS_NAME = \"QCStatement\";\nclass QCStatements extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.values = pvutils.getParametersValue(parameters, VALUES, QCStatements.defaultValues(VALUES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VALUES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VALUES:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.values || EMPTY_STRING),\n                    value: QCStatement.schema(names.value || {})\n                }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, QC_STATEMENTS_CLEAR_PROPS);\n        const asn1 = asn1js.compareSchema(schema, schema, QCStatements.schema({\n            names: {\n                values: VALUES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.values = Array.from(asn1.result.values, element => new QCStatement({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.values, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            values: Array.from(this.values, o => o.toJSON())\n        };\n    }\n}\nQCStatements.CLASS_NAME = \"QCStatements\";\n\nvar _a;\nclass ECNamedCurves {\n    static register(name, id, size) {\n        this.namedCurves[name.toLowerCase()] = this.namedCurves[id] = { name, id, size };\n    }\n    static find(nameOrId) {\n        return this.namedCurves[nameOrId.toLowerCase()] || null;\n    }\n}\n_a = ECNamedCurves;\nECNamedCurves.namedCurves = {};\n(() => {\n    _a.register(\"P-256\", \"1.2.840.10045.3.1.7\", 32);\n    _a.register(\"P-384\", \"1.3.132.0.34\", 48);\n    _a.register(\"P-521\", \"1.3.132.0.35\", 66);\n    _a.register(\"brainpoolP256r1\", \"1.3.36.3.3.2.8.1.1.7\", 32);\n    _a.register(\"brainpoolP384r1\", \"1.3.36.3.3.2.8.1.1.11\", 48);\n    _a.register(\"brainpoolP512r1\", \"1.3.36.3.3.2.8.1.1.13\", 64);\n})();\n\nconst X = \"x\";\nconst Y = \"y\";\nconst NAMED_CURVE$1 = \"namedCurve\";\nclass ECPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.x = pvutils.getParametersValue(parameters, X, ECPublicKey.defaultValues(X));\n        this.y = pvutils.getParametersValue(parameters, Y, ECPublicKey.defaultValues(Y));\n        this.namedCurve = pvutils.getParametersValue(parameters, NAMED_CURVE$1, ECPublicKey.defaultValues(NAMED_CURVE$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case X:\n            case Y:\n                return EMPTY_BUFFER;\n            case NAMED_CURVE$1:\n                return EMPTY_STRING;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case X:\n            case Y:\n                return memberValue instanceof ArrayBuffer &&\n                    (pvutils.isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\n            case NAMED_CURVE$1:\n                return typeof memberValue === \"string\" &&\n                    memberValue === ECPublicKey.defaultValues(memberName);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema() {\n        return new asn1js.RawData();\n    }\n    fromSchema(schema1) {\n        const view = BufferSourceConverter.toUint8Array(schema1);\n        if (view[0] !== 0x04) {\n            throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n        }\n        const namedCurve = ECNamedCurves.find(this.namedCurve);\n        if (!namedCurve) {\n            throw new Error(`Incorrect curve OID: ${this.namedCurve}`);\n        }\n        const coordinateLength = namedCurve.size;\n        if (view.byteLength !== (coordinateLength * 2 + 1)) {\n            throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n        }\n        this.namedCurve = namedCurve.name;\n        this.x = view.slice(1, coordinateLength + 1).buffer;\n        this.y = view.slice(1 + coordinateLength, coordinateLength * 2 + 1).buffer;\n    }\n    toSchema() {\n        return new asn1js.RawData({\n            data: pvutils.utilConcatBuf((new Uint8Array([0x04])).buffer, this.x, this.y)\n        });\n    }\n    toJSON() {\n        const namedCurve = ECNamedCurves.find(this.namedCurve);\n        return {\n            crv: namedCurve ? namedCurve.name : this.namedCurve,\n            x: pvutils.toBase64(pvutils.arrayBufferToString(this.x), true, true, false),\n            y: pvutils.toBase64(pvutils.arrayBufferToString(this.y), true, true, false)\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"crv\", \"x\", \"y\");\n        let coordinateLength = 0;\n        const namedCurve = ECNamedCurves.find(json.crv);\n        if (namedCurve) {\n            this.namedCurve = namedCurve.id;\n            coordinateLength = namedCurve.size;\n        }\n        const xConvertBuffer = pvutils.stringToArrayBuffer(pvutils.fromBase64(json.x, true));\n        if (xConvertBuffer.byteLength < coordinateLength) {\n            this.x = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(this.x);\n            const convertBufferView = new Uint8Array(xConvertBuffer);\n            view.set(convertBufferView, 1);\n        }\n        else {\n            this.x = xConvertBuffer.slice(0, coordinateLength);\n        }\n        const yConvertBuffer = pvutils.stringToArrayBuffer(pvutils.fromBase64(json.y, true));\n        if (yConvertBuffer.byteLength < coordinateLength) {\n            this.y = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(this.y);\n            const convertBufferView = new Uint8Array(yConvertBuffer);\n            view.set(convertBufferView, 1);\n        }\n        else {\n            this.y = yConvertBuffer.slice(0, coordinateLength);\n        }\n    }\n}\nECPublicKey.CLASS_NAME = \"ECPublicKey\";\n\nconst MODULUS$1 = \"modulus\";\nconst PUBLIC_EXPONENT$1 = \"publicExponent\";\nconst CLEAR_PROPS$1b = [MODULUS$1, PUBLIC_EXPONENT$1];\nclass RSAPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.modulus = pvutils.getParametersValue(parameters, MODULUS$1, RSAPublicKey.defaultValues(MODULUS$1));\n        this.publicExponent = pvutils.getParametersValue(parameters, PUBLIC_EXPONENT$1, RSAPublicKey.defaultValues(PUBLIC_EXPONENT$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MODULUS$1:\n                return new asn1js.Integer();\n            case PUBLIC_EXPONENT$1:\n                return new asn1js.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.modulus || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.publicExponent || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1b);\n        const asn1 = asn1js.compareSchema(schema, schema, RSAPublicKey.schema({\n            names: {\n                modulus: MODULUS$1,\n                publicExponent: PUBLIC_EXPONENT$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.modulus = asn1.result.modulus.convertFromDER(256);\n        this.publicExponent = asn1.result.publicExponent;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.modulus.convertToDER(),\n                this.publicExponent\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            n: pvtsutils.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),\n            e: pvtsutils.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"n\", \"e\");\n        const array = pvutils.stringToArrayBuffer(pvutils.fromBase64(json.n, true));\n        this.modulus = new asn1js.Integer({ valueHex: array.slice(0, Math.pow(2, pvutils.nearestPowerOf2(array.byteLength))) });\n        this.publicExponent = new asn1js.Integer({ valueHex: pvutils.stringToArrayBuffer(pvutils.fromBase64(json.e, true)).slice(0, 3) });\n    }\n}\nRSAPublicKey.CLASS_NAME = \"RSAPublicKey\";\n\nconst ALGORITHM$1 = \"algorithm\";\nconst SUBJECT_PUBLIC_KEY = \"subjectPublicKey\";\nconst CLEAR_PROPS$1a = [ALGORITHM$1, SUBJECT_PUBLIC_KEY];\nclass PublicKeyInfo extends PkiObject {\n    get parsedKey() {\n        if (this._parsedKey === undefined) {\n            switch (this.algorithm.algorithmId) {\n                case \"1.2.840.10045.2.1\":\n                    if (\"algorithmParams\" in this.algorithm) {\n                        if (this.algorithm.algorithmParams.constructor.blockName() === asn1js.ObjectIdentifier.blockName()) {\n                            try {\n                                this._parsedKey = new ECPublicKey({\n                                    namedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\n                                    schema: this.subjectPublicKey.valueBlock.valueHexView\n                                });\n                            }\n                            catch (ex) {\n                            }\n                        }\n                    }\n                    break;\n                case \"1.2.840.113549.1.1.1\":\n                    {\n                        const publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHexView);\n                        if (publicKeyASN1.offset !== -1) {\n                            try {\n                                this._parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\n                            }\n                            catch (ex) {\n                            }\n                        }\n                    }\n                    break;\n            }\n            this._parsedKey || (this._parsedKey = null);\n        }\n        return this._parsedKey || undefined;\n    }\n    set parsedKey(value) {\n        this._parsedKey = value;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.algorithm = pvutils.getParametersValue(parameters, ALGORITHM$1, PublicKeyInfo.defaultValues(ALGORITHM$1));\n        this.subjectPublicKey = pvutils.getParametersValue(parameters, SUBJECT_PUBLIC_KEY, PublicKeyInfo.defaultValues(SUBJECT_PUBLIC_KEY));\n        const parsedKey = pvutils.getParametersValue(parameters, \"parsedKey\", null);\n        if (parsedKey) {\n            this.parsedKey = parsedKey;\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case SUBJECT_PUBLIC_KEY:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.algorithm || {}),\n                new asn1js.BitString({ name: (names.subjectPublicKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1a);\n        const asn1 = asn1js.compareSchema(schema, schema, PublicKeyInfo.schema({\n            names: {\n                algorithm: {\n                    names: {\n                        blockName: ALGORITHM$1\n                    }\n                },\n                subjectPublicKey: SUBJECT_PUBLIC_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\n        this.subjectPublicKey = asn1.result.subjectPublicKey;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.algorithm.toSchema(),\n                this.subjectPublicKey\n            ]\n        }));\n    }\n    toJSON() {\n        if (!this.parsedKey) {\n            return {\n                algorithm: this.algorithm.toJSON(),\n                subjectPublicKey: this.subjectPublicKey.toJSON(),\n            };\n        }\n        const jwk = {};\n        switch (this.algorithm.algorithmId) {\n            case \"1.2.840.10045.2.1\":\n                jwk.kty = \"EC\";\n                break;\n            case \"1.2.840.113549.1.1.1\":\n                jwk.kty = \"RSA\";\n                break;\n        }\n        const publicKeyJWK = this.parsedKey.toJSON();\n        Object.assign(jwk, publicKeyJWK);\n        return jwk;\n    }\n    fromJSON(json) {\n        if (\"kty\" in json) {\n            switch (json.kty.toUpperCase()) {\n                case \"EC\":\n                    this.parsedKey = new ECPublicKey({ json });\n                    this.algorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.10045.2.1\",\n                        algorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n                    });\n                    break;\n                case \"RSA\":\n                    this.parsedKey = new RSAPublicKey({ json });\n                    this.algorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.113549.1.1.1\",\n                        algorithmParams: new asn1js.Null()\n                    });\n                    break;\n                default:\n                    throw new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n            }\n            this.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n        }\n    }\n    async importKey(publicKey, crypto = getCrypto(true)) {\n        try {\n            if (!publicKey) {\n                throw new Error(\"Need to provide publicKey input parameter\");\n            }\n            const exportedKey = await crypto.exportKey(\"spki\", publicKey);\n            const asn1 = asn1js.fromBER(exportedKey);\n            try {\n                this.fromSchema(asn1.result);\n            }\n            catch (exception) {\n                throw new Error(\"Error during initializing object from schema\");\n            }\n        }\n        catch (e) {\n            const message = e instanceof Error ? e.message : `${e}`;\n            throw new Error(`Error during exporting public key: ${message}`);\n        }\n    }\n}\nPublicKeyInfo.CLASS_NAME = \"PublicKeyInfo\";\n\nconst VERSION$l = \"version\";\nconst PRIVATE_KEY$1 = \"privateKey\";\nconst NAMED_CURVE = \"namedCurve\";\nconst PUBLIC_KEY$1 = \"publicKey\";\nconst CLEAR_PROPS$19 = [\n    VERSION$l,\n    PRIVATE_KEY$1,\n    NAMED_CURVE,\n    PUBLIC_KEY$1\n];\nclass ECPrivateKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$l, ECPrivateKey.defaultValues(VERSION$l));\n        this.privateKey = pvutils.getParametersValue(parameters, PRIVATE_KEY$1, ECPrivateKey.defaultValues(PRIVATE_KEY$1));\n        if (NAMED_CURVE in parameters) {\n            this.namedCurve = pvutils.getParametersValue(parameters, NAMED_CURVE, ECPrivateKey.defaultValues(NAMED_CURVE));\n        }\n        if (PUBLIC_KEY$1 in parameters) {\n            this.publicKey = pvutils.getParametersValue(parameters, PUBLIC_KEY$1, ECPrivateKey.defaultValues(PUBLIC_KEY$1));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$l:\n                return 1;\n            case PRIVATE_KEY$1:\n                return new asn1js.OctetString();\n            case NAMED_CURVE:\n                return EMPTY_STRING;\n            case PUBLIC_KEY$1:\n                return new ECPublicKey();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$l:\n                return (memberValue === ECPrivateKey.defaultValues(memberName));\n            case PRIVATE_KEY$1:\n                return (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\n            case NAMED_CURVE:\n                return (memberValue === EMPTY_STRING);\n            case PUBLIC_KEY$1:\n                return ((ECPublicKey.compareWithDefault(NAMED_CURVE, memberValue.namedCurve)) &&\n                    (ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\n                    (ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js.OctetString({ name: (names.privateKey || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.ObjectIdentifier({ name: (names.namedCurve || EMPTY_STRING) })\n                    ]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.BitString({ name: (names.publicKey || EMPTY_STRING) })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$19);\n        const asn1 = asn1js.compareSchema(schema, schema, ECPrivateKey.schema({\n            names: {\n                version: VERSION$l,\n                privateKey: PRIVATE_KEY$1,\n                namedCurve: NAMED_CURVE,\n                publicKey: PUBLIC_KEY$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.privateKey = asn1.result.privateKey;\n        if (NAMED_CURVE in asn1.result) {\n            this.namedCurve = asn1.result.namedCurve.valueBlock.toString();\n        }\n        if (PUBLIC_KEY$1 in asn1.result) {\n            const publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\n            if (NAMED_CURVE in this) {\n                publicKeyData.namedCurve = this.namedCurve;\n            }\n            this.publicKey = new ECPublicKey(publicKeyData);\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js.Integer({ value: this.version }),\n            this.privateKey\n        ];\n        if (this.namedCurve) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.ObjectIdentifier({ value: this.namedCurve })\n                ]\n            }));\n        }\n        if (this.publicKey) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [\n                    new asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\n                ]\n            }));\n        }\n        return new asn1js.Sequence({\n            value: outputArray\n        });\n    }\n    toJSON() {\n        if (!this.namedCurve || ECPrivateKey.compareWithDefault(NAMED_CURVE, this.namedCurve)) {\n            throw new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\n        }\n        const curve = ECNamedCurves.find(this.namedCurve);\n        const privateKeyJSON = {\n            crv: curve ? curve.name : this.namedCurve,\n            d: pvtsutils.Convert.ToBase64Url(this.privateKey.valueBlock.valueHexView),\n        };\n        if (this.publicKey) {\n            const publicKeyJSON = this.publicKey.toJSON();\n            privateKeyJSON.x = publicKeyJSON.x;\n            privateKeyJSON.y = publicKeyJSON.y;\n        }\n        return privateKeyJSON;\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"crv\", \"d\");\n        let coordinateLength = 0;\n        const curve = ECNamedCurves.find(json.crv);\n        if (curve) {\n            this.namedCurve = curve.id;\n            coordinateLength = curve.size;\n        }\n        const convertBuffer = pvtsutils.Convert.FromBase64Url(json.d);\n        if (convertBuffer.byteLength < coordinateLength) {\n            const buffer = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(buffer);\n            const convertBufferView = new Uint8Array(convertBuffer);\n            view.set(convertBufferView, 1);\n            this.privateKey = new asn1js.OctetString({ valueHex: buffer });\n        }\n        else {\n            this.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coordinateLength) });\n        }\n        if (json.x && json.y) {\n            this.publicKey = new ECPublicKey({ json });\n        }\n    }\n}\nECPrivateKey.CLASS_NAME = \"ECPrivateKey\";\n\nconst PRIME = \"prime\";\nconst EXPONENT = \"exponent\";\nconst COEFFICIENT$1 = \"coefficient\";\nconst CLEAR_PROPS$18 = [\n    PRIME,\n    EXPONENT,\n    COEFFICIENT$1,\n];\nclass OtherPrimeInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.prime = pvutils.getParametersValue(parameters, PRIME, OtherPrimeInfo.defaultValues(PRIME));\n        this.exponent = pvutils.getParametersValue(parameters, EXPONENT, OtherPrimeInfo.defaultValues(EXPONENT));\n        this.coefficient = pvutils.getParametersValue(parameters, COEFFICIENT$1, OtherPrimeInfo.defaultValues(COEFFICIENT$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case PRIME:\n                return new asn1js.Integer();\n            case EXPONENT:\n                return new asn1js.Integer();\n            case COEFFICIENT$1:\n                return new asn1js.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.prime || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.exponent || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.coefficient || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$18);\n        const asn1 = asn1js.compareSchema(schema, schema, OtherPrimeInfo.schema({\n            names: {\n                prime: PRIME,\n                exponent: EXPONENT,\n                coefficient: COEFFICIENT$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.prime = asn1.result.prime.convertFromDER();\n        this.exponent = asn1.result.exponent.convertFromDER();\n        this.coefficient = asn1.result.coefficient.convertFromDER();\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.prime.convertToDER(),\n                this.exponent.convertToDER(),\n                this.coefficient.convertToDER()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            r: pvtsutils.Convert.ToBase64Url(this.prime.valueBlock.valueHexView),\n            d: pvtsutils.Convert.ToBase64Url(this.exponent.valueBlock.valueHexView),\n            t: pvtsutils.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView),\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"r\", \"d\", \"r\");\n        this.prime = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.r) });\n        this.exponent = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.d) });\n        this.coefficient = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.t) });\n    }\n}\nOtherPrimeInfo.CLASS_NAME = \"OtherPrimeInfo\";\n\nconst VERSION$k = \"version\";\nconst MODULUS = \"modulus\";\nconst PUBLIC_EXPONENT = \"publicExponent\";\nconst PRIVATE_EXPONENT = \"privateExponent\";\nconst PRIME1 = \"prime1\";\nconst PRIME2 = \"prime2\";\nconst EXPONENT1 = \"exponent1\";\nconst EXPONENT2 = \"exponent2\";\nconst COEFFICIENT = \"coefficient\";\nconst OTHER_PRIME_INFOS = \"otherPrimeInfos\";\nconst CLEAR_PROPS$17 = [\n    VERSION$k,\n    MODULUS,\n    PUBLIC_EXPONENT,\n    PRIVATE_EXPONENT,\n    PRIME1,\n    PRIME2,\n    EXPONENT1,\n    EXPONENT2,\n    COEFFICIENT,\n    OTHER_PRIME_INFOS\n];\nclass RSAPrivateKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$k, RSAPrivateKey.defaultValues(VERSION$k));\n        this.modulus = pvutils.getParametersValue(parameters, MODULUS, RSAPrivateKey.defaultValues(MODULUS));\n        this.publicExponent = pvutils.getParametersValue(parameters, PUBLIC_EXPONENT, RSAPrivateKey.defaultValues(PUBLIC_EXPONENT));\n        this.privateExponent = pvutils.getParametersValue(parameters, PRIVATE_EXPONENT, RSAPrivateKey.defaultValues(PRIVATE_EXPONENT));\n        this.prime1 = pvutils.getParametersValue(parameters, PRIME1, RSAPrivateKey.defaultValues(PRIME1));\n        this.prime2 = pvutils.getParametersValue(parameters, PRIME2, RSAPrivateKey.defaultValues(PRIME2));\n        this.exponent1 = pvutils.getParametersValue(parameters, EXPONENT1, RSAPrivateKey.defaultValues(EXPONENT1));\n        this.exponent2 = pvutils.getParametersValue(parameters, EXPONENT2, RSAPrivateKey.defaultValues(EXPONENT2));\n        this.coefficient = pvutils.getParametersValue(parameters, COEFFICIENT, RSAPrivateKey.defaultValues(COEFFICIENT));\n        if (OTHER_PRIME_INFOS in parameters) {\n            this.otherPrimeInfos = pvutils.getParametersValue(parameters, OTHER_PRIME_INFOS, RSAPrivateKey.defaultValues(OTHER_PRIME_INFOS));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$k:\n                return 0;\n            case MODULUS:\n                return new asn1js.Integer();\n            case PUBLIC_EXPONENT:\n                return new asn1js.Integer();\n            case PRIVATE_EXPONENT:\n                return new asn1js.Integer();\n            case PRIME1:\n                return new asn1js.Integer();\n            case PRIME2:\n                return new asn1js.Integer();\n            case EXPONENT1:\n                return new asn1js.Integer();\n            case EXPONENT2:\n                return new asn1js.Integer();\n            case COEFFICIENT:\n                return new asn1js.Integer();\n            case OTHER_PRIME_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.modulus || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.publicExponent || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.privateExponent || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.prime1 || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.prime2 || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.exponent1 || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.exponent2 || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.coefficient || EMPTY_STRING) }),\n                new asn1js.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.otherPrimeInfosName || EMPTY_STRING),\n                            value: OtherPrimeInfo.schema(names.otherPrimeInfo || {})\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$17);\n        const asn1 = asn1js.compareSchema(schema, schema, RSAPrivateKey.schema({\n            names: {\n                version: VERSION$k,\n                modulus: MODULUS,\n                publicExponent: PUBLIC_EXPONENT,\n                privateExponent: PRIVATE_EXPONENT,\n                prime1: PRIME1,\n                prime2: PRIME2,\n                exponent1: EXPONENT1,\n                exponent2: EXPONENT2,\n                coefficient: COEFFICIENT,\n                otherPrimeInfo: {\n                    names: {\n                        blockName: OTHER_PRIME_INFOS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.modulus = asn1.result.modulus.convertFromDER(256);\n        this.publicExponent = asn1.result.publicExponent;\n        this.privateExponent = asn1.result.privateExponent.convertFromDER(256);\n        this.prime1 = asn1.result.prime1.convertFromDER(128);\n        this.prime2 = asn1.result.prime2.convertFromDER(128);\n        this.exponent1 = asn1.result.exponent1.convertFromDER(128);\n        this.exponent2 = asn1.result.exponent2.convertFromDER(128);\n        this.coefficient = asn1.result.coefficient.convertFromDER(128);\n        if (OTHER_PRIME_INFOS in asn1.result)\n            this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new OtherPrimeInfo({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(this.modulus.convertToDER());\n        outputArray.push(this.publicExponent);\n        outputArray.push(this.privateExponent.convertToDER());\n        outputArray.push(this.prime1.convertToDER());\n        outputArray.push(this.prime2.convertToDER());\n        outputArray.push(this.exponent1.convertToDER());\n        outputArray.push(this.exponent2.convertToDER());\n        outputArray.push(this.coefficient.convertToDER());\n        if (this.otherPrimeInfos) {\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.otherPrimeInfos, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const jwk = {\n            n: pvtsutils.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),\n            e: pvtsutils.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),\n            d: pvtsutils.Convert.ToBase64Url(this.privateExponent.valueBlock.valueHexView),\n            p: pvtsutils.Convert.ToBase64Url(this.prime1.valueBlock.valueHexView),\n            q: pvtsutils.Convert.ToBase64Url(this.prime2.valueBlock.valueHexView),\n            dp: pvtsutils.Convert.ToBase64Url(this.exponent1.valueBlock.valueHexView),\n            dq: pvtsutils.Convert.ToBase64Url(this.exponent2.valueBlock.valueHexView),\n            qi: pvtsutils.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView),\n        };\n        if (this.otherPrimeInfos) {\n            jwk.oth = Array.from(this.otherPrimeInfos, o => o.toJSON());\n        }\n        return jwk;\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\");\n        this.modulus = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.n) });\n        this.publicExponent = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.e) });\n        this.privateExponent = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.d) });\n        this.prime1 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.p) });\n        this.prime2 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.q) });\n        this.exponent1 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.dp) });\n        this.exponent2 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.dq) });\n        this.coefficient = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.qi) });\n        if (json.oth) {\n            this.otherPrimeInfos = Array.from(json.oth, (element) => new OtherPrimeInfo({ json: element }));\n        }\n    }\n}\nRSAPrivateKey.CLASS_NAME = \"RSAPrivateKey\";\n\nconst VERSION$j = \"version\";\nconst PRIVATE_KEY_ALGORITHM = \"privateKeyAlgorithm\";\nconst PRIVATE_KEY = \"privateKey\";\nconst ATTRIBUTES$5 = \"attributes\";\nconst PARSED_KEY = \"parsedKey\";\nconst CLEAR_PROPS$16 = [\n    VERSION$j,\n    PRIVATE_KEY_ALGORITHM,\n    PRIVATE_KEY,\n    ATTRIBUTES$5\n];\nclass PrivateKeyInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$j, PrivateKeyInfo.defaultValues(VERSION$j));\n        this.privateKeyAlgorithm = pvutils.getParametersValue(parameters, PRIVATE_KEY_ALGORITHM, PrivateKeyInfo.defaultValues(PRIVATE_KEY_ALGORITHM));\n        this.privateKey = pvutils.getParametersValue(parameters, PRIVATE_KEY, PrivateKeyInfo.defaultValues(PRIVATE_KEY));\n        if (ATTRIBUTES$5 in parameters) {\n            this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$5, PrivateKeyInfo.defaultValues(ATTRIBUTES$5));\n        }\n        if (PARSED_KEY in parameters) {\n            this.parsedKey = pvutils.getParametersValue(parameters, PARSED_KEY, PrivateKeyInfo.defaultValues(PARSED_KEY));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$j:\n                return 0;\n            case PRIVATE_KEY_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case PRIVATE_KEY:\n                return new asn1js.OctetString();\n            case ATTRIBUTES$5:\n                return [];\n            case PARSED_KEY:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                AlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\n                new asn1js.OctetString({ name: (names.privateKey || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.attributes || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$16);\n        const asn1 = asn1js.compareSchema(schema, schema, PrivateKeyInfo.schema({\n            names: {\n                version: VERSION$j,\n                privateKeyAlgorithm: {\n                    names: {\n                        blockName: PRIVATE_KEY_ALGORITHM\n                    }\n                },\n                privateKey: PRIVATE_KEY,\n                attributes: ATTRIBUTES$5\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\n        this.privateKey = asn1.result.privateKey;\n        if (ATTRIBUTES$5 in asn1.result)\n            this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n        switch (this.privateKeyAlgorithm.algorithmId) {\n            case \"1.2.840.113549.1.1.1\":\n                {\n                    const privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHexView);\n                    if (privateKeyASN1.offset !== -1)\n                        this.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\n                }\n                break;\n            case \"1.2.840.10045.2.1\":\n                if (\"algorithmParams\" in this.privateKeyAlgorithm) {\n                    if (this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier) {\n                        const privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHexView);\n                        if (privateKeyASN1.offset !== -1) {\n                            this.parsedKey = new ECPrivateKey({\n                                namedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\n                                schema: privateKeyASN1.result\n                            });\n                        }\n                    }\n                }\n                break;\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js.Integer({ value: this.version }),\n            this.privateKeyAlgorithm.toSchema(),\n            this.privateKey\n        ];\n        if (this.attributes) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.attributes, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        if (!this.parsedKey) {\n            const object = {\n                version: this.version,\n                privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\n                privateKey: this.privateKey.toJSON(),\n            };\n            if (this.attributes) {\n                object.attributes = Array.from(this.attributes, o => o.toJSON());\n            }\n            return object;\n        }\n        const jwk = {};\n        switch (this.privateKeyAlgorithm.algorithmId) {\n            case \"1.2.840.10045.2.1\":\n                jwk.kty = \"EC\";\n                break;\n            case \"1.2.840.113549.1.1.1\":\n                jwk.kty = \"RSA\";\n                break;\n        }\n        const publicKeyJWK = this.parsedKey.toJSON();\n        Object.assign(jwk, publicKeyJWK);\n        return jwk;\n    }\n    fromJSON(json) {\n        if (\"kty\" in json) {\n            switch (json.kty.toUpperCase()) {\n                case \"EC\":\n                    this.parsedKey = new ECPrivateKey({ json });\n                    this.privateKeyAlgorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.10045.2.1\",\n                        algorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n                    });\n                    break;\n                case \"RSA\":\n                    this.parsedKey = new RSAPrivateKey({ json });\n                    this.privateKeyAlgorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.113549.1.1.1\",\n                        algorithmParams: new asn1js.Null()\n                    });\n                    break;\n                default:\n                    throw new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n            }\n            this.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n        }\n    }\n}\nPrivateKeyInfo.CLASS_NAME = \"PrivateKeyInfo\";\n\nconst CONTENT_TYPE$1 = \"contentType\";\nconst CONTENT_ENCRYPTION_ALGORITHM = \"contentEncryptionAlgorithm\";\nconst ENCRYPTED_CONTENT = \"encryptedContent\";\nconst CLEAR_PROPS$15 = [\n    CONTENT_TYPE$1,\n    CONTENT_ENCRYPTION_ALGORITHM,\n    ENCRYPTED_CONTENT,\n];\nconst PIECE_SIZE = 1024;\nclass EncryptedContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.contentType = pvutils.getParametersValue(parameters, CONTENT_TYPE$1, EncryptedContentInfo.defaultValues(CONTENT_TYPE$1));\n        this.contentEncryptionAlgorithm = pvutils.getParametersValue(parameters, CONTENT_ENCRYPTION_ALGORITHM, EncryptedContentInfo.defaultValues(CONTENT_ENCRYPTION_ALGORITHM));\n        if (ENCRYPTED_CONTENT in parameters && parameters.encryptedContent) {\n            this.encryptedContent = parameters.encryptedContent;\n            if ((this.encryptedContent.idBlock.tagClass === 1) &&\n                (this.encryptedContent.idBlock.tagNumber === 4)) {\n                if (this.encryptedContent.idBlock.isConstructed === false && !parameters.disableSplit) {\n                    const constrString = new asn1js.OctetString({\n                        idBlock: { isConstructed: true },\n                        isConstructed: true\n                    });\n                    let offset = 0;\n                    const valueHex = this.encryptedContent.valueBlock.valueHexView.slice().buffer;\n                    let length = valueHex.byteLength;\n                    while (length > 0) {\n                        const pieceView = new Uint8Array(valueHex, offset, ((offset + PIECE_SIZE) > valueHex.byteLength) ? (valueHex.byteLength - offset) : PIECE_SIZE);\n                        const _array = new ArrayBuffer(pieceView.length);\n                        const _view = new Uint8Array(_array);\n                        for (let i = 0; i < _view.length; i++)\n                            _view[i] = pieceView[i];\n                        constrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\n                        length -= pieceView.length;\n                        offset += pieceView.length;\n                    }\n                    this.encryptedContent = constrString;\n                }\n            }\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CONTENT_TYPE$1:\n                return EMPTY_STRING;\n            case CONTENT_ENCRYPTION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_CONTENT:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CONTENT_TYPE$1:\n                return (memberValue === EMPTY_STRING);\n            case CONTENT_ENCRYPTION_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_CONTENT:\n                return (memberValue.isEqual(EncryptedContentInfo.defaultValues(ENCRYPTED_CONTENT)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.contentType || EMPTY_STRING) }),\n                AlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.Constructed({\n                            name: (names.encryptedContent || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [\n                                new asn1js.Repeated({\n                                    value: new asn1js.OctetString()\n                                })\n                            ]\n                        }),\n                        new asn1js.Primitive({\n                            name: (names.encryptedContent || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$15);\n        const asn1 = asn1js.compareSchema(schema, schema, EncryptedContentInfo.schema({\n            names: {\n                contentType: CONTENT_TYPE$1,\n                contentEncryptionAlgorithm: {\n                    names: {\n                        blockName: CONTENT_ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedContent: ENCRYPTED_CONTENT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.contentType = asn1.result.contentType.valueBlock.toString();\n        this.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\n        if (ENCRYPTED_CONTENT in asn1.result) {\n            this.encryptedContent = asn1.result.encryptedContent;\n            this.encryptedContent.idBlock.tagClass = 1;\n            this.encryptedContent.idBlock.tagNumber = 4;\n        }\n    }\n    toSchema() {\n        const sequenceLengthBlock = {\n            isIndefiniteForm: false\n        };\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));\n        outputArray.push(this.contentEncryptionAlgorithm.toSchema());\n        if (this.encryptedContent) {\n            sequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n            const encryptedValue = this.encryptedContent;\n            encryptedValue.idBlock.tagClass = 3;\n            encryptedValue.idBlock.tagNumber = 0;\n            encryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n            outputArray.push(encryptedValue);\n        }\n        return (new asn1js.Sequence({\n            lenBlock: sequenceLengthBlock,\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            contentType: this.contentType,\n            contentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\n        };\n        if (this.encryptedContent) {\n            res.encryptedContent = this.encryptedContent.toJSON();\n        }\n        return res;\n    }\n    getEncryptedContent() {\n        if (!this.encryptedContent) {\n            throw new Error(\"Parameter 'encryptedContent' is undefined\");\n        }\n        return asn1js.OctetString.prototype.getValue.call(this.encryptedContent);\n    }\n}\nEncryptedContentInfo.CLASS_NAME = \"EncryptedContentInfo\";\n\nconst HASH_ALGORITHM$4 = \"hashAlgorithm\";\nconst MASK_GEN_ALGORITHM$1 = \"maskGenAlgorithm\";\nconst SALT_LENGTH = \"saltLength\";\nconst TRAILER_FIELD = \"trailerField\";\nconst CLEAR_PROPS$14 = [\n    HASH_ALGORITHM$4,\n    MASK_GEN_ALGORITHM$1,\n    SALT_LENGTH,\n    TRAILER_FIELD\n];\nclass RSASSAPSSParams extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$4, RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4));\n        this.maskGenAlgorithm = pvutils.getParametersValue(parameters, MASK_GEN_ALGORITHM$1, RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1));\n        this.saltLength = pvutils.getParametersValue(parameters, SALT_LENGTH, RSASSAPSSParams.defaultValues(SALT_LENGTH));\n        this.trailerField = pvutils.getParametersValue(parameters, TRAILER_FIELD, RSASSAPSSParams.defaultValues(TRAILER_FIELD));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$4:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js.Null()\n                });\n            case MASK_GEN_ALGORITHM$1:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.8\",\n                    algorithmParams: (new AlgorithmIdentifier({\n                        algorithmId: \"1.3.14.3.2.26\",\n                        algorithmParams: new asn1js.Null()\n                    })).toSchema()\n                });\n            case SALT_LENGTH:\n                return 20;\n            case TRAILER_FIELD:\n                return 1;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    optional: true,\n                    value: [new asn1js.Integer({ name: (names.saltLength || EMPTY_STRING) })]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    optional: true,\n                    value: [new asn1js.Integer({ name: (names.trailerField || EMPTY_STRING) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$14);\n        const asn1 = asn1js.compareSchema(schema, schema, RSASSAPSSParams.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM$4\n                    }\n                },\n                maskGenAlgorithm: {\n                    names: {\n                        blockName: MASK_GEN_ALGORITHM$1\n                    }\n                },\n                saltLength: SALT_LENGTH,\n                trailerField: TRAILER_FIELD\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (HASH_ALGORITHM$4 in asn1.result)\n            this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        if (MASK_GEN_ALGORITHM$1 in asn1.result)\n            this.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\n        if (SALT_LENGTH in asn1.result)\n            this.saltLength = asn1.result.saltLength.valueBlock.valueDec;\n        if (TRAILER_FIELD in asn1.result)\n            this.trailerField = asn1.result.trailerField.valueBlock.valueDec;\n    }\n    toSchema() {\n        const outputArray = [];\n        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.hashAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.maskGenAlgorithm.toSchema()]\n            }));\n        }\n        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: [new asn1js.Integer({ value: this.saltLength })]\n            }));\n        }\n        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [new asn1js.Integer({ value: this.trailerField })]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {\n            res.hashAlgorithm = this.hashAlgorithm.toJSON();\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {\n            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\n        }\n        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {\n            res.saltLength = this.saltLength;\n        }\n        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {\n            res.trailerField = this.trailerField;\n        }\n        return res;\n    }\n}\nRSASSAPSSParams.CLASS_NAME = \"RSASSAPSSParams\";\n\nconst SALT = \"salt\";\nconst ITERATION_COUNT = \"iterationCount\";\nconst KEY_LENGTH = \"keyLength\";\nconst PRF = \"prf\";\nconst CLEAR_PROPS$13 = [\n    SALT,\n    ITERATION_COUNT,\n    KEY_LENGTH,\n    PRF\n];\nclass PBKDF2Params extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.salt = pvutils.getParametersValue(parameters, SALT, PBKDF2Params.defaultValues(SALT));\n        this.iterationCount = pvutils.getParametersValue(parameters, ITERATION_COUNT, PBKDF2Params.defaultValues(ITERATION_COUNT));\n        if (KEY_LENGTH in parameters) {\n            this.keyLength = pvutils.getParametersValue(parameters, KEY_LENGTH, PBKDF2Params.defaultValues(KEY_LENGTH));\n        }\n        if (PRF in parameters) {\n            this.prf = pvutils.getParametersValue(parameters, PRF, PBKDF2Params.defaultValues(PRF));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SALT:\n                return {};\n            case ITERATION_COUNT:\n                return (-1);\n            case KEY_LENGTH:\n                return 0;\n            case PRF:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js.Null()\n                });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.OctetString({ name: (names.saltPrimitive || EMPTY_STRING) }),\n                        AlgorithmIdentifier.schema(names.saltConstructed || {})\n                    ]\n                }),\n                new asn1js.Integer({ name: (names.iterationCount || EMPTY_STRING) }),\n                new asn1js.Integer({\n                    name: (names.keyLength || EMPTY_STRING),\n                    optional: true\n                }),\n                AlgorithmIdentifier.schema(names.prf || {\n                    names: {\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$13);\n        const asn1 = asn1js.compareSchema(schema, schema, PBKDF2Params.schema({\n            names: {\n                saltPrimitive: SALT,\n                saltConstructed: {\n                    names: {\n                        blockName: SALT\n                    }\n                },\n                iterationCount: ITERATION_COUNT,\n                keyLength: KEY_LENGTH,\n                prf: {\n                    names: {\n                        blockName: PRF,\n                        optional: true\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.salt = asn1.result.salt;\n        this.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\n        if (KEY_LENGTH in asn1.result)\n            this.keyLength = asn1.result.keyLength.valueBlock.valueDec;\n        if (PRF in asn1.result)\n            this.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.salt);\n        outputArray.push(new asn1js.Integer({ value: this.iterationCount }));\n        if (KEY_LENGTH in this) {\n            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength)\n                outputArray.push(new asn1js.Integer({ value: this.keyLength }));\n        }\n        if (this.prf) {\n            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false)\n                outputArray.push(this.prf.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            salt: this.salt.toJSON(),\n            iterationCount: this.iterationCount\n        };\n        if (KEY_LENGTH in this) {\n            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength)\n                res.keyLength = this.keyLength;\n        }\n        if (this.prf) {\n            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false)\n                res.prf = this.prf.toJSON();\n        }\n        return res;\n    }\n}\nPBKDF2Params.CLASS_NAME = \"PBKDF2Params\";\n\nconst KEY_DERIVATION_FUNC = \"keyDerivationFunc\";\nconst ENCRYPTION_SCHEME = \"encryptionScheme\";\nconst CLEAR_PROPS$12 = [\n    KEY_DERIVATION_FUNC,\n    ENCRYPTION_SCHEME\n];\nclass PBES2Params extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyDerivationFunc = pvutils.getParametersValue(parameters, KEY_DERIVATION_FUNC, PBES2Params.defaultValues(KEY_DERIVATION_FUNC));\n        this.encryptionScheme = pvutils.getParametersValue(parameters, ENCRYPTION_SCHEME, PBES2Params.defaultValues(ENCRYPTION_SCHEME));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_DERIVATION_FUNC:\n                return new AlgorithmIdentifier();\n            case ENCRYPTION_SCHEME:\n                return new AlgorithmIdentifier();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.keyDerivationFunc || {}),\n                AlgorithmIdentifier.schema(names.encryptionScheme || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$12);\n        const asn1 = asn1js.compareSchema(schema, schema, PBES2Params.schema({\n            names: {\n                keyDerivationFunc: {\n                    names: {\n                        blockName: KEY_DERIVATION_FUNC\n                    }\n                },\n                encryptionScheme: {\n                    names: {\n                        blockName: ENCRYPTION_SCHEME\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyDerivationFunc = new AlgorithmIdentifier({ schema: asn1.result.keyDerivationFunc });\n        this.encryptionScheme = new AlgorithmIdentifier({ schema: asn1.result.encryptionScheme });\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.keyDerivationFunc.toSchema(),\n                this.encryptionScheme.toSchema()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            keyDerivationFunc: this.keyDerivationFunc.toJSON(),\n            encryptionScheme: this.encryptionScheme.toJSON()\n        };\n    }\n}\nPBES2Params.CLASS_NAME = \"PBES2Params\";\n\nclass AbstractCryptoEngine {\n    constructor(parameters) {\n        this.crypto = parameters.crypto;\n        this.subtle = \"webkitSubtle\" in parameters.crypto\n            ? parameters.crypto.webkitSubtle\n            : parameters.crypto.subtle;\n        this.name = pvutils.getParametersValue(parameters, \"name\", EMPTY_STRING);\n    }\n    async encrypt(...args) {\n        return this.subtle.encrypt(...args);\n    }\n    async decrypt(...args) {\n        return this.subtle.decrypt(...args);\n    }\n    sign(...args) {\n        return this.subtle.sign(...args);\n    }\n    async verify(...args) {\n        return this.subtle.verify(...args);\n    }\n    async digest(...args) {\n        return this.subtle.digest(...args);\n    }\n    async generateKey(...args) {\n        return this.subtle.generateKey(...args);\n    }\n    async deriveKey(...args) {\n        return this.subtle.deriveKey(...args);\n    }\n    async deriveBits(...args) {\n        return this.subtle.deriveBits(...args);\n    }\n    async wrapKey(...args) {\n        return this.subtle.wrapKey(...args);\n    }\n    async unwrapKey(...args) {\n        return this.subtle.unwrapKey(...args);\n    }\n    exportKey(...args) {\n        return this.subtle.exportKey(...args);\n    }\n    importKey(...args) {\n        return this.subtle.importKey(...args);\n    }\n    getRandomValues(array) {\n        return this.crypto.getRandomValues(array);\n    }\n}\n\nasync function makePKCS12B2Key(hashAlgorithm, keyLength, password, salt, iterationCount) {\n    let u;\n    let v;\n    let md;\n    switch (hashAlgorithm.toUpperCase()) {\n        case \"SHA-1\":\n            u = 20;\n            v = 64;\n            md = sha1;\n            break;\n        case \"SHA-256\":\n            u = 32;\n            v = 64;\n            md = sha256;\n            break;\n        case \"SHA-384\":\n            u = 48;\n            v = 128;\n            md = sha384;\n            break;\n        case \"SHA-512\":\n            u = 64;\n            v = 128;\n            md = sha512;\n            break;\n        default:\n            throw new Error(\"Unsupported hashing algorithm\");\n    }\n    const originalPassword = new Uint8Array(password);\n    let decodedPassword = new TextDecoder().decode(password);\n    const encodedPassword = new TextEncoder().encode(decodedPassword);\n    if (encodedPassword.some((byte, i) => byte !== originalPassword[i])) {\n        decodedPassword = String.fromCharCode(...originalPassword);\n    }\n    const passwordTransformed = new Uint8Array(decodedPassword.length * 2 + 2);\n    const passwordView = new DataView(passwordTransformed.buffer);\n    for (let i = 0; i < decodedPassword.length; i++) {\n        passwordView.setUint16(i * 2, decodedPassword.charCodeAt(i), false);\n    }\n    passwordView.setUint16(decodedPassword.length * 2, 0, false);\n    const D = new Uint8Array(v).fill(3);\n    const saltView = new Uint8Array(salt);\n    const S = new Uint8Array(v * Math.ceil(saltView.length / v)).map((_, i) => saltView[i % saltView.length]);\n    const P = new Uint8Array(v * Math.ceil(passwordTransformed.length / v)).map((_, i) => passwordTransformed[i % passwordTransformed.length]);\n    let I = new Uint8Array(S.length + P.length);\n    I.set(S);\n    I.set(P, S.length);\n    const c = Math.ceil((keyLength >> 3) / u);\n    const result = [];\n    for (let i = 0; i < c; i++) {\n        let A = new Uint8Array(D.length + I.length);\n        A.set(D);\n        A.set(I, D.length);\n        for (let j = 0; j < iterationCount; j++) {\n            A = md(A);\n        }\n        const B = new Uint8Array(v).map((_, i) => A[i % A.length]);\n        const k = Math.ceil(saltView.length / v) + Math.ceil(passwordTransformed.length / v);\n        const iRound = [];\n        for (let j = 0; j < k; j++) {\n            const chunk = Array.from(I.slice(j * v, (j + 1) * v));\n            let x = 0x1ff;\n            for (let l = B.length - 1; l >= 0; l--) {\n                x >>= 8;\n                x += B[l] + (chunk[l] || 0);\n                chunk[l] = x & 0xff;\n            }\n            iRound.push(...chunk);\n        }\n        I = new Uint8Array(iRound);\n        result.push(...A);\n    }\n    return new Uint8Array(result.slice(0, keyLength >> 3)).buffer;\n}\nfunction prepareAlgorithm(data) {\n    const res = typeof data === \"string\"\n        ? { name: data }\n        : data;\n    if (\"hash\" in res) {\n        return {\n            ...res,\n            hash: prepareAlgorithm(res.hash)\n        };\n    }\n    return res;\n}\nclass CryptoEngine extends AbstractCryptoEngine {\n    async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        var _a, _b, _c, _d, _e, _f;\n        let jwk = {};\n        const alg = prepareAlgorithm(algorithm);\n        switch (format.toLowerCase()) {\n            case \"raw\":\n                return this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\n            case \"spki\":\n                {\n                    const asn1 = asn1js.fromBER(pvtsutils.BufferSourceConverter.toArrayBuffer(keyData));\n                    AsnError.assert(asn1, \"keyData\");\n                    const publicKeyInfo = new PublicKeyInfo();\n                    try {\n                        publicKeyInfo.fromSchema(asn1.result);\n                    }\n                    catch {\n                        throw new ArgumentError(\"Incorrect keyData\");\n                    }\n                    switch (alg.name.toUpperCase()) {\n                        case \"RSA-PSS\":\n                            {\n                                if (!alg.hash) {\n                                    throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                }\n                                switch (alg.hash.name.toUpperCase()) {\n                                    case \"SHA-1\":\n                                        jwk.alg = \"PS1\";\n                                        break;\n                                    case \"SHA-256\":\n                                        jwk.alg = \"PS256\";\n                                        break;\n                                    case \"SHA-384\":\n                                        jwk.alg = \"PS384\";\n                                        break;\n                                    case \"SHA-512\":\n                                        jwk.alg = \"PS512\";\n                                        break;\n                                    default:\n                                        throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                }\n                            }\n                        case \"RSASSA-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"verify\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\n                                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n                                if (!jwk.alg) {\n                                    if (!alg.hash) {\n                                        throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                    }\n                                    switch (alg.hash.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RS1\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RS256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RS384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RS512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                    }\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"ECDSA\":\n                            keyUsages = [\"verify\"];\n                        case \"ECDH\":\n                            {\n                                jwk = {\n                                    kty: \"EC\",\n                                    ext: extractable,\n                                    key_ops: keyUsages\n                                };\n                                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\") {\n                                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"RSA-OAEP\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (this.name.toLowerCase() === \"safari\")\n                                    jwk.alg = \"RSA-OAEP\";\n                                else {\n                                    if (!alg.hash) {\n                                        throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                    }\n                                    switch (alg.hash.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RSA-OAEP\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RSA-OAEP-256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RSA-OAEP-384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RSA-OAEP-512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                    }\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"RSAES-PKCS1-V1_5\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                jwk.alg = \"PS1\";\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);\n                    }\n                }\n                break;\n            case \"pkcs8\":\n                {\n                    const privateKeyInfo = new PrivateKeyInfo();\n                    const asn1 = asn1js.fromBER(pvtsutils.BufferSourceConverter.toArrayBuffer(keyData));\n                    AsnError.assert(asn1, \"keyData\");\n                    try {\n                        privateKeyInfo.fromSchema(asn1.result);\n                    }\n                    catch (ex) {\n                        throw new Error(\"Incorrect keyData\");\n                    }\n                    if (!privateKeyInfo.parsedKey)\n                        throw new Error(\"Incorrect keyData\");\n                    switch (alg.name.toUpperCase()) {\n                        case \"RSA-PSS\":\n                            {\n                                switch ((_a = alg.hash) === null || _a === void 0 ? void 0 : _a.name.toUpperCase()) {\n                                    case \"SHA-1\":\n                                        jwk.alg = \"PS1\";\n                                        break;\n                                    case \"SHA-256\":\n                                        jwk.alg = \"PS256\";\n                                        break;\n                                    case \"SHA-384\":\n                                        jwk.alg = \"PS384\";\n                                        break;\n                                    case \"SHA-512\":\n                                        jwk.alg = \"PS512\";\n                                        break;\n                                    default:\n                                        throw new Error(`Incorrect hash algorithm: ${(_b = alg.hash) === null || _b === void 0 ? void 0 : _b.name.toUpperCase()}`);\n                                }\n                            }\n                        case \"RSASSA-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"sign\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\n                                    throw new Error(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\n                                if ((\"alg\" in jwk) === false) {\n                                    switch ((_c = alg.hash) === null || _c === void 0 ? void 0 : _c.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RS1\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RS256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RS384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RS512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${(_d = alg.hash) === null || _d === void 0 ? void 0 : _d.name.toUpperCase()}`);\n                                    }\n                                }\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"ECDSA\":\n                            keyUsages = [\"sign\"];\n                        case \"ECDH\":\n                            {\n                                jwk = {\n                                    kty: \"EC\",\n                                    ext: extractable,\n                                    key_ops: keyUsages\n                                };\n                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\n                                    throw new Error(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"RSA-OAEP\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (this.name.toLowerCase() === \"safari\")\n                                    jwk.alg = \"RSA-OAEP\";\n                                else {\n                                    switch ((_e = alg.hash) === null || _e === void 0 ? void 0 : _e.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RSA-OAEP\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RSA-OAEP-256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RSA-OAEP-384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RSA-OAEP-512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${(_f = alg.hash) === null || _f === void 0 ? void 0 : _f.name.toUpperCase()}`);\n                                    }\n                                }\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"RSAES-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"decrypt\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                jwk.alg = \"PS1\";\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);\n                    }\n                }\n                break;\n            case \"jwk\":\n                jwk = keyData;\n                break;\n            default:\n                throw new Error(`Incorrect format: ${format}`);\n        }\n        if (this.name.toLowerCase() === \"safari\") {\n            try {\n                return this.subtle.importKey(\"jwk\", pvutils.stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages);\n            }\n            catch {\n                return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n            }\n        }\n        return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n    }\n    async exportKey(format, key) {\n        let jwk = await this.subtle.exportKey(\"jwk\", key);\n        if (this.name.toLowerCase() === \"safari\") {\n            if (jwk instanceof ArrayBuffer) {\n                jwk = JSON.parse(pvutils.arrayBufferToString(jwk));\n            }\n        }\n        switch (format.toLowerCase()) {\n            case \"raw\":\n                return this.subtle.exportKey(\"raw\", key);\n            case \"spki\": {\n                const publicKeyInfo = new PublicKeyInfo();\n                try {\n                    publicKeyInfo.fromJSON(jwk);\n                }\n                catch (ex) {\n                    throw new Error(\"Incorrect key data\");\n                }\n                return publicKeyInfo.toSchema().toBER(false);\n            }\n            case \"pkcs8\": {\n                const privateKeyInfo = new PrivateKeyInfo();\n                try {\n                    privateKeyInfo.fromJSON(jwk);\n                }\n                catch (ex) {\n                    throw new Error(\"Incorrect key data\");\n                }\n                return privateKeyInfo.toSchema().toBER(false);\n            }\n            case \"jwk\":\n                return jwk;\n            default:\n                throw new Error(`Incorrect format: ${format}`);\n        }\n    }\n    async convert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {\n        if (inputFormat.toLowerCase() === outputFormat.toLowerCase()) {\n            return keyData;\n        }\n        const key = await this.importKey(inputFormat, keyData, algorithm, extractable, keyUsages);\n        return this.exportKey(outputFormat, key);\n    }\n    getAlgorithmByOID(oid, safety = false, target) {\n        switch (oid) {\n            case \"1.2.840.113549.1.1.1\":\n                return {\n                    name: \"RSAES-PKCS1-v1_5\"\n                };\n            case \"1.2.840.113549.1.1.5\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.11\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.12\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.13\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.10\":\n                return {\n                    name: \"RSA-PSS\"\n                };\n            case \"1.2.840.113549.1.1.7\":\n                return {\n                    name: \"RSA-OAEP\"\n                };\n            case \"1.2.840.10045.2.1\":\n            case \"1.2.840.10045.4.1\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.2\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.3\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.4\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.3.133.16.840.63.0.2\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-1\"\n                };\n            case \"1.3.132.1.11.1\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-256\"\n                };\n            case \"1.3.132.1.11.2\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-384\"\n                };\n            case \"1.3.132.1.11.3\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-512\"\n                };\n            case \"2.16.840.1.101.3.4.1.2\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.22\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.42\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.6\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.26\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.46\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.4\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.24\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.44\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.5\":\n                return {\n                    name: \"AES-KW\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.25\":\n                return {\n                    name: \"AES-KW\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.45\":\n                return {\n                    name: \"AES-KW\",\n                    length: 256\n                };\n            case \"1.2.840.113549.2.7\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.113549.2.9\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.113549.2.10\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.113549.2.11\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.2.840.113549.1.9.16.3.5\":\n                return {\n                    name: \"DH\"\n                };\n            case \"1.3.14.3.2.26\":\n                return {\n                    name: \"SHA-1\"\n                };\n            case \"2.16.840.1.101.3.4.2.1\":\n                return {\n                    name: \"SHA-256\"\n                };\n            case \"2.16.840.1.101.3.4.2.2\":\n                return {\n                    name: \"SHA-384\"\n                };\n            case \"2.16.840.1.101.3.4.2.3\":\n                return {\n                    name: \"SHA-512\"\n                };\n            case \"1.2.840.113549.1.5.12\":\n                return {\n                    name: \"PBKDF2\"\n                };\n            case \"1.2.840.10045.3.1.7\":\n                return {\n                    name: \"P-256\"\n                };\n            case \"1.3.132.0.34\":\n                return {\n                    name: \"P-384\"\n                };\n            case \"1.3.132.0.35\":\n                return {\n                    name: \"P-521\"\n                };\n        }\n        if (safety) {\n            throw new Error(`Unsupported algorithm identifier ${target ? `for ${target} ` : EMPTY_STRING}: ${oid}`);\n        }\n        return {};\n    }\n    getOIDByAlgorithm(algorithm, safety = false, target) {\n        let result = EMPTY_STRING;\n        switch (algorithm.name.toUpperCase()) {\n            case \"RSAES-PKCS1-V1_5\":\n                result = \"1.2.840.113549.1.1.1\";\n                break;\n            case \"RSASSA-PKCS1-V1_5\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.113549.1.1.5\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.113549.1.1.11\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.113549.1.1.12\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.113549.1.1.13\";\n                        break;\n                }\n                break;\n            case \"RSA-PSS\":\n                result = \"1.2.840.113549.1.1.10\";\n                break;\n            case \"RSA-OAEP\":\n                result = \"1.2.840.113549.1.1.7\";\n                break;\n            case \"ECDSA\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.10045.4.1\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.10045.4.3.2\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.10045.4.3.3\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.10045.4.3.4\";\n                        break;\n                }\n                break;\n            case \"ECDH\":\n                switch (algorithm.kdf.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.3.133.16.840.63.0.2\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.3.132.1.11.1\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.3.132.1.11.2\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.3.132.1.11.3\";\n                        break;\n                }\n                break;\n            case \"AES-CTR\":\n                break;\n            case \"AES-CBC\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.2\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.22\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.42\";\n                        break;\n                }\n                break;\n            case \"AES-CMAC\":\n                break;\n            case \"AES-GCM\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.6\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.26\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.46\";\n                        break;\n                }\n                break;\n            case \"AES-CFB\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.4\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.24\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.44\";\n                        break;\n                }\n                break;\n            case \"AES-KW\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.5\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.25\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.45\";\n                        break;\n                }\n                break;\n            case \"HMAC\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.113549.2.7\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.113549.2.9\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.113549.2.10\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.113549.2.11\";\n                        break;\n                }\n                break;\n            case \"DH\":\n                result = \"1.2.840.113549.1.9.16.3.5\";\n                break;\n            case \"SHA-1\":\n                result = \"1.3.14.3.2.26\";\n                break;\n            case \"SHA-256\":\n                result = \"2.16.840.1.101.3.4.2.1\";\n                break;\n            case \"SHA-384\":\n                result = \"2.16.840.1.101.3.4.2.2\";\n                break;\n            case \"SHA-512\":\n                result = \"2.16.840.1.101.3.4.2.3\";\n                break;\n            case \"CONCAT\":\n                break;\n            case \"HKDF\":\n                break;\n            case \"PBKDF2\":\n                result = \"1.2.840.113549.1.5.12\";\n                break;\n            case \"P-256\":\n                result = \"1.2.840.10045.3.1.7\";\n                break;\n            case \"P-384\":\n                result = \"1.3.132.0.34\";\n                break;\n            case \"P-521\":\n                result = \"1.3.132.0.35\";\n                break;\n        }\n        if (!result && safety) {\n            throw new Error(`Unsupported algorithm ${target ? `for ${target} ` : EMPTY_STRING}: ${algorithm.name}`);\n        }\n        return result;\n    }\n    getAlgorithmParameters(algorithmName, operation) {\n        let result = {\n            algorithm: {},\n            usages: []\n        };\n        switch (algorithmName.toUpperCase()) {\n            case \"RSAES-PKCS1-V1_5\":\n            case \"RSASSA-PKCS1-V1_5\":\n                switch (operation.toLowerCase()) {\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"verify\":\n                    case \"sign\":\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"RSA-PSS\":\n                switch (operation.toLowerCase()) {\n                    case \"sign\":\n                    case \"verify\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                hash: {\n                                    name: \"SHA-1\"\n                                },\n                                saltLength: 20\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-1\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                hash: {\n                                    name: \"SHA-1\"\n                                }\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSA-PSS\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"RSA-OAEP\":\n                switch (operation.toLowerCase()) {\n                    case \"encrypt\":\n                    case \"decrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\"\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"encrypt\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSA-OAEP\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"ECDSA\":\n                switch (operation.toLowerCase()) {\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"verify\":\n                    case \"sign\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"ECDSA\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"ECDH\":\n                switch (operation.toLowerCase()) {\n                    case \"exportkey\":\n                    case \"importkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDH\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"deriveKey\", \"deriveBits\"]\n                        };\n                        break;\n                    case \"derivekey\":\n                    case \"derivebits\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDH\",\n                                namedCurve: \"P-256\",\n                                public: []\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"ECDH\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-CTR\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CTR\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CTR\",\n                                counter: new Uint8Array(16),\n                                length: 10\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-CTR\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-CBC\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CBC\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CBC\",\n                                iv: this.getRandomValues(new Uint8Array(16))\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-CBC\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-GCM\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-GCM\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-GCM\",\n                                iv: this.getRandomValues(new Uint8Array(16))\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-GCM\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-KW\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                    case \"wrapkey\":\n                    case \"unwrapkey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-KW\",\n                                length: 256\n                            },\n                            usages: [\"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-KW\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"HMAC\":\n                switch (operation.toLowerCase()) {\n                    case \"sign\":\n                    case \"verify\":\n                        result = {\n                            algorithm: {\n                                name: \"HMAC\"\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"HMAC\",\n                                length: 32,\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"HMAC\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"HKDF\":\n                switch (operation.toLowerCase()) {\n                    case \"derivekey\":\n                        result = {\n                            algorithm: {\n                                name: \"HKDF\",\n                                hash: \"SHA-256\",\n                                salt: new Uint8Array([]),\n                                info: new Uint8Array([])\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"HKDF\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"PBKDF2\":\n                switch (operation.toLowerCase()) {\n                    case \"derivekey\":\n                        result = {\n                            algorithm: {\n                                name: \"PBKDF2\",\n                                hash: { name: \"SHA-256\" },\n                                salt: new Uint8Array([]),\n                                iterations: 10000\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"PBKDF2\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n        }\n        return result;\n    }\n    getHashAlgorithm(signatureAlgorithm) {\n        let result = EMPTY_STRING;\n        switch (signatureAlgorithm.algorithmId) {\n            case \"1.2.840.10045.4.1\":\n            case \"1.2.840.113549.1.1.5\":\n                result = \"SHA-1\";\n                break;\n            case \"1.2.840.10045.4.3.2\":\n            case \"1.2.840.113549.1.1.11\":\n                result = \"SHA-256\";\n                break;\n            case \"1.2.840.10045.4.3.3\":\n            case \"1.2.840.113549.1.1.12\":\n                result = \"SHA-384\";\n                break;\n            case \"1.2.840.10045.4.3.4\":\n            case \"1.2.840.113549.1.1.13\":\n                result = \"SHA-512\";\n                break;\n            case \"1.2.840.113549.1.1.10\":\n                {\n                    try {\n                        const params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\n                        if (params.hashAlgorithm) {\n                            const algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\n                            if (\"name\" in algorithm) {\n                                result = algorithm.name;\n                            }\n                            else {\n                                return EMPTY_STRING;\n                            }\n                        }\n                        else\n                            result = \"SHA-1\";\n                    }\n                    catch {\n                    }\n                }\n                break;\n        }\n        return result;\n    }\n    async encryptEncryptedContentInfo(parameters) {\n        ParameterError.assert(parameters, \"password\", \"contentEncryptionAlgorithm\", \"hmacHashAlgorithm\", \"iterationCount\", \"contentToEncrypt\", \"contentToEncrypt\", \"contentType\");\n        const contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm, true, \"contentEncryptionAlgorithm\");\n        const pbkdf2OID = this.getOIDByAlgorithm({\n            name: \"PBKDF2\"\n        }, true, \"PBKDF2\");\n        const hmacOID = this.getOIDByAlgorithm({\n            name: \"HMAC\",\n            hash: {\n                name: parameters.hmacHashAlgorithm\n            }\n        }, true, \"hmacHashAlgorithm\");\n        const ivBuffer = new ArrayBuffer(16);\n        const ivView = new Uint8Array(ivBuffer);\n        this.getRandomValues(ivView);\n        const saltBuffer = new ArrayBuffer(64);\n        const saltView = new Uint8Array(saltBuffer);\n        this.getRandomValues(saltView);\n        const contentView = new Uint8Array(parameters.contentToEncrypt);\n        const pbkdf2Params = new PBKDF2Params({\n            salt: new asn1js.OctetString({ valueHex: saltBuffer }),\n            iterationCount: parameters.iterationCount,\n            prf: new AlgorithmIdentifier({\n                algorithmId: hmacOID,\n                algorithmParams: new asn1js.Null()\n            })\n        });\n        const passwordView = new Uint8Array(parameters.password);\n        const pbkdfKey = await this.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n        const derivedKey = await this.deriveKey({\n            name: \"PBKDF2\",\n            hash: {\n                name: parameters.hmacHashAlgorithm\n            },\n            salt: saltView,\n            iterations: parameters.iterationCount\n        }, pbkdfKey, parameters.contentEncryptionAlgorithm, false, [\"encrypt\"]);\n        const encryptedData = await this.encrypt({\n            name: parameters.contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, derivedKey, contentView);\n        const pbes2Parameters = new PBES2Params({\n            keyDerivationFunc: new AlgorithmIdentifier({\n                algorithmId: pbkdf2OID,\n                algorithmParams: pbkdf2Params.toSchema()\n            }),\n            encryptionScheme: new AlgorithmIdentifier({\n                algorithmId: contentEncryptionOID,\n                algorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\n            })\n        });\n        return new EncryptedContentInfo({\n            contentType: parameters.contentType,\n            contentEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: \"1.2.840.113549.1.5.13\",\n                algorithmParams: pbes2Parameters.toSchema()\n            }),\n            encryptedContent: new asn1js.OctetString({ valueHex: encryptedData })\n        });\n    }\n    async decryptEncryptedContentInfo(parameters) {\n        ParameterError.assert(parameters, \"password\", \"encryptedContentInfo\");\n        if (parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\")\n            throw new Error(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\n        let pbes2Parameters;\n        try {\n            pbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\n        }\n        catch (ex) {\n            throw new Error(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\n        }\n        let pbkdf2Params;\n        try {\n            pbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\n        }\n        catch (ex) {\n            throw new Error(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\n        }\n        const contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId, true);\n        const ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\n        const ivView = new Uint8Array(ivBuffer);\n        const saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\n        const saltView = new Uint8Array(saltBuffer);\n        const iterationCount = pbkdf2Params.iterationCount;\n        let hmacHashAlgorithm = \"SHA-1\";\n        if (pbkdf2Params.prf) {\n            const algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true);\n            hmacHashAlgorithm = algorithm.hash.name;\n        }\n        const pbkdfKey = await this.importKey(\"raw\", parameters.password, \"PBKDF2\", false, [\"deriveKey\"]);\n        const result = await this.deriveKey({\n            name: \"PBKDF2\",\n            hash: {\n                name: hmacHashAlgorithm\n            },\n            salt: saltView,\n            iterations: iterationCount\n        }, pbkdfKey, contentEncryptionAlgorithm, false, [\"decrypt\"]);\n        const dataBuffer = parameters.encryptedContentInfo.getEncryptedContent();\n        return this.decrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, result, dataBuffer);\n    }\n    async stampDataWithPassword(parameters) {\n        if ((parameters instanceof Object) === false)\n            throw new Error(\"Parameters must have type \\\"Object\\\"\");\n        ParameterError.assert(parameters, \"password\", \"hashAlgorithm\", \"iterationCount\", \"salt\", \"contentToStamp\");\n        let length;\n        switch (parameters.hashAlgorithm.toLowerCase()) {\n            case \"sha-1\":\n                length = 160;\n                break;\n            case \"sha-256\":\n                length = 256;\n                break;\n            case \"sha-384\":\n                length = 384;\n                break;\n            case \"sha-512\":\n                length = 512;\n                break;\n            default:\n                throw new Error(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n        }\n        const hmacAlgorithm = {\n            name: \"HMAC\",\n            length,\n            hash: {\n                name: parameters.hashAlgorithm\n            }\n        };\n        const pkcsKey = await makePKCS12B2Key(parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\n        const hmacKey = await this.importKey(\"raw\", new Uint8Array(pkcsKey), hmacAlgorithm, false, [\"sign\"]);\n        return this.sign(hmacAlgorithm, hmacKey, new Uint8Array(parameters.contentToStamp));\n    }\n    async verifyDataStampedWithPassword(parameters) {\n        ParameterError.assert(parameters, \"password\", \"hashAlgorithm\", \"salt\", \"iterationCount\", \"contentToVerify\", \"signatureToVerify\");\n        let length = 0;\n        switch (parameters.hashAlgorithm.toLowerCase()) {\n            case \"sha-1\":\n                length = 160;\n                break;\n            case \"sha-256\":\n                length = 256;\n                break;\n            case \"sha-384\":\n                length = 384;\n                break;\n            case \"sha-512\":\n                length = 512;\n                break;\n            default:\n                throw new Error(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n        }\n        const hmacAlgorithm = {\n            name: \"HMAC\",\n            length,\n            hash: {\n                name: parameters.hashAlgorithm\n            }\n        };\n        const pkcsKey = await makePKCS12B2Key(parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\n        const hmacKey = await this.importKey(\"raw\", new Uint8Array(pkcsKey), hmacAlgorithm, false, [\"verify\"]);\n        return this.verify(hmacAlgorithm, hmacKey, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify));\n    }\n    async getSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\") {\n        this.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        const signatureAlgorithm = new AlgorithmIdentifier();\n        const parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\n        if (!Object.keys(parameters.algorithm).length) {\n            throw new Error(\"Parameter 'algorithm' is empty\");\n        }\n        const algorithm = parameters.algorithm;\n        if (\"hash\" in privateKey.algorithm && privateKey.algorithm.hash && privateKey.algorithm.hash.name) {\n            algorithm.hash.name = privateKey.algorithm.hash.name;\n        }\n        else {\n            algorithm.hash.name = hashAlgorithm;\n        }\n        switch (privateKey.algorithm.name.toUpperCase()) {\n            case \"RSASSA-PKCS1-V1_5\":\n            case \"ECDSA\":\n                signatureAlgorithm.algorithmId = this.getOIDByAlgorithm(algorithm, true);\n                break;\n            case \"RSA-PSS\":\n                {\n                    switch (algorithm.hash.name.toUpperCase()) {\n                        case \"SHA-256\":\n                            algorithm.saltLength = 32;\n                            break;\n                        case \"SHA-384\":\n                            algorithm.saltLength = 48;\n                            break;\n                        case \"SHA-512\":\n                            algorithm.saltLength = 64;\n                            break;\n                    }\n                    const paramsObject = {};\n                    if (algorithm.hash.name.toUpperCase() !== \"SHA-1\") {\n                        const hashAlgorithmOID = this.getOIDByAlgorithm({ name: algorithm.hash.name }, true, \"hashAlgorithm\");\n                        paramsObject.hashAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: hashAlgorithmOID,\n                            algorithmParams: new asn1js.Null()\n                        });\n                        paramsObject.maskGenAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: \"1.2.840.113549.1.1.8\",\n                            algorithmParams: paramsObject.hashAlgorithm.toSchema()\n                        });\n                    }\n                    if (algorithm.saltLength !== 20)\n                        paramsObject.saltLength = algorithm.saltLength;\n                    const pssParameters = new RSASSAPSSParams(paramsObject);\n                    signatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\n                    signatureAlgorithm.algorithmParams = pssParameters.toSchema();\n                }\n                break;\n            default:\n                throw new Error(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\n        }\n        return {\n            signatureAlgorithm,\n            parameters\n        };\n    }\n    async signWithPrivateKey(data, privateKey, parameters) {\n        const signature = await this.sign(parameters.algorithm, privateKey, data);\n        if (parameters.algorithm.name === \"ECDSA\") {\n            return createCMSECDSASignature(signature);\n        }\n        return signature;\n    }\n    fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm) {\n        const parameters = {};\n        const shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n        if (shaAlgorithm === EMPTY_STRING)\n            throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\n        let algorithmId;\n        if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\n            algorithmId = signatureAlgorithm.algorithmId;\n        else\n            algorithmId = publicKeyInfo.algorithm.algorithmId;\n        const algorithmObject = this.getAlgorithmByOID(algorithmId, true);\n        parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importKey\");\n        if (\"hash\" in parameters.algorithm.algorithm)\n            parameters.algorithm.algorithm.hash.name = shaAlgorithm;\n        if (algorithmObject.name === \"ECDSA\") {\n            const publicKeyAlgorithm = publicKeyInfo.algorithm;\n            if (!publicKeyAlgorithm.algorithmParams) {\n                throw new Error(\"Algorithm parameters for ECDSA public key are missed\");\n            }\n            const publicKeyAlgorithmParams = publicKeyAlgorithm.algorithmParams;\n            if (\"idBlock\" in publicKeyAlgorithm.algorithmParams) {\n                if (!((publicKeyAlgorithmParams.idBlock.tagClass === 1) && (publicKeyAlgorithmParams.idBlock.tagNumber === 6))) {\n                    throw new Error(\"Incorrect type for ECDSA public key parameters\");\n                }\n            }\n            const curveObject = this.getAlgorithmByOID(publicKeyAlgorithmParams.valueBlock.toString(), true);\n            parameters.algorithm.algorithm.namedCurve = curveObject.name;\n        }\n        return parameters;\n    }\n    async getPublicKey(publicKeyInfo, signatureAlgorithm, parameters) {\n        if (!parameters) {\n            parameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\n        }\n        const publicKeyInfoBuffer = publicKeyInfo.toSchema().toBER(false);\n        return this.importKey(\"spki\", publicKeyInfoBuffer, parameters.algorithm.algorithm, true, parameters.algorithm.usages);\n    }\n    async verifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm) {\n        let publicKey;\n        if (!shaAlgorithm) {\n            shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n            if (!shaAlgorithm)\n                throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\n            publicKey = await this.getPublicKey(publicKeyInfo, signatureAlgorithm);\n        }\n        else {\n            const parameters = {};\n            let algorithmId;\n            if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\n                algorithmId = signatureAlgorithm.algorithmId;\n            else\n                algorithmId = publicKeyInfo.algorithm.algorithmId;\n            const algorithmObject = this.getAlgorithmByOID(algorithmId, true);\n            parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importKey\");\n            if (\"hash\" in parameters.algorithm.algorithm)\n                parameters.algorithm.algorithm.hash.name = shaAlgorithm;\n            if (algorithmObject.name === \"ECDSA\") {\n                let algorithmParamsChecked = false;\n                if ((\"algorithmParams\" in publicKeyInfo.algorithm) === true) {\n                    if (\"idBlock\" in publicKeyInfo.algorithm.algorithmParams) {\n                        if ((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\n                            algorithmParamsChecked = true;\n                    }\n                }\n                if (algorithmParamsChecked === false) {\n                    throw new Error(\"Incorrect type for ECDSA public key parameters\");\n                }\n                const curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString(), true);\n                parameters.algorithm.algorithm.namedCurve = curveObject.name;\n            }\n            publicKey = await this.getPublicKey(publicKeyInfo, null, parameters);\n        }\n        const algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\n        if (\"hash\" in algorithm.algorithm)\n            algorithm.algorithm.hash.name = shaAlgorithm;\n        let signatureValue = signature.valueBlock.valueHexView;\n        if (publicKey.algorithm.name === \"ECDSA\") {\n            const namedCurve = ECNamedCurves.find(publicKey.algorithm.namedCurve);\n            if (!namedCurve) {\n                throw new Error(\"Unsupported named curve in use\");\n            }\n            const asn1 = asn1js.fromBER(signatureValue);\n            AsnError.assert(asn1, \"Signature value\");\n            signatureValue = createECDSASignatureFromCMS(asn1.result, namedCurve.size);\n        }\n        if (publicKey.algorithm.name === \"RSA-PSS\") {\n            const pssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\n            if (\"saltLength\" in pssParameters)\n                algorithm.algorithm.saltLength = pssParameters.saltLength;\n            else\n                algorithm.algorithm.saltLength = 20;\n            let hashAlgo = \"SHA-1\";\n            if (\"hashAlgorithm\" in pssParameters) {\n                const hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId, true);\n                hashAlgo = hashAlgorithm.name;\n            }\n            algorithm.algorithm.hash.name = hashAlgo;\n        }\n        return this.verify(algorithm.algorithm, publicKey, signatureValue, data);\n    }\n}\n\nlet engine = {\n    name: \"none\",\n    crypto: null,\n};\nfunction isCryptoEngine(engine) {\n    return engine\n        && typeof engine === \"object\"\n        && \"crypto\" in engine\n        ? true\n        : false;\n}\nfunction setEngine(name, ...args) {\n    let crypto = null;\n    if (args.length < 2) {\n        if (args.length) {\n            crypto = args[0];\n        }\n        else {\n            crypto = typeof self !== \"undefined\" && self.crypto ? new CryptoEngine({ name: \"browser\", crypto: self.crypto }) : null;\n        }\n    }\n    else {\n        const cryptoArg = args[0];\n        const subtleArg = args[1];\n        if (isCryptoEngine(subtleArg)) {\n            crypto = subtleArg;\n        }\n        else if (isCryptoEngine(cryptoArg)) {\n            crypto = cryptoArg;\n        }\n        else if (\"subtle\" in cryptoArg && \"getRandomValues\" in cryptoArg) {\n            crypto = new CryptoEngine({\n                crypto: cryptoArg,\n            });\n        }\n    }\n    if ((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\")) {\n        if (typeof global[process.pid] === \"undefined\") {\n            global[process.pid] = {};\n        }\n        else {\n            if (typeof global[process.pid] !== \"object\") {\n                throw new Error(`Name global.${process.pid} already exists and it is not an object`);\n            }\n        }\n        if (typeof global[process.pid].pkijs === \"undefined\") {\n            global[process.pid].pkijs = {};\n        }\n        else {\n            if (typeof global[process.pid].pkijs !== \"object\") {\n                throw new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);\n            }\n        }\n        global[process.pid].pkijs.engine = {\n            name: name,\n            crypto,\n        };\n    }\n    else {\n        engine = {\n            name: name,\n            crypto,\n        };\n    }\n}\nfunction getEngine() {\n    if ((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\")) {\n        let _engine;\n        try {\n            _engine = global[process.pid].pkijs.engine;\n        }\n        catch (ex) {\n            throw new Error(\"Please call 'setEngine' before call to 'getEngine'\");\n        }\n        return _engine;\n    }\n    return engine;\n}\nfunction getCrypto(safety = false) {\n    const _engine = getEngine();\n    if (!_engine.crypto && safety) {\n        throw new Error(\"Unable to create WebCrypto object\");\n    }\n    return _engine.crypto;\n}\nfunction getRandomValues(view) {\n    return getCrypto(true).getRandomValues(view);\n}\nfunction getOIDByAlgorithm(algorithm, safety, target) {\n    return getCrypto(true).getOIDByAlgorithm(algorithm, safety, target);\n}\nfunction getAlgorithmParameters(algorithmName, operation) {\n    return getCrypto(true).getAlgorithmParameters(algorithmName, operation);\n}\nfunction createCMSECDSASignature(signatureBuffer) {\n    if ((signatureBuffer.byteLength % 2) !== 0)\n        return EMPTY_BUFFER;\n    const length = signatureBuffer.byteLength / 2;\n    const rBuffer = new ArrayBuffer(length);\n    const rView = new Uint8Array(rBuffer);\n    rView.set(new Uint8Array(signatureBuffer, 0, length));\n    const rInteger = new asn1js.Integer({ valueHex: rBuffer });\n    const sBuffer = new ArrayBuffer(length);\n    const sView = new Uint8Array(sBuffer);\n    sView.set(new Uint8Array(signatureBuffer, length, length));\n    const sInteger = new asn1js.Integer({ valueHex: sBuffer });\n    return (new asn1js.Sequence({\n        value: [\n            rInteger.convertToDER(),\n            sInteger.convertToDER()\n        ]\n    })).toBER(false);\n}\nfunction createECDSASignatureFromCMS(cmsSignature, pointSize) {\n    if (!(cmsSignature instanceof asn1js.Sequence\n        && cmsSignature.valueBlock.value.length === 2\n        && cmsSignature.valueBlock.value[0] instanceof asn1js.Integer\n        && cmsSignature.valueBlock.value[1] instanceof asn1js.Integer))\n        return EMPTY_BUFFER;\n    const rValueView = cmsSignature.valueBlock.value[0].convertFromDER().valueBlock.valueHexView;\n    const sValueView = cmsSignature.valueBlock.value[1].convertFromDER().valueBlock.valueHexView;\n    const res = new Uint8Array(pointSize * 2);\n    res.set(rValueView, pointSize - rValueView.byteLength);\n    res.set(sValueView, (2 * pointSize) - sValueView.byteLength);\n    return res.buffer;\n}\nfunction getAlgorithmByOID(oid, safety = false, target) {\n    return getCrypto(true).getAlgorithmByOID(oid, safety, target);\n}\nfunction getHashAlgorithm(signatureAlgorithm) {\n    return getCrypto(true).getHashAlgorithm(signatureAlgorithm);\n}\nasync function kdfWithCounter(hashFunction, zBuffer, Counter, SharedInfo, crypto) {\n    switch (hashFunction.toUpperCase()) {\n        case \"SHA-1\":\n        case \"SHA-256\":\n        case \"SHA-384\":\n        case \"SHA-512\":\n            break;\n        default:\n            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);\n    }\n    ArgumentError.assert(zBuffer, \"zBuffer\", \"ArrayBuffer\");\n    if (zBuffer.byteLength === 0)\n        throw new ArgumentError(\"'zBuffer' has zero length, error\");\n    ArgumentError.assert(SharedInfo, \"SharedInfo\", \"ArrayBuffer\");\n    if (Counter > 255)\n        throw new ArgumentError(\"Please set 'Counter' argument to value less or equal to 255\");\n    const counterBuffer = new ArrayBuffer(4);\n    const counterView = new Uint8Array(counterBuffer);\n    counterView[0] = 0x00;\n    counterView[1] = 0x00;\n    counterView[2] = 0x00;\n    counterView[3] = Counter;\n    let combinedBuffer = EMPTY_BUFFER;\n    combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, zBuffer);\n    combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, counterBuffer);\n    combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, SharedInfo);\n    const result = await crypto.digest({ name: hashFunction }, combinedBuffer);\n    return {\n        counter: Counter,\n        result\n    };\n}\nasync function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo, crypto = getCrypto(true)) {\n    let hashLength = 0;\n    let maxCounter = 1;\n    switch (hashFunction.toUpperCase()) {\n        case \"SHA-1\":\n            hashLength = 160;\n            break;\n        case \"SHA-256\":\n            hashLength = 256;\n            break;\n        case \"SHA-384\":\n            hashLength = 384;\n            break;\n        case \"SHA-512\":\n            hashLength = 512;\n            break;\n        default:\n            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);\n    }\n    ArgumentError.assert(Zbuffer, \"Zbuffer\", \"ArrayBuffer\");\n    if (Zbuffer.byteLength === 0)\n        throw new ArgumentError(\"'Zbuffer' has zero length, error\");\n    ArgumentError.assert(SharedInfo, \"SharedInfo\", \"ArrayBuffer\");\n    const quotient = keydatalen / hashLength;\n    if (Math.floor(quotient) > 0) {\n        maxCounter = Math.floor(quotient);\n        if ((quotient - maxCounter) > 0)\n            maxCounter++;\n    }\n    const incomingResult = [];\n    for (let i = 1; i <= maxCounter; i++)\n        incomingResult.push(await kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo, crypto));\n    let combinedBuffer = EMPTY_BUFFER;\n    let currentCounter = 1;\n    let found = true;\n    while (found) {\n        found = false;\n        for (const result of incomingResult) {\n            if (result.counter === currentCounter) {\n                combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, result.result);\n                found = true;\n                break;\n            }\n        }\n        currentCounter++;\n    }\n    keydatalen >>= 3;\n    if (combinedBuffer.byteLength > keydatalen) {\n        const newBuffer = new ArrayBuffer(keydatalen);\n        const newView = new Uint8Array(newBuffer);\n        const combinedView = new Uint8Array(combinedBuffer);\n        for (let i = 0; i < keydatalen; i++)\n            newView[i] = combinedView[i];\n        return newBuffer;\n    }\n    return combinedBuffer;\n}\n\nconst VERSION$i = \"version\";\nconst LOG_ID = \"logID\";\nconst EXTENSIONS$6 = \"extensions\";\nconst TIMESTAMP = \"timestamp\";\nconst HASH_ALGORITHM$3 = \"hashAlgorithm\";\nconst SIGNATURE_ALGORITHM$8 = \"signatureAlgorithm\";\nconst SIGNATURE$7 = \"signature\";\nconst NONE = \"none\";\nconst MD5 = \"md5\";\nconst SHA1 = \"sha1\";\nconst SHA224 = \"sha224\";\nconst SHA256 = \"sha256\";\nconst SHA384 = \"sha384\";\nconst SHA512 = \"sha512\";\nconst ANONYMOUS = \"anonymous\";\nconst RSA = \"rsa\";\nconst DSA = \"dsa\";\nconst ECDSA = \"ecdsa\";\nclass SignedCertificateTimestamp extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$i, SignedCertificateTimestamp.defaultValues(VERSION$i));\n        this.logID = pvutils.getParametersValue(parameters, LOG_ID, SignedCertificateTimestamp.defaultValues(LOG_ID));\n        this.timestamp = pvutils.getParametersValue(parameters, TIMESTAMP, SignedCertificateTimestamp.defaultValues(TIMESTAMP));\n        this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$6, SignedCertificateTimestamp.defaultValues(EXTENSIONS$6));\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$3, SignedCertificateTimestamp.defaultValues(HASH_ALGORITHM$3));\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$8, SignedCertificateTimestamp.defaultValues(SIGNATURE_ALGORITHM$8));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$7, SignedCertificateTimestamp.defaultValues(SIGNATURE$7));\n        if (\"stream\" in parameters && parameters.stream) {\n            this.fromStream(parameters.stream);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$i:\n                return 0;\n            case LOG_ID:\n            case EXTENSIONS$6:\n                return EMPTY_BUFFER;\n            case TIMESTAMP:\n                return new Date(0);\n            case HASH_ALGORITHM$3:\n            case SIGNATURE_ALGORITHM$8:\n                return EMPTY_STRING;\n            case SIGNATURE$7:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    fromSchema(schema) {\n        if ((schema instanceof asn1js.RawData) === false)\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\n        const seqStream = new bs.SeqStream({\n            stream: new bs.ByteStream({\n                buffer: schema.data\n            })\n        });\n        this.fromStream(seqStream);\n    }\n    fromStream(stream) {\n        const blockLength = stream.getUint16();\n        this.version = (stream.getBlock(1))[0];\n        if (this.version === 0) {\n            this.logID = (new Uint8Array(stream.getBlock(32))).buffer.slice(0);\n            this.timestamp = new Date(pvutils.utilFromBase(new Uint8Array(stream.getBlock(8)), 8));\n            const extensionsLength = stream.getUint16();\n            this.extensions = (new Uint8Array(stream.getBlock(extensionsLength))).buffer.slice(0);\n            switch ((stream.getBlock(1))[0]) {\n                case 0:\n                    this.hashAlgorithm = NONE;\n                    break;\n                case 1:\n                    this.hashAlgorithm = MD5;\n                    break;\n                case 2:\n                    this.hashAlgorithm = SHA1;\n                    break;\n                case 3:\n                    this.hashAlgorithm = SHA224;\n                    break;\n                case 4:\n                    this.hashAlgorithm = SHA256;\n                    break;\n                case 5:\n                    this.hashAlgorithm = SHA384;\n                    break;\n                case 6:\n                    this.hashAlgorithm = SHA512;\n                    break;\n                default:\n                    throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n            switch ((stream.getBlock(1))[0]) {\n                case 0:\n                    this.signatureAlgorithm = ANONYMOUS;\n                    break;\n                case 1:\n                    this.signatureAlgorithm = RSA;\n                    break;\n                case 2:\n                    this.signatureAlgorithm = DSA;\n                    break;\n                case 3:\n                    this.signatureAlgorithm = ECDSA;\n                    break;\n                default:\n                    throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n            const signatureLength = stream.getUint16();\n            const signatureData = new Uint8Array(stream.getBlock(signatureLength)).buffer.slice(0);\n            const asn1 = asn1js.fromBER(signatureData);\n            AsnError.assert(asn1, \"SignedCertificateTimestamp\");\n            this.signature = asn1.result;\n            if (blockLength !== (47 + extensionsLength + signatureLength)) {\n                throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n        }\n    }\n    toSchema() {\n        const stream = this.toStream();\n        return new asn1js.RawData({ data: stream.stream.buffer });\n    }\n    toStream() {\n        const stream = new bs.SeqStream();\n        stream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecodeView.byteLength);\n        stream.appendChar(this.version);\n        stream.appendView(new Uint8Array(this.logID));\n        const timeBuffer = new ArrayBuffer(8);\n        const timeView = new Uint8Array(timeBuffer);\n        const baseArray = pvutils.utilToBase(this.timestamp.valueOf(), 8);\n        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n        stream.appendView(timeView);\n        stream.appendUint16(this.extensions.byteLength);\n        if (this.extensions.byteLength)\n            stream.appendView(new Uint8Array(this.extensions));\n        let _hashAlgorithm;\n        switch (this.hashAlgorithm.toLowerCase()) {\n            case NONE:\n                _hashAlgorithm = 0;\n                break;\n            case MD5:\n                _hashAlgorithm = 1;\n                break;\n            case SHA1:\n                _hashAlgorithm = 2;\n                break;\n            case SHA224:\n                _hashAlgorithm = 3;\n                break;\n            case SHA256:\n                _hashAlgorithm = 4;\n                break;\n            case SHA384:\n                _hashAlgorithm = 5;\n                break;\n            case SHA512:\n                _hashAlgorithm = 6;\n                break;\n            default:\n                throw new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\n        }\n        stream.appendChar(_hashAlgorithm);\n        let _signatureAlgorithm;\n        switch (this.signatureAlgorithm.toLowerCase()) {\n            case ANONYMOUS:\n                _signatureAlgorithm = 0;\n                break;\n            case RSA:\n                _signatureAlgorithm = 1;\n                break;\n            case DSA:\n                _signatureAlgorithm = 2;\n                break;\n            case ECDSA:\n                _signatureAlgorithm = 3;\n                break;\n            default:\n                throw new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\n        }\n        stream.appendChar(_signatureAlgorithm);\n        const _signature = this.signature.toBER(false);\n        stream.appendUint16(_signature.byteLength);\n        stream.appendView(new Uint8Array(_signature));\n        return stream;\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            logID: pvutils.bufferToHexCodes(this.logID),\n            timestamp: this.timestamp,\n            extensions: pvutils.bufferToHexCodes(this.extensions),\n            hashAlgorithm: this.hashAlgorithm,\n            signatureAlgorithm: this.signatureAlgorithm,\n            signature: this.signature.toJSON()\n        };\n    }\n    async verify(logs, data, dataType = 0, crypto = getCrypto(true)) {\n        const logId = pvutils.toBase64(pvutils.arrayBufferToString(this.logID));\n        let publicKeyBase64 = null;\n        const stream = new bs.SeqStream();\n        for (const log of logs) {\n            if (log.log_id === logId) {\n                publicKeyBase64 = log.key;\n                break;\n            }\n        }\n        if (!publicKeyBase64) {\n            throw new Error(`Public key not found for CT with logId: ${logId}`);\n        }\n        const pki = pvutils.stringToArrayBuffer(pvutils.fromBase64(publicKeyBase64));\n        const publicKeyInfo = PublicKeyInfo.fromBER(pki);\n        stream.appendChar(0x00);\n        stream.appendChar(0x00);\n        const timeBuffer = new ArrayBuffer(8);\n        const timeView = new Uint8Array(timeBuffer);\n        const baseArray = pvutils.utilToBase(this.timestamp.valueOf(), 8);\n        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n        stream.appendView(timeView);\n        stream.appendUint16(dataType);\n        if (dataType === 0)\n            stream.appendUint24(data.byteLength);\n        stream.appendView(new Uint8Array(data));\n        stream.appendUint16(this.extensions.byteLength);\n        if (this.extensions.byteLength !== 0)\n            stream.appendView(new Uint8Array(this.extensions));\n        return crypto.verifyWithPublicKey(stream.buffer.slice(0, stream.length), new asn1js.OctetString({ valueHex: this.signature.toBER(false) }), publicKeyInfo, { algorithmId: EMPTY_STRING }, \"SHA-256\");\n    }\n}\nSignedCertificateTimestamp.CLASS_NAME = \"SignedCertificateTimestamp\";\nasync function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = (-1), crypto = getCrypto(true)) {\n    let parsedValue = null;\n    const stream = new bs.SeqStream();\n    if (certificate.extensions) {\n        for (let i = certificate.extensions.length - 1; i >= 0; i--) {\n            switch (certificate.extensions[i].extnID) {\n                case id_SignedCertificateTimestampList:\n                    {\n                        parsedValue = certificate.extensions[i].parsedValue;\n                        if (!parsedValue || parsedValue.timestamps.length === 0)\n                            throw new Error(\"Nothing to verify in the certificate\");\n                        certificate.extensions.splice(i, 1);\n                    }\n                    break;\n            }\n        }\n    }\n    if (parsedValue === null)\n        throw new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\n    const tbs = certificate.encodeTBS().toBER();\n    const issuerId = await crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\n    stream.appendView(new Uint8Array(issuerId));\n    stream.appendUint24(tbs.byteLength);\n    stream.appendView(new Uint8Array(tbs));\n    const preCert = stream.stream.slice(0, stream.length);\n    if (index === (-1)) {\n        const verifyArray = [];\n        for (const timestamp of parsedValue.timestamps) {\n            const verifyResult = await timestamp.verify(logs, preCert.buffer, 1, crypto);\n            verifyArray.push(verifyResult);\n        }\n        return verifyArray;\n    }\n    if (index >= parsedValue.timestamps.length)\n        index = (parsedValue.timestamps.length - 1);\n    return [await parsedValue.timestamps[index].verify(logs, preCert.buffer, 1, crypto)];\n}\n\nconst TIMESTAMPS = \"timestamps\";\nclass SignedCertificateTimestampList extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.timestamps = pvutils.getParametersValue(parameters, TIMESTAMPS, SignedCertificateTimestampList.defaultValues(TIMESTAMPS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TIMESTAMPS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TIMESTAMPS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        var _a;\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        (_a = names.optional) !== null && _a !== void 0 ? _a : (names.optional = false);\n        return (new asn1js.OctetString({\n            name: (names.blockName || \"SignedCertificateTimestampList\"),\n            optional: names.optional\n        }));\n    }\n    fromSchema(schema) {\n        if ((schema instanceof asn1js.OctetString) === false) {\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n        }\n        const seqStream = new bs.SeqStream({\n            stream: new bs.ByteStream({\n                buffer: schema.valueBlock.valueHex\n            })\n        });\n        const dataLength = seqStream.getUint16();\n        if (dataLength !== seqStream.length) {\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n        }\n        while (seqStream.length) {\n            this.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\n        }\n    }\n    toSchema() {\n        const stream = new bs.SeqStream();\n        let overallLength = 0;\n        const timestampsData = [];\n        for (const timestamp of this.timestamps) {\n            const timestampStream = timestamp.toStream();\n            timestampsData.push(timestampStream);\n            overallLength += timestampStream.stream.buffer.byteLength;\n        }\n        stream.appendUint16(overallLength);\n        for (const timestamp of timestampsData) {\n            stream.appendView(timestamp.stream.view);\n        }\n        return new asn1js.OctetString({ valueHex: stream.stream.buffer.slice(0) });\n    }\n    toJSON() {\n        return {\n            timestamps: Array.from(this.timestamps, o => o.toJSON())\n        };\n    }\n}\nSignedCertificateTimestampList.CLASS_NAME = \"SignedCertificateTimestampList\";\n\nconst ATTRIBUTES$4 = \"attributes\";\nconst CLEAR_PROPS$11 = [\n    ATTRIBUTES$4\n];\nclass SubjectDirectoryAttributes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$4, SubjectDirectoryAttributes.defaultValues(ATTRIBUTES$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ATTRIBUTES$4:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: Attribute.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$11);\n        const asn1 = asn1js.compareSchema(schema, schema, SubjectDirectoryAttributes.schema({\n            names: {\n                attributes: ATTRIBUTES$4\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n    }\n}\nSubjectDirectoryAttributes.CLASS_NAME = \"SubjectDirectoryAttributes\";\n\nclass ExtensionValueFactory {\n    static getItems() {\n        if (!this.types) {\n            this.types = {};\n            ExtensionValueFactory.register(id_SubjectAltName, \"SubjectAltName\", AltName);\n            ExtensionValueFactory.register(id_IssuerAltName, \"IssuerAltName\", AltName);\n            ExtensionValueFactory.register(id_AuthorityKeyIdentifier, \"AuthorityKeyIdentifier\", AuthorityKeyIdentifier);\n            ExtensionValueFactory.register(id_BasicConstraints, \"BasicConstraints\", BasicConstraints);\n            ExtensionValueFactory.register(id_MicrosoftCaVersion, \"MicrosoftCaVersion\", CAVersion);\n            ExtensionValueFactory.register(id_CertificatePolicies, \"CertificatePolicies\", CertificatePolicies);\n            ExtensionValueFactory.register(id_MicrosoftAppPolicies, \"CertificatePoliciesMicrosoft\", CertificatePolicies);\n            ExtensionValueFactory.register(id_MicrosoftCertTemplateV2, \"MicrosoftCertTemplateV2\", CertificateTemplate);\n            ExtensionValueFactory.register(id_CRLDistributionPoints, \"CRLDistributionPoints\", CRLDistributionPoints);\n            ExtensionValueFactory.register(id_FreshestCRL, \"FreshestCRL\", CRLDistributionPoints);\n            ExtensionValueFactory.register(id_ExtKeyUsage, \"ExtKeyUsage\", ExtKeyUsage);\n            ExtensionValueFactory.register(id_CertificateIssuer, \"CertificateIssuer\", GeneralNames);\n            ExtensionValueFactory.register(id_AuthorityInfoAccess, \"AuthorityInfoAccess\", InfoAccess);\n            ExtensionValueFactory.register(id_SubjectInfoAccess, \"SubjectInfoAccess\", InfoAccess);\n            ExtensionValueFactory.register(id_IssuingDistributionPoint, \"IssuingDistributionPoint\", IssuingDistributionPoint);\n            ExtensionValueFactory.register(id_NameConstraints, \"NameConstraints\", NameConstraints);\n            ExtensionValueFactory.register(id_PolicyConstraints, \"PolicyConstraints\", PolicyConstraints);\n            ExtensionValueFactory.register(id_PolicyMappings, \"PolicyMappings\", PolicyMappings);\n            ExtensionValueFactory.register(id_PrivateKeyUsagePeriod, \"PrivateKeyUsagePeriod\", PrivateKeyUsagePeriod);\n            ExtensionValueFactory.register(id_QCStatements, \"QCStatements\", QCStatements);\n            ExtensionValueFactory.register(id_SignedCertificateTimestampList, \"SignedCertificateTimestampList\", SignedCertificateTimestampList);\n            ExtensionValueFactory.register(id_SubjectDirectoryAttributes, \"SubjectDirectoryAttributes\", SubjectDirectoryAttributes);\n        }\n        return this.types;\n    }\n    static fromBER(id, raw) {\n        const asn1 = asn1js.fromBER(raw);\n        if (asn1.offset === -1) {\n            return null;\n        }\n        const item = this.find(id);\n        if (item) {\n            try {\n                return new item.type({ schema: asn1.result });\n            }\n            catch (ex) {\n                const res = new item.type();\n                res.parsingError = `Incorrectly formatted value of extension ${item.name} (${id})`;\n                return res;\n            }\n        }\n        return asn1.result;\n    }\n    static find(id) {\n        const types = this.getItems();\n        return types[id] || null;\n    }\n    static register(id, name, type) {\n        this.getItems()[id] = { name, type };\n    }\n}\n\nconst EXTN_ID = \"extnID\";\nconst CRITICAL = \"critical\";\nconst EXTN_VALUE = \"extnValue\";\nconst PARSED_VALUE$5 = \"parsedValue\";\nconst CLEAR_PROPS$10 = [\n    EXTN_ID,\n    CRITICAL,\n    EXTN_VALUE\n];\nclass Extension extends PkiObject {\n    get parsedValue() {\n        if (this._parsedValue === undefined) {\n            const parsedValue = ExtensionValueFactory.fromBER(this.extnID, this.extnValue.valueBlock.valueHexView);\n            this._parsedValue = parsedValue;\n        }\n        return this._parsedValue || undefined;\n    }\n    set parsedValue(value) {\n        this._parsedValue = value;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.extnID = pvutils.getParametersValue(parameters, EXTN_ID, Extension.defaultValues(EXTN_ID));\n        this.critical = pvutils.getParametersValue(parameters, CRITICAL, Extension.defaultValues(CRITICAL));\n        if (EXTN_VALUE in parameters) {\n            this.extnValue = new asn1js.OctetString({ valueHex: parameters.extnValue });\n        }\n        else {\n            this.extnValue = Extension.defaultValues(EXTN_VALUE);\n        }\n        if (PARSED_VALUE$5 in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$5, Extension.defaultValues(PARSED_VALUE$5));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case EXTN_ID:\n                return EMPTY_STRING;\n            case CRITICAL:\n                return false;\n            case EXTN_VALUE:\n                return new asn1js.OctetString();\n            case PARSED_VALUE$5:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.extnID || EMPTY_STRING) }),\n                new asn1js.Boolean({\n                    name: (names.critical || EMPTY_STRING),\n                    optional: true\n                }),\n                new asn1js.OctetString({ name: (names.extnValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$10);\n        const asn1 = asn1js.compareSchema(schema, schema, Extension.schema({\n            names: {\n                extnID: EXTN_ID,\n                critical: CRITICAL,\n                extnValue: EXTN_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.extnID = asn1.result.extnID.valueBlock.toString();\n        if (CRITICAL in asn1.result) {\n            this.critical = asn1.result.critical.valueBlock.value;\n        }\n        this.extnValue = asn1.result.extnValue;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.extnID }));\n        if (this.critical !== Extension.defaultValues(CRITICAL)) {\n            outputArray.push(new asn1js.Boolean({ value: this.critical }));\n        }\n        outputArray.push(this.extnValue);\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {\n            extnID: this.extnID,\n            extnValue: this.extnValue.toJSON(),\n        };\n        if (this.critical !== Extension.defaultValues(CRITICAL)) {\n            object.critical = this.critical;\n        }\n        if (this.parsedValue && this.parsedValue.toJSON) {\n            object.parsedValue = this.parsedValue.toJSON();\n        }\n        return object;\n    }\n}\nExtension.CLASS_NAME = \"Extension\";\n\nconst EXTENSIONS$5 = \"extensions\";\nconst CLEAR_PROPS$$ = [\n    EXTENSIONS$5,\n];\nclass Extensions extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$5, Extensions.defaultValues(EXTENSIONS$5));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case EXTENSIONS$5:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            optional,\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.extensions || EMPTY_STRING),\n                    value: Extension.schema(names.extension || {})\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$$);\n        const asn1 = asn1js.compareSchema(schema, schema, Extensions.schema({\n            names: {\n                extensions: EXTENSIONS$5\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.extensions = Array.from(asn1.result.extensions, element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.extensions, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            extensions: this.extensions.map(o => o.toJSON())\n        };\n    }\n}\nExtensions.CLASS_NAME = \"Extensions\";\n\nconst ISSUER$5 = \"issuer\";\nconst SERIAL_NUMBER$6 = \"serialNumber\";\nconst ISSUER_UID = \"issuerUID\";\nconst CLEAR_PROPS$_ = [\n    ISSUER$5,\n    SERIAL_NUMBER$6,\n    ISSUER_UID,\n];\nclass IssuerSerial extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$5, IssuerSerial.defaultValues(ISSUER$5));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$6, IssuerSerial.defaultValues(SERIAL_NUMBER$6));\n        if (ISSUER_UID in parameters) {\n            this.issuerUID = pvutils.getParametersValue(parameters, ISSUER_UID, IssuerSerial.defaultValues(ISSUER_UID));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER$5:\n                return new GeneralNames();\n            case SERIAL_NUMBER$6:\n                return new asn1js.Integer();\n            case ISSUER_UID:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralNames.schema(names.issuer || {}),\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                new asn1js.BitString({\n                    optional: true,\n                    name: (names.issuerUID || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$_);\n        const asn1 = asn1js.compareSchema(schema, schema, IssuerSerial.schema({\n            names: {\n                issuer: {\n                    names: {\n                        blockName: ISSUER$5\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$6,\n                issuerUID: ISSUER_UID\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuer = new GeneralNames({ schema: asn1.result.issuer });\n        this.serialNumber = asn1.result.serialNumber;\n        if (ISSUER_UID in asn1.result)\n            this.issuerUID = asn1.result.issuerUID;\n    }\n    toSchema() {\n        const result = new asn1js.Sequence({\n            value: [\n                this.issuer.toSchema(),\n                this.serialNumber\n            ]\n        });\n        if (this.issuerUID) {\n            result.valueBlock.value.push(this.issuerUID);\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            issuer: this.issuer.toJSON(),\n            serialNumber: this.serialNumber.toJSON()\n        };\n        if (this.issuerUID) {\n            result.issuerUID = this.issuerUID.toJSON();\n        }\n        return result;\n    }\n}\nIssuerSerial.CLASS_NAME = \"IssuerSerial\";\n\nconst VERSION$h = \"version\";\nconst BASE_CERTIFICATE_ID$2 = \"baseCertificateID\";\nconst SUBJECT_NAME = \"subjectName\";\nconst ISSUER$4 = \"issuer\";\nconst SIGNATURE$6 = \"signature\";\nconst SERIAL_NUMBER$5 = \"serialNumber\";\nconst ATTR_CERT_VALIDITY_PERIOD$1 = \"attrCertValidityPeriod\";\nconst ATTRIBUTES$3 = \"attributes\";\nconst ISSUER_UNIQUE_ID$2 = \"issuerUniqueID\";\nconst EXTENSIONS$4 = \"extensions\";\nconst CLEAR_PROPS$Z = [\n    VERSION$h,\n    BASE_CERTIFICATE_ID$2,\n    SUBJECT_NAME,\n    ISSUER$4,\n    SIGNATURE$6,\n    SERIAL_NUMBER$5,\n    ATTR_CERT_VALIDITY_PERIOD$1,\n    ATTRIBUTES$3,\n    ISSUER_UNIQUE_ID$2,\n    EXTENSIONS$4,\n];\nclass AttributeCertificateInfoV1 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$h, AttributeCertificateInfoV1.defaultValues(VERSION$h));\n        if (BASE_CERTIFICATE_ID$2 in parameters) {\n            this.baseCertificateID = pvutils.getParametersValue(parameters, BASE_CERTIFICATE_ID$2, AttributeCertificateInfoV1.defaultValues(BASE_CERTIFICATE_ID$2));\n        }\n        if (SUBJECT_NAME in parameters) {\n            this.subjectName = pvutils.getParametersValue(parameters, SUBJECT_NAME, AttributeCertificateInfoV1.defaultValues(SUBJECT_NAME));\n        }\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$4, AttributeCertificateInfoV1.defaultValues(ISSUER$4));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$6, AttributeCertificateInfoV1.defaultValues(SIGNATURE$6));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$5, AttributeCertificateInfoV1.defaultValues(SERIAL_NUMBER$5));\n        this.attrCertValidityPeriod = pvutils.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD$1, AttributeCertificateInfoV1.defaultValues(ATTR_CERT_VALIDITY_PERIOD$1));\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$3, AttributeCertificateInfoV1.defaultValues(ATTRIBUTES$3));\n        if (ISSUER_UNIQUE_ID$2 in parameters)\n            this.issuerUniqueID = pvutils.getParametersValue(parameters, ISSUER_UNIQUE_ID$2, AttributeCertificateInfoV1.defaultValues(ISSUER_UNIQUE_ID$2));\n        if (EXTENSIONS$4 in parameters) {\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$4, AttributeCertificateInfoV1.defaultValues(EXTENSIONS$4));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$h:\n                return 0;\n            case BASE_CERTIFICATE_ID$2:\n                return new IssuerSerial();\n            case SUBJECT_NAME:\n                return new GeneralNames();\n            case ISSUER$4:\n                return new GeneralNames();\n            case SIGNATURE$6:\n                return new AlgorithmIdentifier();\n            case SERIAL_NUMBER$5:\n                return new asn1js.Integer();\n            case ATTR_CERT_VALIDITY_PERIOD$1:\n                return new AttCertValidityPeriod();\n            case ATTRIBUTES$3:\n                return [];\n            case ISSUER_UNIQUE_ID$2:\n                return new asn1js.BitString();\n            case EXTENSIONS$4:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.Constructed({\n                            name: (names.baseCertificateID || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: IssuerSerial.schema().valueBlock.value\n                        }),\n                        new asn1js.Constructed({\n                            name: (names.subjectName || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: GeneralNames.schema().valueBlock.value\n                        }),\n                    ]\n                }),\n                GeneralNames.schema({\n                    names: {\n                        blockName: (names.issuer || EMPTY_STRING)\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signature || {}),\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n                new asn1js.Sequence({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: [\n                        new asn1js.Repeated({\n                            value: Attribute.schema()\n                        })\n                    ]\n                }),\n                new asn1js.BitString({\n                    optional: true,\n                    name: (names.issuerUniqueID || EMPTY_STRING)\n                }),\n                Extensions.schema(names.extensions || {}, true)\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$Z);\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateInfoV1.schema({\n            names: {\n                version: VERSION$h,\n                baseCertificateID: BASE_CERTIFICATE_ID$2,\n                subjectName: SUBJECT_NAME,\n                issuer: ISSUER$4,\n                signature: {\n                    names: {\n                        blockName: SIGNATURE$6\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$5,\n                attrCertValidityPeriod: {\n                    names: {\n                        blockName: ATTR_CERT_VALIDITY_PERIOD$1\n                    }\n                },\n                attributes: ATTRIBUTES$3,\n                issuerUniqueID: ISSUER_UNIQUE_ID$2,\n                extensions: {\n                    names: {\n                        blockName: EXTENSIONS$4\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (BASE_CERTIFICATE_ID$2 in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (SUBJECT_NAME in asn1.result) {\n            this.subjectName = new GeneralNames({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.subjectName.valueBlock.value\n                })\n            });\n        }\n        this.issuer = asn1.result.issuer;\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n        this.serialNumber = asn1.result.serialNumber;\n        this.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n        if (ISSUER_UNIQUE_ID$2 in asn1.result) {\n            this.issuerUniqueID = asn1.result.issuerUniqueID;\n        }\n        if (EXTENSIONS$4 in asn1.result) {\n            this.extensions = new Extensions({ schema: asn1.result.extensions });\n        }\n    }\n    toSchema() {\n        const result = new asn1js.Sequence({\n            value: [new asn1js.Integer({ value: this.version })]\n        });\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.subjectName) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.subjectName.toSchema().valueBlock.value\n            }));\n        }\n        result.valueBlock.value.push(this.issuer.toSchema());\n        result.valueBlock.value.push(this.signature.toSchema());\n        result.valueBlock.value.push(this.serialNumber);\n        result.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\n        result.valueBlock.value.push(new asn1js.Sequence({\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n        if (this.issuerUniqueID) {\n            result.valueBlock.value.push(this.issuerUniqueID);\n        }\n        if (this.extensions) {\n            result.valueBlock.value.push(this.extensions.toSchema());\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            version: this.version\n        };\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.subjectName) {\n            result.subjectName = this.subjectName.toJSON();\n        }\n        result.issuer = this.issuer.toJSON();\n        result.signature = this.signature.toJSON();\n        result.serialNumber = this.serialNumber.toJSON();\n        result.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\n        result.attributes = Array.from(this.attributes, o => o.toJSON());\n        if (this.issuerUniqueID) {\n            result.issuerUniqueID = this.issuerUniqueID.toJSON();\n        }\n        if (this.extensions) {\n            result.extensions = this.extensions.toJSON();\n        }\n        return result;\n    }\n}\nAttributeCertificateInfoV1.CLASS_NAME = \"AttributeCertificateInfoV1\";\n\nconst ACINFO$1 = \"acinfo\";\nconst SIGNATURE_ALGORITHM$7 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$4 = \"signatureValue\";\nconst CLEAR_PROPS$Y = [\n    ACINFO$1,\n    SIGNATURE_VALUE$4,\n    SIGNATURE_ALGORITHM$7\n];\nclass AttributeCertificateV1 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.acinfo = pvutils.getParametersValue(parameters, ACINFO$1, AttributeCertificateV1.defaultValues(ACINFO$1));\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$7, AttributeCertificateV1.defaultValues(SIGNATURE_ALGORITHM$7));\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$4, AttributeCertificateV1.defaultValues(SIGNATURE_VALUE$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACINFO$1:\n                return new AttributeCertificateInfoV1();\n            case SIGNATURE_ALGORITHM$7:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$4:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AttributeCertificateInfoV1.schema(names.acinfo || {}),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js.BitString({ name: (names.signatureValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$Y);\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateV1.schema({\n            names: {\n                acinfo: {\n                    names: {\n                        blockName: ACINFO$1\n                    }\n                },\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$7\n                    }\n                },\n                signatureValue: SIGNATURE_VALUE$4\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.acinfo.toSchema(),\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            acinfo: this.acinfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n    }\n}\nAttributeCertificateV1.CLASS_NAME = \"AttributeCertificateV1\";\n\nconst DIGESTED_OBJECT_TYPE = \"digestedObjectType\";\nconst OTHER_OBJECT_TYPE_ID = \"otherObjectTypeID\";\nconst DIGEST_ALGORITHM$2 = \"digestAlgorithm\";\nconst OBJECT_DIGEST = \"objectDigest\";\nconst CLEAR_PROPS$X = [\n    DIGESTED_OBJECT_TYPE,\n    OTHER_OBJECT_TYPE_ID,\n    DIGEST_ALGORITHM$2,\n    OBJECT_DIGEST,\n];\nclass ObjectDigestInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.digestedObjectType = pvutils.getParametersValue(parameters, DIGESTED_OBJECT_TYPE, ObjectDigestInfo.defaultValues(DIGESTED_OBJECT_TYPE));\n        if (OTHER_OBJECT_TYPE_ID in parameters) {\n            this.otherObjectTypeID = pvutils.getParametersValue(parameters, OTHER_OBJECT_TYPE_ID, ObjectDigestInfo.defaultValues(OTHER_OBJECT_TYPE_ID));\n        }\n        this.digestAlgorithm = pvutils.getParametersValue(parameters, DIGEST_ALGORITHM$2, ObjectDigestInfo.defaultValues(DIGEST_ALGORITHM$2));\n        this.objectDigest = pvutils.getParametersValue(parameters, OBJECT_DIGEST, ObjectDigestInfo.defaultValues(OBJECT_DIGEST));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DIGESTED_OBJECT_TYPE:\n                return new asn1js.Enumerated();\n            case OTHER_OBJECT_TYPE_ID:\n                return new asn1js.ObjectIdentifier();\n            case DIGEST_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case OBJECT_DIGEST:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Enumerated({ name: (names.digestedObjectType || EMPTY_STRING) }),\n                new asn1js.ObjectIdentifier({\n                    optional: true,\n                    name: (names.otherObjectTypeID || EMPTY_STRING)\n                }),\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {}),\n                new asn1js.BitString({ name: (names.objectDigest || EMPTY_STRING) }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$X);\n        const asn1 = asn1js.compareSchema(schema, schema, ObjectDigestInfo.schema({\n            names: {\n                digestedObjectType: DIGESTED_OBJECT_TYPE,\n                otherObjectTypeID: OTHER_OBJECT_TYPE_ID,\n                digestAlgorithm: {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$2\n                    }\n                },\n                objectDigest: OBJECT_DIGEST\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.digestedObjectType = asn1.result.digestedObjectType;\n        if (OTHER_OBJECT_TYPE_ID in asn1.result) {\n            this.otherObjectTypeID = asn1.result.otherObjectTypeID;\n        }\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n        this.objectDigest = asn1.result.objectDigest;\n    }\n    toSchema() {\n        const result = new asn1js.Sequence({\n            value: [this.digestedObjectType]\n        });\n        if (this.otherObjectTypeID) {\n            result.valueBlock.value.push(this.otherObjectTypeID);\n        }\n        result.valueBlock.value.push(this.digestAlgorithm.toSchema());\n        result.valueBlock.value.push(this.objectDigest);\n        return result;\n    }\n    toJSON() {\n        const result = {\n            digestedObjectType: this.digestedObjectType.toJSON(),\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            objectDigest: this.objectDigest.toJSON(),\n        };\n        if (this.otherObjectTypeID) {\n            result.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n        }\n        return result;\n    }\n}\nObjectDigestInfo.CLASS_NAME = \"ObjectDigestInfo\";\n\nconst ISSUER_NAME = \"issuerName\";\nconst BASE_CERTIFICATE_ID$1 = \"baseCertificateID\";\nconst OBJECT_DIGEST_INFO$1 = \"objectDigestInfo\";\nconst CLEAR_PROPS$W = [\n    ISSUER_NAME,\n    BASE_CERTIFICATE_ID$1,\n    OBJECT_DIGEST_INFO$1\n];\nclass V2Form extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (ISSUER_NAME in parameters) {\n            this.issuerName = pvutils.getParametersValue(parameters, ISSUER_NAME, V2Form.defaultValues(ISSUER_NAME));\n        }\n        if (BASE_CERTIFICATE_ID$1 in parameters) {\n            this.baseCertificateID = pvutils.getParametersValue(parameters, BASE_CERTIFICATE_ID$1, V2Form.defaultValues(BASE_CERTIFICATE_ID$1));\n        }\n        if (OBJECT_DIGEST_INFO$1 in parameters) {\n            this.objectDigestInfo = pvutils.getParametersValue(parameters, OBJECT_DIGEST_INFO$1, V2Form.defaultValues(OBJECT_DIGEST_INFO$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER_NAME:\n                return new GeneralNames();\n            case BASE_CERTIFICATE_ID$1:\n                return new IssuerSerial();\n            case OBJECT_DIGEST_INFO$1:\n                return new ObjectDigestInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralNames.schema({\n                    names: {\n                        blockName: names.issuerName\n                    }\n                }, true),\n                new asn1js.Constructed({\n                    optional: true,\n                    name: (names.baseCertificateID || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: IssuerSerial.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    name: (names.objectDigestInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: ObjectDigestInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$W);\n        const asn1 = asn1js.compareSchema(schema, schema, V2Form.schema({\n            names: {\n                issuerName: ISSUER_NAME,\n                baseCertificateID: BASE_CERTIFICATE_ID$1,\n                objectDigestInfo: OBJECT_DIGEST_INFO$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (ISSUER_NAME in asn1.result)\n            this.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\n        if (BASE_CERTIFICATE_ID$1 in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (OBJECT_DIGEST_INFO$1 in asn1.result) {\n            this.objectDigestInfo = new ObjectDigestInfo({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.objectDigestInfo.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const result = new asn1js.Sequence();\n        if (this.issuerName)\n            result.valueBlock.value.push(this.issuerName.toSchema());\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.objectDigestInfo) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.objectDigestInfo.toSchema().valueBlock.value\n            }));\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {};\n        if (this.issuerName) {\n            result.issuerName = this.issuerName.toJSON();\n        }\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.objectDigestInfo) {\n            result.objectDigestInfo = this.objectDigestInfo.toJSON();\n        }\n        return result;\n    }\n}\nV2Form.CLASS_NAME = \"V2Form\";\n\nconst BASE_CERTIFICATE_ID = \"baseCertificateID\";\nconst ENTITY_NAME = \"entityName\";\nconst OBJECT_DIGEST_INFO = \"objectDigestInfo\";\nconst CLEAR_PROPS$V = [\n    BASE_CERTIFICATE_ID,\n    ENTITY_NAME,\n    OBJECT_DIGEST_INFO\n];\nclass Holder extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (BASE_CERTIFICATE_ID in parameters) {\n            this.baseCertificateID = pvutils.getParametersValue(parameters, BASE_CERTIFICATE_ID, Holder.defaultValues(BASE_CERTIFICATE_ID));\n        }\n        if (ENTITY_NAME in parameters) {\n            this.entityName = pvutils.getParametersValue(parameters, ENTITY_NAME, Holder.defaultValues(ENTITY_NAME));\n        }\n        if (OBJECT_DIGEST_INFO in parameters) {\n            this.objectDigestInfo = pvutils.getParametersValue(parameters, OBJECT_DIGEST_INFO, Holder.defaultValues(OBJECT_DIGEST_INFO));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BASE_CERTIFICATE_ID:\n                return new IssuerSerial();\n            case ENTITY_NAME:\n                return new GeneralNames();\n            case OBJECT_DIGEST_INFO:\n                return new ObjectDigestInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    name: (names.baseCertificateID || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: IssuerSerial.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    name: (names.entityName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: GeneralNames.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    name: (names.objectDigestInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: ObjectDigestInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$V);\n        const asn1 = asn1js.compareSchema(schema, schema, Holder.schema({\n            names: {\n                baseCertificateID: BASE_CERTIFICATE_ID,\n                entityName: ENTITY_NAME,\n                objectDigestInfo: OBJECT_DIGEST_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (BASE_CERTIFICATE_ID in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (ENTITY_NAME in asn1.result) {\n            this.entityName = new GeneralNames({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.entityName.valueBlock.value\n                })\n            });\n        }\n        if (OBJECT_DIGEST_INFO in asn1.result) {\n            this.objectDigestInfo = new ObjectDigestInfo({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.objectDigestInfo.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const result = new asn1js.Sequence();\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.entityName) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.entityName.toSchema().valueBlock.value\n            }));\n        }\n        if (this.objectDigestInfo) {\n            result.valueBlock.value.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: this.objectDigestInfo.toSchema().valueBlock.value\n            }));\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {};\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.entityName) {\n            result.entityName = this.entityName.toJSON();\n        }\n        if (this.objectDigestInfo) {\n            result.objectDigestInfo = this.objectDigestInfo.toJSON();\n        }\n        return result;\n    }\n}\nHolder.CLASS_NAME = \"Holder\";\n\nconst VERSION$g = \"version\";\nconst HOLDER = \"holder\";\nconst ISSUER$3 = \"issuer\";\nconst SIGNATURE$5 = \"signature\";\nconst SERIAL_NUMBER$4 = \"serialNumber\";\nconst ATTR_CERT_VALIDITY_PERIOD = \"attrCertValidityPeriod\";\nconst ATTRIBUTES$2 = \"attributes\";\nconst ISSUER_UNIQUE_ID$1 = \"issuerUniqueID\";\nconst EXTENSIONS$3 = \"extensions\";\nconst CLEAR_PROPS$U = [\n    VERSION$g,\n    HOLDER,\n    ISSUER$3,\n    SIGNATURE$5,\n    SERIAL_NUMBER$4,\n    ATTR_CERT_VALIDITY_PERIOD,\n    ATTRIBUTES$2,\n    ISSUER_UNIQUE_ID$1,\n    EXTENSIONS$3\n];\nclass AttributeCertificateInfoV2 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$g, AttributeCertificateInfoV2.defaultValues(VERSION$g));\n        this.holder = pvutils.getParametersValue(parameters, HOLDER, AttributeCertificateInfoV2.defaultValues(HOLDER));\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$3, AttributeCertificateInfoV2.defaultValues(ISSUER$3));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$5, AttributeCertificateInfoV2.defaultValues(SIGNATURE$5));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$4, AttributeCertificateInfoV2.defaultValues(SERIAL_NUMBER$4));\n        this.attrCertValidityPeriod = pvutils.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD, AttributeCertificateInfoV2.defaultValues(ATTR_CERT_VALIDITY_PERIOD));\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$2, AttributeCertificateInfoV2.defaultValues(ATTRIBUTES$2));\n        if (ISSUER_UNIQUE_ID$1 in parameters) {\n            this.issuerUniqueID = pvutils.getParametersValue(parameters, ISSUER_UNIQUE_ID$1, AttributeCertificateInfoV2.defaultValues(ISSUER_UNIQUE_ID$1));\n        }\n        if (EXTENSIONS$3 in parameters) {\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$3, AttributeCertificateInfoV2.defaultValues(EXTENSIONS$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$g:\n                return 1;\n            case HOLDER:\n                return new Holder();\n            case ISSUER$3:\n                return {};\n            case SIGNATURE$5:\n                return new AlgorithmIdentifier();\n            case SERIAL_NUMBER$4:\n                return new asn1js.Integer();\n            case ATTR_CERT_VALIDITY_PERIOD:\n                return new AttCertValidityPeriod();\n            case ATTRIBUTES$2:\n                return [];\n            case ISSUER_UNIQUE_ID$1:\n                return new asn1js.BitString();\n            case EXTENSIONS$3:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                Holder.schema(names.holder || {}),\n                new asn1js.Choice({\n                    value: [\n                        GeneralNames.schema({\n                            names: {\n                                blockName: (names.issuer || EMPTY_STRING)\n                            }\n                        }),\n                        new asn1js.Constructed({\n                            name: (names.issuer || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: V2Form.schema().valueBlock.value\n                        })\n                    ]\n                }),\n                AlgorithmIdentifier.schema(names.signature || {}),\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n                new asn1js.Sequence({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: [\n                        new asn1js.Repeated({\n                            value: Attribute.schema()\n                        })\n                    ]\n                }),\n                new asn1js.BitString({\n                    optional: true,\n                    name: (names.issuerUniqueID || EMPTY_STRING)\n                }),\n                Extensions.schema(names.extensions || {}, true)\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$U);\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateInfoV2.schema({\n            names: {\n                version: VERSION$g,\n                holder: {\n                    names: {\n                        blockName: HOLDER\n                    }\n                },\n                issuer: ISSUER$3,\n                signature: {\n                    names: {\n                        blockName: SIGNATURE$5\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$4,\n                attrCertValidityPeriod: {\n                    names: {\n                        blockName: ATTR_CERT_VALIDITY_PERIOD\n                    }\n                },\n                attributes: ATTRIBUTES$2,\n                issuerUniqueID: ISSUER_UNIQUE_ID$1,\n                extensions: {\n                    names: {\n                        blockName: EXTENSIONS$3\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.holder = new Holder({ schema: asn1.result.holder });\n        switch (asn1.result.issuer.idBlock.tagClass) {\n            case 3:\n                this.issuer = new V2Form({\n                    schema: new asn1js.Sequence({\n                        value: asn1.result.issuer.valueBlock.value\n                    })\n                });\n                break;\n            case 1:\n            default:\n                throw new Error(\"Incorrect value for 'issuer' in AttributeCertificateInfoV2\");\n        }\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n        this.serialNumber = asn1.result.serialNumber;\n        this.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n        if (ISSUER_UNIQUE_ID$1 in asn1.result) {\n            this.issuerUniqueID = asn1.result.issuerUniqueID;\n        }\n        if (EXTENSIONS$3 in asn1.result) {\n            this.extensions = new Extensions({ schema: asn1.result.extensions });\n        }\n    }\n    toSchema() {\n        const result = new asn1js.Sequence({\n            value: [\n                new asn1js.Integer({ value: this.version }),\n                this.holder.toSchema(),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: this.issuer.toSchema().valueBlock.value\n                }),\n                this.signature.toSchema(),\n                this.serialNumber,\n                this.attrCertValidityPeriod.toSchema(),\n                new asn1js.Sequence({\n                    value: Array.from(this.attributes, o => o.toSchema())\n                })\n            ]\n        });\n        if (this.issuerUniqueID) {\n            result.valueBlock.value.push(this.issuerUniqueID);\n        }\n        if (this.extensions) {\n            result.valueBlock.value.push(this.extensions.toSchema());\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            version: this.version,\n            holder: this.holder.toJSON(),\n            issuer: this.issuer.toJSON(),\n            signature: this.signature.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n            attrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n        if (this.issuerUniqueID) {\n            result.issuerUniqueID = this.issuerUniqueID.toJSON();\n        }\n        if (this.extensions) {\n            result.extensions = this.extensions.toJSON();\n        }\n        return result;\n    }\n}\nAttributeCertificateInfoV2.CLASS_NAME = \"AttributeCertificateInfoV2\";\n\nconst ACINFO = \"acinfo\";\nconst SIGNATURE_ALGORITHM$6 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$3 = \"signatureValue\";\nconst CLEAR_PROPS$T = [\n    ACINFO,\n    SIGNATURE_ALGORITHM$6,\n    SIGNATURE_VALUE$3,\n];\nclass AttributeCertificateV2 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.acinfo = pvutils.getParametersValue(parameters, ACINFO, AttributeCertificateV2.defaultValues(ACINFO));\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$6, AttributeCertificateV2.defaultValues(SIGNATURE_ALGORITHM$6));\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$3, AttributeCertificateV2.defaultValues(SIGNATURE_VALUE$3));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACINFO:\n                return new AttributeCertificateInfoV2();\n            case SIGNATURE_ALGORITHM$6:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$3:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AttributeCertificateInfoV2.schema(names.acinfo || {}),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js.BitString({ name: (names.signatureValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$T);\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateV2.schema({\n            names: {\n                acinfo: {\n                    names: {\n                        blockName: ACINFO\n                    }\n                },\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$6\n                    }\n                },\n                signatureValue: SIGNATURE_VALUE$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.acinfo.toSchema(),\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            acinfo: this.acinfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n    }\n}\nAttributeCertificateV2.CLASS_NAME = \"AttributeCertificateV2\";\n\nconst CONTENT_TYPE = \"contentType\";\nconst CONTENT = \"content\";\nconst CLEAR_PROPS$S = [CONTENT_TYPE, CONTENT];\nclass ContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.contentType = pvutils.getParametersValue(parameters, CONTENT_TYPE, ContentInfo.defaultValues(CONTENT_TYPE));\n        this.content = pvutils.getParametersValue(parameters, CONTENT, ContentInfo.defaultValues(CONTENT));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CONTENT_TYPE:\n                return EMPTY_STRING;\n            case CONTENT:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CONTENT_TYPE:\n                return (typeof memberValue === \"string\" &&\n                    memberValue === this.defaultValues(CONTENT_TYPE));\n            case CONTENT:\n                return (memberValue instanceof asn1js.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        if ((\"optional\" in names) === false) {\n            names.optional = false;\n        }\n        return (new asn1js.Sequence({\n            name: (names.blockName || \"ContentInfo\"),\n            optional: names.optional,\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.contentType || CONTENT_TYPE) }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Any({ name: (names.content || CONTENT) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$S);\n        const asn1 = asn1js.compareSchema(schema, schema, ContentInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.contentType = asn1.result.contentType.valueBlock.toString();\n        this.content = asn1.result.content;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.contentType }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.content]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        const object = {\n            contentType: this.contentType\n        };\n        if (!(this.content instanceof asn1js.Any)) {\n            object.content = this.content.toJSON();\n        }\n        return object;\n    }\n}\nContentInfo.CLASS_NAME = \"ContentInfo\";\nContentInfo.DATA = id_ContentType_Data;\nContentInfo.SIGNED_DATA = id_ContentType_SignedData;\nContentInfo.ENVELOPED_DATA = id_ContentType_EnvelopedData;\nContentInfo.ENCRYPTED_DATA = id_ContentType_EncryptedData;\n\nconst TYPE$1 = \"type\";\nconst VALUE$4 = \"value\";\nconst UTC_TIME_NAME = \"utcTimeName\";\nconst GENERAL_TIME_NAME = \"generalTimeName\";\nconst CLEAR_PROPS$R = [UTC_TIME_NAME, GENERAL_TIME_NAME];\nvar TimeType;\n(function (TimeType) {\n    TimeType[TimeType[\"UTCTime\"] = 0] = \"UTCTime\";\n    TimeType[TimeType[\"GeneralizedTime\"] = 1] = \"GeneralizedTime\";\n    TimeType[TimeType[\"empty\"] = 2] = \"empty\";\n})(TimeType || (TimeType = {}));\nclass Time extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils.getParametersValue(parameters, TYPE$1, Time.defaultValues(TYPE$1));\n        this.value = pvutils.getParametersValue(parameters, VALUE$4, Time.defaultValues(VALUE$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$1:\n                return 0;\n            case VALUE$4:\n                return new Date(0, 0, 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            optional,\n            value: [\n                new asn1js.UTCTime({ name: (names.utcTimeName || EMPTY_STRING) }),\n                new asn1js.GeneralizedTime({ name: (names.generalTimeName || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$R);\n        const asn1 = asn1js.compareSchema(schema, schema, Time.schema({\n            names: {\n                utcTimeName: UTC_TIME_NAME,\n                generalTimeName: GENERAL_TIME_NAME\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (UTC_TIME_NAME in asn1.result) {\n            this.type = 0;\n            this.value = asn1.result.utcTimeName.toDate();\n        }\n        if (GENERAL_TIME_NAME in asn1.result) {\n            this.type = 1;\n            this.value = asn1.result.generalTimeName.toDate();\n        }\n    }\n    toSchema() {\n        if (this.type === 0) {\n            return new asn1js.UTCTime({ valueDate: this.value });\n        }\n        else if (this.type === 1) {\n            return new asn1js.GeneralizedTime({ valueDate: this.value });\n        }\n        return {};\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            value: this.value\n        };\n    }\n}\nTime.CLASS_NAME = \"Time\";\n\nconst TBS$4 = \"tbs\";\nconst VERSION$f = \"version\";\nconst SERIAL_NUMBER$3 = \"serialNumber\";\nconst SIGNATURE$4 = \"signature\";\nconst ISSUER$2 = \"issuer\";\nconst NOT_BEFORE = \"notBefore\";\nconst NOT_AFTER = \"notAfter\";\nconst SUBJECT$1 = \"subject\";\nconst SUBJECT_PUBLIC_KEY_INFO = \"subjectPublicKeyInfo\";\nconst ISSUER_UNIQUE_ID = \"issuerUniqueID\";\nconst SUBJECT_UNIQUE_ID = \"subjectUniqueID\";\nconst EXTENSIONS$2 = \"extensions\";\nconst SIGNATURE_ALGORITHM$5 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$2 = \"signatureValue\";\nconst TBS_CERTIFICATE = \"tbsCertificate\";\nconst TBS_CERTIFICATE_VERSION = `${TBS_CERTIFICATE}.${VERSION$f}`;\nconst TBS_CERTIFICATE_SERIAL_NUMBER = `${TBS_CERTIFICATE}.${SERIAL_NUMBER$3}`;\nconst TBS_CERTIFICATE_SIGNATURE = `${TBS_CERTIFICATE}.${SIGNATURE$4}`;\nconst TBS_CERTIFICATE_ISSUER = `${TBS_CERTIFICATE}.${ISSUER$2}`;\nconst TBS_CERTIFICATE_NOT_BEFORE = `${TBS_CERTIFICATE}.${NOT_BEFORE}`;\nconst TBS_CERTIFICATE_NOT_AFTER = `${TBS_CERTIFICATE}.${NOT_AFTER}`;\nconst TBS_CERTIFICATE_SUBJECT = `${TBS_CERTIFICATE}.${SUBJECT$1}`;\nconst TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY = `${TBS_CERTIFICATE}.${SUBJECT_PUBLIC_KEY_INFO}`;\nconst TBS_CERTIFICATE_ISSUER_UNIQUE_ID = `${TBS_CERTIFICATE}.${ISSUER_UNIQUE_ID}`;\nconst TBS_CERTIFICATE_SUBJECT_UNIQUE_ID = `${TBS_CERTIFICATE}.${SUBJECT_UNIQUE_ID}`;\nconst TBS_CERTIFICATE_EXTENSIONS = `${TBS_CERTIFICATE}.${EXTENSIONS$2}`;\nconst CLEAR_PROPS$Q = [\n    TBS_CERTIFICATE,\n    TBS_CERTIFICATE_VERSION,\n    TBS_CERTIFICATE_SERIAL_NUMBER,\n    TBS_CERTIFICATE_SIGNATURE,\n    TBS_CERTIFICATE_ISSUER,\n    TBS_CERTIFICATE_NOT_BEFORE,\n    TBS_CERTIFICATE_NOT_AFTER,\n    TBS_CERTIFICATE_SUBJECT,\n    TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY,\n    TBS_CERTIFICATE_ISSUER_UNIQUE_ID,\n    TBS_CERTIFICATE_SUBJECT_UNIQUE_ID,\n    TBS_CERTIFICATE_EXTENSIONS,\n    SIGNATURE_ALGORITHM$5,\n    SIGNATURE_VALUE$2\n];\nfunction tbsCertificate(parameters = {}) {\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\n    return (new asn1js.Sequence({\n        name: (names.blockName || TBS_CERTIFICATE),\n        value: [\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Integer({ name: (names.tbsCertificateVersion || TBS_CERTIFICATE_VERSION) })\n                ]\n            }),\n            new asn1js.Integer({ name: (names.tbsCertificateSerialNumber || TBS_CERTIFICATE_SERIAL_NUMBER) }),\n            AlgorithmIdentifier.schema(names.signature || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SIGNATURE\n                }\n            }),\n            RelativeDistinguishedNames.schema(names.issuer || {\n                names: {\n                    blockName: TBS_CERTIFICATE_ISSUER\n                }\n            }),\n            new asn1js.Sequence({\n                name: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\n                value: [\n                    Time.schema(names.notBefore || {\n                        names: {\n                            utcTimeName: TBS_CERTIFICATE_NOT_BEFORE,\n                            generalTimeName: TBS_CERTIFICATE_NOT_BEFORE\n                        }\n                    }),\n                    Time.schema(names.notAfter || {\n                        names: {\n                            utcTimeName: TBS_CERTIFICATE_NOT_AFTER,\n                            generalTimeName: TBS_CERTIFICATE_NOT_AFTER\n                        }\n                    })\n                ]\n            }),\n            RelativeDistinguishedNames.schema(names.subject || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SUBJECT\n                }\n            }),\n            PublicKeyInfo.schema(names.subjectPublicKeyInfo || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY\n                }\n            }),\n            new asn1js.Primitive({\n                name: (names.tbsCertificateIssuerUniqueID || TBS_CERTIFICATE_ISSUER_UNIQUE_ID),\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                }\n            }),\n            new asn1js.Primitive({\n                name: (names.tbsCertificateSubjectUniqueID || TBS_CERTIFICATE_SUBJECT_UNIQUE_ID),\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                }\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [Extensions.schema(names.extensions || {\n                        names: {\n                            blockName: TBS_CERTIFICATE_EXTENSIONS\n                        }\n                    })]\n            })\n        ]\n    }));\n}\nclass Certificate extends PkiObject {\n    get tbs() {\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$4, Certificate.defaultValues(TBS$4)));\n        this.version = pvutils.getParametersValue(parameters, VERSION$f, Certificate.defaultValues(VERSION$f));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$3, Certificate.defaultValues(SERIAL_NUMBER$3));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$4, Certificate.defaultValues(SIGNATURE$4));\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$2, Certificate.defaultValues(ISSUER$2));\n        this.notBefore = pvutils.getParametersValue(parameters, NOT_BEFORE, Certificate.defaultValues(NOT_BEFORE));\n        this.notAfter = pvutils.getParametersValue(parameters, NOT_AFTER, Certificate.defaultValues(NOT_AFTER));\n        this.subject = pvutils.getParametersValue(parameters, SUBJECT$1, Certificate.defaultValues(SUBJECT$1));\n        this.subjectPublicKeyInfo = pvutils.getParametersValue(parameters, SUBJECT_PUBLIC_KEY_INFO, Certificate.defaultValues(SUBJECT_PUBLIC_KEY_INFO));\n        if (ISSUER_UNIQUE_ID in parameters) {\n            this.issuerUniqueID = pvutils.getParametersValue(parameters, ISSUER_UNIQUE_ID, Certificate.defaultValues(ISSUER_UNIQUE_ID));\n        }\n        if (SUBJECT_UNIQUE_ID in parameters) {\n            this.subjectUniqueID = pvutils.getParametersValue(parameters, SUBJECT_UNIQUE_ID, Certificate.defaultValues(SUBJECT_UNIQUE_ID));\n        }\n        if (EXTENSIONS$2 in parameters) {\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$2, Certificate.defaultValues(EXTENSIONS$2));\n        }\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$5, Certificate.defaultValues(SIGNATURE_ALGORITHM$5));\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$2, Certificate.defaultValues(SIGNATURE_VALUE$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$4:\n                return EMPTY_BUFFER;\n            case VERSION$f:\n                return 0;\n            case SERIAL_NUMBER$3:\n                return new asn1js.Integer();\n            case SIGNATURE$4:\n                return new AlgorithmIdentifier();\n            case ISSUER$2:\n                return new RelativeDistinguishedNames();\n            case NOT_BEFORE:\n                return new Time();\n            case NOT_AFTER:\n                return new Time();\n            case SUBJECT$1:\n                return new RelativeDistinguishedNames();\n            case SUBJECT_PUBLIC_KEY_INFO:\n                return new PublicKeyInfo();\n            case ISSUER_UNIQUE_ID:\n                return EMPTY_BUFFER;\n            case SUBJECT_UNIQUE_ID:\n                return EMPTY_BUFFER;\n            case EXTENSIONS$2:\n                return [];\n            case SIGNATURE_ALGORITHM$5:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$2:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                tbsCertificate(names.tbsCertificate),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$5\n                    }\n                }),\n                new asn1js.BitString({ name: (names.signatureValue || SIGNATURE_VALUE$2) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$Q);\n        const asn1 = asn1js.compareSchema(schema, schema, Certificate.schema({\n            names: {\n                tbsCertificate: {\n                    names: {\n                        extensions: {\n                            names: {\n                                extensions: TBS_CERTIFICATE_EXTENSIONS\n                            }\n                        }\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.tbsCertificate.valueBeforeDecodeView;\n        if (TBS_CERTIFICATE_VERSION in asn1.result)\n            this.version = asn1.result[TBS_CERTIFICATE_VERSION].valueBlock.valueDec;\n        this.serialNumber = asn1.result[TBS_CERTIFICATE_SERIAL_NUMBER];\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result[TBS_CERTIFICATE_SIGNATURE] });\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERTIFICATE_ISSUER] });\n        this.notBefore = new Time({ schema: asn1.result[TBS_CERTIFICATE_NOT_BEFORE] });\n        this.notAfter = new Time({ schema: asn1.result[TBS_CERTIFICATE_NOT_AFTER] });\n        this.subject = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERTIFICATE_SUBJECT] });\n        this.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY] });\n        if (TBS_CERTIFICATE_ISSUER_UNIQUE_ID in asn1.result)\n            this.issuerUniqueID = asn1.result[TBS_CERTIFICATE_ISSUER_UNIQUE_ID].valueBlock.valueHex;\n        if (TBS_CERTIFICATE_SUBJECT_UNIQUE_ID in asn1.result)\n            this.subjectUniqueID = asn1.result[TBS_CERTIFICATE_SUBJECT_UNIQUE_ID].valueBlock.valueHex;\n        if (TBS_CERTIFICATE_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TBS_CERTIFICATE_EXTENSIONS], element => new Extension({ schema: element }));\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [];\n        if ((VERSION$f in this) && (this.version !== Certificate.defaultValues(VERSION$f))) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Integer({ value: this.version })\n                ]\n            }));\n        }\n        outputArray.push(this.serialNumber);\n        outputArray.push(this.signature.toSchema());\n        outputArray.push(this.issuer.toSchema());\n        outputArray.push(new asn1js.Sequence({\n            value: [\n                this.notBefore.toSchema(),\n                this.notAfter.toSchema()\n            ]\n        }));\n        outputArray.push(this.subject.toSchema());\n        outputArray.push(this.subjectPublicKeyInfo.toSchema());\n        if (this.issuerUniqueID) {\n            outputArray.push(new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: this.issuerUniqueID\n            }));\n        }\n        if (this.subjectUniqueID) {\n            outputArray.push(new asn1js.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: this.subjectUniqueID\n            }));\n        }\n        if (this.extensions) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [new asn1js.Sequence({\n                        value: Array.from(this.extensions, o => o.toSchema())\n                    })]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (!this.tbsView.byteLength) {\n                return Certificate.schema().value[0];\n            }\n            const asn1 = asn1js.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Certificate\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbs: pvtsutils.Convert.ToHex(this.tbsView),\n            version: this.version,\n            serialNumber: this.serialNumber.toJSON(),\n            signature: this.signature.toJSON(),\n            issuer: this.issuer.toJSON(),\n            notBefore: this.notBefore.toJSON(),\n            notAfter: this.notAfter.toJSON(),\n            subject: this.subject.toJSON(),\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n        if ((VERSION$f in this) && (this.version !== Certificate.defaultValues(VERSION$f))) {\n            res.version = this.version;\n        }\n        if (this.issuerUniqueID) {\n            res.issuerUniqueID = pvtsutils.Convert.ToHex(this.issuerUniqueID);\n        }\n        if (this.subjectUniqueID) {\n            res.subjectUniqueID = pvtsutils.Convert.ToHex(this.subjectUniqueID);\n        }\n        if (this.extensions) {\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        }\n        return res;\n    }\n    async getPublicKey(parameters, crypto = getCrypto(true)) {\n        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n    }\n    async getKeyHash(hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        return crypto.digest({ name: hashAlgorithm }, this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParameters.parameters;\n        this.signature = signatureParameters.signatureAlgorithm;\n        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js.BitString({ valueHex: signature });\n    }\n    async verify(issuerCertificate, crypto = getCrypto(true)) {\n        let subjectPublicKeyInfo;\n        if (issuerCertificate) {\n            subjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\n        }\n        else if (this.issuer.isEqual(this.subject)) {\n            subjectPublicKeyInfo = this.subjectPublicKeyInfo;\n        }\n        if (!(subjectPublicKeyInfo instanceof PublicKeyInfo)) {\n            throw new Error(\"Please provide issuer certificate as a parameter\");\n        }\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nCertificate.CLASS_NAME = \"Certificate\";\nfunction checkCA(cert, signerCert = null) {\n    if (signerCert && cert.issuer.isEqual(signerCert.issuer) && cert.serialNumber.isEqual(signerCert.serialNumber)) {\n        return null;\n    }\n    let isCA = false;\n    if (cert.extensions) {\n        for (const extension of cert.extensions) {\n            if (extension.extnID === id_BasicConstraints && extension.parsedValue instanceof BasicConstraints) {\n                if (extension.parsedValue.cA) {\n                    isCA = true;\n                    break;\n                }\n            }\n        }\n    }\n    if (isCA) {\n        return cert;\n    }\n    return null;\n}\n\nconst CERT_ID$1 = \"certId\";\nconst CERT_VALUE = \"certValue\";\nconst PARSED_VALUE$4 = \"parsedValue\";\nconst CLEAR_PROPS$P = [\n    CERT_ID$1,\n    CERT_VALUE\n];\nclass CertBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certId = pvutils.getParametersValue(parameters, CERT_ID$1, CertBag.defaultValues(CERT_ID$1));\n        this.certValue = pvutils.getParametersValue(parameters, CERT_VALUE, CertBag.defaultValues(CERT_VALUE));\n        if (PARSED_VALUE$4 in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$4, CertBag.defaultValues(PARSED_VALUE$4));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERT_ID$1:\n                return EMPTY_STRING;\n            case CERT_VALUE:\n                return (new asn1js.Any());\n            case PARSED_VALUE$4:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERT_ID$1:\n                return (memberValue === EMPTY_STRING);\n            case CERT_VALUE:\n                return (memberValue instanceof asn1js.Any);\n            case PARSED_VALUE$4:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$P);\n        const asn1 = asn1js.compareSchema(schema, schema, CertBag.schema({\n            names: {\n                id: CERT_ID$1,\n                value: CERT_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certId = asn1.result.certId.valueBlock.toString();\n        this.certValue = asn1.result.certValue;\n        const certValueHex = this.certValue.valueBlock.valueHexView;\n        switch (this.certId) {\n            case id_CertBag_X509Certificate:\n                {\n                    try {\n                        this.parsedValue = Certificate.fromBER(certValueHex);\n                    }\n                    catch (ex) {\n                        AttributeCertificateV2.fromBER(certValueHex);\n                    }\n                }\n                break;\n            case id_CertBag_AttributeCertificate:\n                {\n                    this.parsedValue = AttributeCertificateV2.fromBER(certValueHex);\n                }\n                break;\n            case id_CertBag_SDSICertificate:\n            default:\n                throw new Error(`Incorrect CERT_ID value in CertBag: ${this.certId}`);\n        }\n    }\n    toSchema() {\n        if (PARSED_VALUE$4 in this) {\n            if (\"acinfo\" in this.parsedValue) {\n                this.certId = id_CertBag_AttributeCertificate;\n            }\n            else {\n                this.certId = id_CertBag_X509Certificate;\n            }\n            this.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\n        }\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.certId }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [((\"toSchema\" in this.certValue) ? this.certValue.toSchema() : this.certValue)]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            certId: this.certId,\n            certValue: this.certValue.toJSON()\n        };\n    }\n}\nCertBag.CLASS_NAME = \"CertBag\";\n\nconst USER_CERTIFICATE = \"userCertificate\";\nconst REVOCATION_DATE = \"revocationDate\";\nconst CRL_ENTRY_EXTENSIONS = \"crlEntryExtensions\";\nconst CLEAR_PROPS$O = [\n    USER_CERTIFICATE,\n    REVOCATION_DATE,\n    CRL_ENTRY_EXTENSIONS\n];\nclass RevokedCertificate extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.userCertificate = pvutils.getParametersValue(parameters, USER_CERTIFICATE, RevokedCertificate.defaultValues(USER_CERTIFICATE));\n        this.revocationDate = pvutils.getParametersValue(parameters, REVOCATION_DATE, RevokedCertificate.defaultValues(REVOCATION_DATE));\n        if (CRL_ENTRY_EXTENSIONS in parameters) {\n            this.crlEntryExtensions = pvutils.getParametersValue(parameters, CRL_ENTRY_EXTENSIONS, RevokedCertificate.defaultValues(CRL_ENTRY_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case USER_CERTIFICATE:\n                return new asn1js.Integer();\n            case REVOCATION_DATE:\n                return new Time();\n            case CRL_ENTRY_EXTENSIONS:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.userCertificate || USER_CERTIFICATE) }),\n                Time.schema({\n                    names: {\n                        utcTimeName: (names.revocationDate || REVOCATION_DATE),\n                        generalTimeName: (names.revocationDate || REVOCATION_DATE)\n                    }\n                }),\n                Extensions.schema({\n                    names: {\n                        blockName: (names.crlEntryExtensions || CRL_ENTRY_EXTENSIONS)\n                    }\n                }, true)\n            ]\n        });\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$O);\n        const asn1 = asn1js.compareSchema(schema, schema, RevokedCertificate.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.userCertificate = asn1.result.userCertificate;\n        this.revocationDate = new Time({ schema: asn1.result.revocationDate });\n        if (CRL_ENTRY_EXTENSIONS in asn1.result) {\n            this.crlEntryExtensions = new Extensions({ schema: asn1.result.crlEntryExtensions });\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            this.userCertificate,\n            this.revocationDate.toSchema()\n        ];\n        if (this.crlEntryExtensions) {\n            outputArray.push(this.crlEntryExtensions.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            userCertificate: this.userCertificate.toJSON(),\n            revocationDate: this.revocationDate.toJSON(),\n        };\n        if (this.crlEntryExtensions) {\n            res.crlEntryExtensions = this.crlEntryExtensions.toJSON();\n        }\n        return res;\n    }\n}\nRevokedCertificate.CLASS_NAME = \"RevokedCertificate\";\n\nconst TBS$3 = \"tbs\";\nconst VERSION$e = \"version\";\nconst SIGNATURE$3 = \"signature\";\nconst ISSUER$1 = \"issuer\";\nconst THIS_UPDATE$1 = \"thisUpdate\";\nconst NEXT_UPDATE$1 = \"nextUpdate\";\nconst REVOKED_CERTIFICATES = \"revokedCertificates\";\nconst CRL_EXTENSIONS = \"crlExtensions\";\nconst SIGNATURE_ALGORITHM$4 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$1 = \"signatureValue\";\nconst TBS_CERT_LIST = \"tbsCertList\";\nconst TBS_CERT_LIST_VERSION = `${TBS_CERT_LIST}.version`;\nconst TBS_CERT_LIST_SIGNATURE = `${TBS_CERT_LIST}.signature`;\nconst TBS_CERT_LIST_ISSUER = `${TBS_CERT_LIST}.issuer`;\nconst TBS_CERT_LIST_THIS_UPDATE = `${TBS_CERT_LIST}.thisUpdate`;\nconst TBS_CERT_LIST_NEXT_UPDATE = `${TBS_CERT_LIST}.nextUpdate`;\nconst TBS_CERT_LIST_REVOKED_CERTIFICATES = `${TBS_CERT_LIST}.revokedCertificates`;\nconst TBS_CERT_LIST_EXTENSIONS = `${TBS_CERT_LIST}.extensions`;\nconst CLEAR_PROPS$N = [\n    TBS_CERT_LIST,\n    TBS_CERT_LIST_VERSION,\n    TBS_CERT_LIST_SIGNATURE,\n    TBS_CERT_LIST_ISSUER,\n    TBS_CERT_LIST_THIS_UPDATE,\n    TBS_CERT_LIST_NEXT_UPDATE,\n    TBS_CERT_LIST_REVOKED_CERTIFICATES,\n    TBS_CERT_LIST_EXTENSIONS,\n    SIGNATURE_ALGORITHM$4,\n    SIGNATURE_VALUE$1\n];\nfunction tbsCertList(parameters = {}) {\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\n    return (new asn1js.Sequence({\n        name: (names.blockName || TBS_CERT_LIST),\n        value: [\n            new asn1js.Integer({\n                optional: true,\n                name: (names.tbsCertListVersion || TBS_CERT_LIST_VERSION),\n                value: 2\n            }),\n            AlgorithmIdentifier.schema(names.signature || {\n                names: {\n                    blockName: TBS_CERT_LIST_SIGNATURE\n                }\n            }),\n            RelativeDistinguishedNames.schema(names.issuer || {\n                names: {\n                    blockName: TBS_CERT_LIST_ISSUER\n                }\n            }),\n            Time.schema(names.tbsCertListThisUpdate || {\n                names: {\n                    utcTimeName: TBS_CERT_LIST_THIS_UPDATE,\n                    generalTimeName: TBS_CERT_LIST_THIS_UPDATE\n                }\n            }),\n            Time.schema(names.tbsCertListNextUpdate || {\n                names: {\n                    utcTimeName: TBS_CERT_LIST_NEXT_UPDATE,\n                    generalTimeName: TBS_CERT_LIST_NEXT_UPDATE\n                }\n            }, true),\n            new asn1js.Sequence({\n                optional: true,\n                value: [\n                    new asn1js.Repeated({\n                        name: (names.tbsCertListRevokedCertificates || TBS_CERT_LIST_REVOKED_CERTIFICATES),\n                        value: new asn1js.Sequence({\n                            value: [\n                                new asn1js.Integer(),\n                                Time.schema(),\n                                Extensions.schema({}, true)\n                            ]\n                        })\n                    })\n                ]\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [Extensions.schema(names.crlExtensions || {\n                        names: {\n                            blockName: TBS_CERT_LIST_EXTENSIONS\n                        }\n                    })]\n            })\n        ]\n    }));\n}\nconst WELL_KNOWN_EXTENSIONS = [\n    id_AuthorityKeyIdentifier,\n    id_IssuerAltName,\n    id_CRLNumber,\n    id_BaseCRLNumber,\n    id_IssuingDistributionPoint,\n    id_FreshestCRL,\n    id_AuthorityInfoAccess,\n    id_CRLReason,\n    id_InvalidityDate,\n    id_CertificateIssuer,\n];\nclass CertificateRevocationList extends PkiObject {\n    get tbs() {\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$3, CertificateRevocationList.defaultValues(TBS$3)));\n        this.version = pvutils.getParametersValue(parameters, VERSION$e, CertificateRevocationList.defaultValues(VERSION$e));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$3, CertificateRevocationList.defaultValues(SIGNATURE$3));\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$1, CertificateRevocationList.defaultValues(ISSUER$1));\n        this.thisUpdate = pvutils.getParametersValue(parameters, THIS_UPDATE$1, CertificateRevocationList.defaultValues(THIS_UPDATE$1));\n        if (NEXT_UPDATE$1 in parameters) {\n            this.nextUpdate = pvutils.getParametersValue(parameters, NEXT_UPDATE$1, CertificateRevocationList.defaultValues(NEXT_UPDATE$1));\n        }\n        if (REVOKED_CERTIFICATES in parameters) {\n            this.revokedCertificates = pvutils.getParametersValue(parameters, REVOKED_CERTIFICATES, CertificateRevocationList.defaultValues(REVOKED_CERTIFICATES));\n        }\n        if (CRL_EXTENSIONS in parameters) {\n            this.crlExtensions = pvutils.getParametersValue(parameters, CRL_EXTENSIONS, CertificateRevocationList.defaultValues(CRL_EXTENSIONS));\n        }\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$4, CertificateRevocationList.defaultValues(SIGNATURE_ALGORITHM$4));\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$1, CertificateRevocationList.defaultValues(SIGNATURE_VALUE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$3:\n                return EMPTY_BUFFER;\n            case VERSION$e:\n                return 0;\n            case SIGNATURE$3:\n                return new AlgorithmIdentifier();\n            case ISSUER$1:\n                return new RelativeDistinguishedNames();\n            case THIS_UPDATE$1:\n                return new Time();\n            case NEXT_UPDATE$1:\n                return new Time();\n            case REVOKED_CERTIFICATES:\n                return [];\n            case CRL_EXTENSIONS:\n                return new Extensions();\n            case SIGNATURE_ALGORITHM$4:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$1:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || \"CertificateList\"),\n            value: [\n                tbsCertList(parameters),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$4\n                    }\n                }),\n                new asn1js.BitString({ name: (names.signatureValue || SIGNATURE_VALUE$1) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$N);\n        const asn1 = asn1js.compareSchema(schema, schema, CertificateRevocationList.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.tbsCertList.valueBeforeDecodeView;\n        if (TBS_CERT_LIST_VERSION in asn1.result) {\n            this.version = asn1.result[TBS_CERT_LIST_VERSION].valueBlock.valueDec;\n        }\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result[TBS_CERT_LIST_SIGNATURE] });\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERT_LIST_ISSUER] });\n        this.thisUpdate = new Time({ schema: asn1.result[TBS_CERT_LIST_THIS_UPDATE] });\n        if (TBS_CERT_LIST_NEXT_UPDATE in asn1.result) {\n            this.nextUpdate = new Time({ schema: asn1.result[TBS_CERT_LIST_NEXT_UPDATE] });\n        }\n        if (TBS_CERT_LIST_REVOKED_CERTIFICATES in asn1.result) {\n            this.revokedCertificates = Array.from(asn1.result[TBS_CERT_LIST_REVOKED_CERTIFICATES], element => new RevokedCertificate({ schema: element }));\n        }\n        if (TBS_CERT_LIST_EXTENSIONS in asn1.result) {\n            this.crlExtensions = new Extensions({ schema: asn1.result[TBS_CERT_LIST_EXTENSIONS] });\n        }\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [];\n        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e)) {\n            outputArray.push(new asn1js.Integer({ value: this.version }));\n        }\n        outputArray.push(this.signature.toSchema());\n        outputArray.push(this.issuer.toSchema());\n        outputArray.push(this.thisUpdate.toSchema());\n        if (this.nextUpdate) {\n            outputArray.push(this.nextUpdate.toSchema());\n        }\n        if (this.revokedCertificates) {\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.revokedCertificates, o => o.toSchema())\n            }));\n        }\n        if (this.crlExtensions) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    this.crlExtensions.toSchema()\n                ]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (!encodeFlag) {\n            if (!this.tbsView.byteLength) {\n                return CertificateRevocationList.schema();\n            }\n            const asn1 = asn1js.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Certificate Revocation List\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbs: pvtsutils.Convert.ToHex(this.tbsView),\n            version: this.version,\n            signature: this.signature.toJSON(),\n            issuer: this.issuer.toJSON(),\n            thisUpdate: this.thisUpdate.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON()\n        };\n        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e))\n            res.version = this.version;\n        if (this.nextUpdate) {\n            res.nextUpdate = this.nextUpdate.toJSON();\n        }\n        if (this.revokedCertificates) {\n            res.revokedCertificates = Array.from(this.revokedCertificates, o => o.toJSON());\n        }\n        if (this.crlExtensions) {\n            res.crlExtensions = this.crlExtensions.toJSON();\n        }\n        return res;\n    }\n    isCertificateRevoked(certificate) {\n        if (!this.issuer.isEqual(certificate.issuer)) {\n            return false;\n        }\n        if (!this.revokedCertificates) {\n            return false;\n        }\n        for (const revokedCertificate of this.revokedCertificates) {\n            if (revokedCertificate.userCertificate.isEqual(certificate.serialNumber)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const { parameters } = signatureParameters;\n        this.signature = signatureParameters.signatureAlgorithm;\n        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js.BitString({ valueHex: signature });\n    }\n    async verify(parameters = {}, crypto = getCrypto(true)) {\n        let subjectPublicKeyInfo;\n        if (parameters.issuerCertificate) {\n            subjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;\n            if (!this.issuer.isEqual(parameters.issuerCertificate.subject)) {\n                return false;\n            }\n        }\n        if (parameters.publicKeyInfo) {\n            subjectPublicKeyInfo = parameters.publicKeyInfo;\n        }\n        if (!subjectPublicKeyInfo) {\n            throw new Error(\"Issuer's certificate must be provided as an input parameter\");\n        }\n        if (this.crlExtensions) {\n            for (const extension of this.crlExtensions.extensions) {\n                if (extension.critical) {\n                    if (!WELL_KNOWN_EXTENSIONS.includes(extension.extnID))\n                        return false;\n                }\n            }\n        }\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nCertificateRevocationList.CLASS_NAME = \"CertificateRevocationList\";\n\nconst CRL_ID = \"crlId\";\nconst CRL_VALUE = \"crlValue\";\nconst PARSED_VALUE$3 = \"parsedValue\";\nconst CLEAR_PROPS$M = [\n    CRL_ID,\n    CRL_VALUE,\n];\nclass CRLBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crlId = pvutils.getParametersValue(parameters, CRL_ID, CRLBag.defaultValues(CRL_ID));\n        this.crlValue = pvutils.getParametersValue(parameters, CRL_VALUE, CRLBag.defaultValues(CRL_VALUE));\n        if (PARSED_VALUE$3 in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$3, CRLBag.defaultValues(PARSED_VALUE$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CRL_ID:\n                return EMPTY_STRING;\n            case CRL_VALUE:\n                return (new asn1js.Any());\n            case PARSED_VALUE$3:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CRL_ID:\n                return (memberValue === EMPTY_STRING);\n            case CRL_VALUE:\n                return (memberValue instanceof asn1js.Any);\n            case PARSED_VALUE$3:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$M);\n        const asn1 = asn1js.compareSchema(schema, schema, CRLBag.schema({\n            names: {\n                id: CRL_ID,\n                value: CRL_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.crlId = asn1.result.crlId.valueBlock.toString();\n        this.crlValue = asn1.result.crlValue;\n        switch (this.crlId) {\n            case id_CRLBag_X509CRL:\n                {\n                    this.parsedValue = CertificateRevocationList.fromBER(this.certValue.valueBlock.valueHex);\n                }\n                break;\n            default:\n                throw new Error(`Incorrect CRL_ID value in CRLBag: ${this.crlId}`);\n        }\n    }\n    toSchema() {\n        if (this.parsedValue) {\n            this.crlId = id_CRLBag_X509CRL;\n            this.crlValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\n        }\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.crlId }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.crlValue.toSchema()]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            crlId: this.crlId,\n            crlValue: this.crlValue.toJSON()\n        };\n    }\n}\nCRLBag.CLASS_NAME = \"CRLBag\";\n\nconst VERSION$d = \"version\";\nconst ENCRYPTED_CONTENT_INFO$1 = \"encryptedContentInfo\";\nconst UNPROTECTED_ATTRS$1 = \"unprotectedAttrs\";\nconst CLEAR_PROPS$L = [\n    VERSION$d,\n    ENCRYPTED_CONTENT_INFO$1,\n    UNPROTECTED_ATTRS$1,\n];\nclass EncryptedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$d, EncryptedData.defaultValues(VERSION$d));\n        this.encryptedContentInfo = pvutils.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO$1, EncryptedData.defaultValues(ENCRYPTED_CONTENT_INFO$1));\n        if (UNPROTECTED_ATTRS$1 in parameters) {\n            this.unprotectedAttrs = pvutils.getParametersValue(parameters, UNPROTECTED_ATTRS$1, EncryptedData.defaultValues(UNPROTECTED_ATTRS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$d:\n                return 0;\n            case ENCRYPTED_CONTENT_INFO$1:\n                return new EncryptedContentInfo();\n            case UNPROTECTED_ATTRS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$d:\n                return (memberValue === 0);\n            case ENCRYPTED_CONTENT_INFO$1:\n                return ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\n            case UNPROTECTED_ATTRS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.unprotectedAttrs || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$L);\n        const asn1 = asn1js.compareSchema(schema, schema, EncryptedData.schema({\n            names: {\n                version: VERSION$d,\n                encryptedContentInfo: {\n                    names: {\n                        blockName: ENCRYPTED_CONTENT_INFO$1\n                    }\n                },\n                unprotectedAttrs: UNPROTECTED_ATTRS$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\n        if (UNPROTECTED_ATTRS$1 in asn1.result)\n            this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(this.encryptedContentInfo.toSchema());\n        if (this.unprotectedAttrs) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.unprotectedAttrs, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            encryptedContentInfo: this.encryptedContentInfo.toJSON()\n        };\n        if (this.unprotectedAttrs)\n            res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());\n        return res;\n    }\n    async encrypt(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        const encryptParams = {\n            ...parameters,\n            contentType: \"1.2.840.113549.1.7.1\",\n        };\n        this.encryptedContentInfo = await crypto.encryptEncryptedContentInfo(encryptParams);\n    }\n    async decrypt(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        const decryptParams = {\n            ...parameters,\n            encryptedContentInfo: this.encryptedContentInfo,\n        };\n        return crypto.decryptEncryptedContentInfo(decryptParams);\n    }\n}\nEncryptedData.CLASS_NAME = \"EncryptedData\";\n\nconst ENCRYPTION_ALGORITHM = \"encryptionAlgorithm\";\nconst ENCRYPTED_DATA = \"encryptedData\";\nconst PARSED_VALUE$2 = \"parsedValue\";\nconst CLEAR_PROPS$K = [\n    ENCRYPTION_ALGORITHM,\n    ENCRYPTED_DATA,\n];\nclass PKCS8ShroudedKeyBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.encryptionAlgorithm = pvutils.getParametersValue(parameters, ENCRYPTION_ALGORITHM, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTION_ALGORITHM));\n        this.encryptedData = pvutils.getParametersValue(parameters, ENCRYPTED_DATA, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTED_DATA));\n        if (PARSED_VALUE$2 in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$2, PKCS8ShroudedKeyBag.defaultValues(PARSED_VALUE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ENCRYPTION_ALGORITHM:\n                return (new AlgorithmIdentifier());\n            case ENCRYPTED_DATA:\n                return (new asn1js.OctetString());\n            case PARSED_VALUE$2:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ENCRYPTION_ALGORITHM:\n                return ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\n                    ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_DATA:\n                return (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\n            case PARSED_VALUE$2:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.encryptionAlgorithm || {\n                    names: {\n                        blockName: ENCRYPTION_ALGORITHM\n                    }\n                }),\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.OctetString({ name: (names.encryptedData || ENCRYPTED_DATA) }),\n                        new asn1js.OctetString({\n                            idBlock: {\n                                isConstructed: true\n                            },\n                            name: (names.encryptedData || ENCRYPTED_DATA)\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$K);\n        const asn1 = asn1js.compareSchema(schema, schema, PKCS8ShroudedKeyBag.schema({\n            names: {\n                encryptionAlgorithm: {\n                    names: {\n                        blockName: ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedData: ENCRYPTED_DATA\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\n        this.encryptedData = asn1.result.encryptedData;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.encryptionAlgorithm.toSchema(),\n                this.encryptedData\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            encryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\n            encryptedData: this.encryptedData.toJSON(),\n        };\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        const cmsEncrypted = new EncryptedData({\n            encryptedContentInfo: new EncryptedContentInfo({\n                contentEncryptionAlgorithm: this.encryptionAlgorithm,\n                encryptedContent: this.encryptedData\n            })\n        });\n        const decryptedData = await cmsEncrypted.decrypt(parameters, crypto);\n        this.parsedValue = PrivateKeyInfo.fromBER(decryptedData);\n    }\n    async makeInternalValues(parameters, crypto = getCrypto(true)) {\n        if (!this.parsedValue) {\n            throw new Error(\"Please initialize \\\"parsedValue\\\" first\");\n        }\n        const cmsEncrypted = new EncryptedData();\n        const encryptParams = {\n            ...parameters,\n            contentToEncrypt: this.parsedValue.toSchema().toBER(false),\n        };\n        await cmsEncrypted.encrypt(encryptParams, crypto);\n        if (!cmsEncrypted.encryptedContentInfo.encryptedContent) {\n            throw new Error(\"The filed `encryptedContent` in EncryptedContentInfo is empty\");\n        }\n        this.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\n        this.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\n    }\n}\nPKCS8ShroudedKeyBag.CLASS_NAME = \"PKCS8ShroudedKeyBag\";\n\nconst SECRET_TYPE_ID = \"secretTypeId\";\nconst SECRET_VALUE = \"secretValue\";\nconst CLEAR_PROPS$J = [\n    SECRET_TYPE_ID,\n    SECRET_VALUE,\n];\nclass SecretBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.secretTypeId = pvutils.getParametersValue(parameters, SECRET_TYPE_ID, SecretBag.defaultValues(SECRET_TYPE_ID));\n        this.secretValue = pvutils.getParametersValue(parameters, SECRET_VALUE, SecretBag.defaultValues(SECRET_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SECRET_TYPE_ID:\n                return EMPTY_STRING;\n            case SECRET_VALUE:\n                return (new asn1js.Any());\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SECRET_TYPE_ID:\n                return (memberValue === EMPTY_STRING);\n            case SECRET_VALUE:\n                return (memberValue instanceof asn1js.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$J);\n        const asn1 = asn1js.compareSchema(schema, schema, SecretBag.schema({\n            names: {\n                id: SECRET_TYPE_ID,\n                value: SECRET_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();\n        this.secretValue = asn1.result.secretValue;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.secretTypeId }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.secretValue.toSchema()]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            secretTypeId: this.secretTypeId,\n            secretValue: this.secretValue.toJSON()\n        };\n    }\n}\nSecretBag.CLASS_NAME = \"SecretBag\";\n\nclass SafeBagValueFactory {\n    static getItems() {\n        if (!this.items) {\n            this.items = {};\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.1\", PrivateKeyInfo);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.2\", PKCS8ShroudedKeyBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.3\", CertBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.4\", CRLBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.5\", SecretBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.6\", SafeContents);\n        }\n        return this.items;\n    }\n    static register(id, type) {\n        this.getItems()[id] = type;\n    }\n    static find(id) {\n        return this.getItems()[id] || null;\n    }\n}\n\nconst BAG_ID = \"bagId\";\nconst BAG_VALUE = \"bagValue\";\nconst BAG_ATTRIBUTES = \"bagAttributes\";\nconst CLEAR_PROPS$I = [\n    BAG_ID,\n    BAG_VALUE,\n    BAG_ATTRIBUTES\n];\nclass SafeBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.bagId = pvutils.getParametersValue(parameters, BAG_ID, SafeBag.defaultValues(BAG_ID));\n        this.bagValue = pvutils.getParametersValue(parameters, BAG_VALUE, SafeBag.defaultValues(BAG_VALUE));\n        if (BAG_ATTRIBUTES in parameters) {\n            this.bagAttributes = pvutils.getParametersValue(parameters, BAG_ATTRIBUTES, SafeBag.defaultValues(BAG_ATTRIBUTES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BAG_ID:\n                return EMPTY_STRING;\n            case BAG_VALUE:\n                return (new asn1js.Any());\n            case BAG_ATTRIBUTES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case BAG_ID:\n                return (memberValue === EMPTY_STRING);\n            case BAG_VALUE:\n                return (memberValue instanceof asn1js.Any);\n            case BAG_ATTRIBUTES:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.bagId || BAG_ID) }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Any({ name: (names.bagValue || BAG_VALUE) })]\n                }),\n                new asn1js.Set({\n                    optional: true,\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.bagAttributes || BAG_ATTRIBUTES),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$I);\n        const asn1 = asn1js.compareSchema(schema, schema, SafeBag.schema({\n            names: {\n                bagId: BAG_ID,\n                bagValue: BAG_VALUE,\n                bagAttributes: BAG_ATTRIBUTES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.bagId = asn1.result.bagId.valueBlock.toString();\n        const bagType = SafeBagValueFactory.find(this.bagId);\n        if (!bagType) {\n            throw new Error(`Invalid BAG_ID for SafeBag: ${this.bagId}`);\n        }\n        this.bagValue = new bagType({ schema: asn1.result.bagValue });\n        if (BAG_ATTRIBUTES in asn1.result) {\n            this.bagAttributes = Array.from(asn1.result.bagAttributes, element => new Attribute({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js.ObjectIdentifier({ value: this.bagId }),\n            new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.bagValue.toSchema()]\n            })\n        ];\n        if (this.bagAttributes) {\n            outputArray.push(new asn1js.Set({\n                value: Array.from(this.bagAttributes, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const output = {\n            bagId: this.bagId,\n            bagValue: this.bagValue.toJSON()\n        };\n        if (this.bagAttributes) {\n            output.bagAttributes = Array.from(this.bagAttributes, o => o.toJSON());\n        }\n        return output;\n    }\n}\nSafeBag.CLASS_NAME = \"SafeBag\";\n\nconst SAFE_BUGS = \"safeBags\";\nclass SafeContents extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.safeBags = pvutils.getParametersValue(parameters, SAFE_BUGS, SafeContents.defaultValues(SAFE_BUGS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SAFE_BUGS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SAFE_BUGS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.safeBags || EMPTY_STRING),\n                    value: SafeBag.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            SAFE_BUGS\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, SafeContents.schema({\n            names: {\n                safeBags: SAFE_BUGS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.safeBags = Array.from(asn1.result.safeBags, element => new SafeBag({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.safeBags, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            safeBags: Array.from(this.safeBags, o => o.toJSON())\n        };\n    }\n}\nSafeContents.CLASS_NAME = \"SafeContents\";\n\nconst OTHER_CERT_FORMAT = \"otherCertFormat\";\nconst OTHER_CERT = \"otherCert\";\nconst CLEAR_PROPS$H = [\n    OTHER_CERT_FORMAT,\n    OTHER_CERT\n];\nclass OtherCertificateFormat extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.otherCertFormat = pvutils.getParametersValue(parameters, OTHER_CERT_FORMAT, OtherCertificateFormat.defaultValues(OTHER_CERT_FORMAT));\n        this.otherCert = pvutils.getParametersValue(parameters, OTHER_CERT, OtherCertificateFormat.defaultValues(OTHER_CERT));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case OTHER_CERT_FORMAT:\n                return EMPTY_STRING;\n            case OTHER_CERT:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.otherCertFormat || OTHER_CERT_FORMAT) }),\n                new asn1js.Any({ name: (names.otherCert || OTHER_CERT) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$H);\n        const asn1 = asn1js.compareSchema(schema, schema, OtherCertificateFormat.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();\n        this.otherCert = asn1.result.otherCert;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.otherCertFormat }),\n                this.otherCert\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            otherCertFormat: this.otherCertFormat\n        };\n        if (!(this.otherCert instanceof asn1js.Any)) {\n            res.otherCert = this.otherCert.toJSON();\n        }\n        return res;\n    }\n}\n\nconst CERTIFICATES$1 = \"certificates\";\nconst CLEAR_PROPS$G = [\n    CERTIFICATES$1,\n];\nclass CertificateSet extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificates = pvutils.getParametersValue(parameters, CERTIFICATES$1, CertificateSet.defaultValues(CERTIFICATES$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATES$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Set({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.certificates || CERTIFICATES$1),\n                    value: new asn1js.Choice({\n                        value: [\n                            Certificate.schema(),\n                            new asn1js.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 0\n                                },\n                                value: [\n                                    new asn1js.Any()\n                                ]\n                            }),\n                            new asn1js.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 1\n                                },\n                                value: [\n                                    new asn1js.Sequence\n                                ]\n                            }),\n                            new asn1js.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 2\n                                },\n                                value: AttributeCertificateV2.schema().valueBlock.value\n                            }),\n                            new asn1js.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 3\n                                },\n                                value: OtherCertificateFormat.schema().valueBlock.value\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$G);\n        const asn1 = asn1js.compareSchema(schema, schema, CertificateSet.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.certificates = Array.from(asn1.result.certificates || [], (element) => {\n            const initialTagNumber = element.idBlock.tagNumber;\n            if (element.idBlock.tagClass === 1)\n                return new Certificate({ schema: element });\n            const elementSequence = new asn1js.Sequence({\n                value: element.valueBlock.value\n            });\n            switch (initialTagNumber) {\n                case 1:\n                    if (elementSequence.valueBlock.value[0].valueBlock.value[0].valueBlock.valueDec === 1) {\n                        return new AttributeCertificateV2({ schema: elementSequence });\n                    }\n                    else {\n                        return new AttributeCertificateV1({ schema: elementSequence });\n                    }\n                case 2:\n                    return new AttributeCertificateV2({ schema: elementSequence });\n                case 3:\n                    return new OtherCertificateFormat({ schema: elementSequence });\n            }\n            return element;\n        });\n    }\n    toSchema() {\n        return (new asn1js.Set({\n            value: Array.from(this.certificates, element => {\n                switch (true) {\n                    case (element instanceof Certificate):\n                        return element.toSchema();\n                    case (element instanceof AttributeCertificateV1):\n                        return new asn1js.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                    case (element instanceof AttributeCertificateV2):\n                        return new asn1js.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                    case (element instanceof OtherCertificateFormat):\n                        return new asn1js.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 3\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                }\n                return element.toSchema();\n            })\n        }));\n    }\n    toJSON() {\n        return {\n            certificates: Array.from(this.certificates, o => o.toJSON())\n        };\n    }\n}\nCertificateSet.CLASS_NAME = \"CertificateSet\";\n\nconst OTHER_REV_INFO_FORMAT = \"otherRevInfoFormat\";\nconst OTHER_REV_INFO = \"otherRevInfo\";\nconst CLEAR_PROPS$F = [\n    OTHER_REV_INFO_FORMAT,\n    OTHER_REV_INFO\n];\nclass OtherRevocationInfoFormat extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.otherRevInfoFormat = pvutils.getParametersValue(parameters, OTHER_REV_INFO_FORMAT, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO_FORMAT));\n        this.otherRevInfo = pvutils.getParametersValue(parameters, OTHER_REV_INFO, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case OTHER_REV_INFO_FORMAT:\n                return EMPTY_STRING;\n            case OTHER_REV_INFO:\n                return new asn1js.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.otherRevInfoFormat || OTHER_REV_INFO_FORMAT) }),\n                new asn1js.Any({ name: (names.otherRevInfo || OTHER_REV_INFO) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$F);\n        const asn1 = asn1js.compareSchema(schema, schema, OtherRevocationInfoFormat.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();\n        this.otherRevInfo = asn1.result.otherRevInfo;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.otherRevInfoFormat }),\n                this.otherRevInfo\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            otherRevInfoFormat: this.otherRevInfoFormat\n        };\n        if (!(this.otherRevInfo instanceof asn1js.Any)) {\n            res.otherRevInfo = this.otherRevInfo.toJSON();\n        }\n        return res;\n    }\n}\nOtherRevocationInfoFormat.CLASS_NAME = \"OtherRevocationInfoFormat\";\n\nconst CRLS$3 = \"crls\";\nconst OTHER_REVOCATION_INFOS = \"otherRevocationInfos\";\nconst CLEAR_PROPS$E = [\n    CRLS$3\n];\nclass RevocationInfoChoices extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crls = pvutils.getParametersValue(parameters, CRLS$3, RevocationInfoChoices.defaultValues(CRLS$3));\n        this.otherRevocationInfos = pvutils.getParametersValue(parameters, OTHER_REVOCATION_INFOS, RevocationInfoChoices.defaultValues(OTHER_REVOCATION_INFOS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CRLS$3:\n                return [];\n            case OTHER_REVOCATION_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Set({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.crls || EMPTY_STRING),\n                    value: new asn1js.Choice({\n                        value: [\n                            CertificateRevocationList.schema(),\n                            new asn1js.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 1\n                                },\n                                value: [\n                                    new asn1js.ObjectIdentifier(),\n                                    new asn1js.Any()\n                                ]\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$E);\n        const asn1 = asn1js.compareSchema(schema, schema, RevocationInfoChoices.schema({\n            names: {\n                crls: CRLS$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.crls) {\n            for (const element of asn1.result.crls) {\n                if (element.idBlock.tagClass === 1)\n                    this.crls.push(new CertificateRevocationList({ schema: element }));\n                else\n                    this.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\n            }\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(...Array.from(this.crls, o => o.toSchema()));\n        outputArray.push(...Array.from(this.otherRevocationInfos, element => {\n            const schema = element.toSchema();\n            schema.idBlock.tagClass = 3;\n            schema.idBlock.tagNumber = 1;\n            return schema;\n        }));\n        return (new asn1js.Set({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        return {\n            crls: Array.from(this.crls, o => o.toJSON()),\n            otherRevocationInfos: Array.from(this.otherRevocationInfos, o => o.toJSON())\n        };\n    }\n}\nRevocationInfoChoices.CLASS_NAME = \"RevocationInfoChoices\";\n\nconst CERTS$3 = \"certs\";\nconst CRLS$2 = \"crls\";\nconst CLEAR_PROPS$D = [\n    CERTS$3,\n    CRLS$2,\n];\nclass OriginatorInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crls = pvutils.getParametersValue(parameters, CRLS$2, OriginatorInfo.defaultValues(CRLS$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTS$3:\n                return new CertificateSet();\n            case CRLS$2:\n                return new RevocationInfoChoices();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERTS$3:\n                return (memberValue.certificates.length === 0);\n            case CRLS$2:\n                return ((memberValue.crls.length === 0) && (memberValue.otherRevocationInfos.length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    name: (names.certs || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: CertificateSet.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    name: (names.crls || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: RevocationInfoChoices.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$D);\n        const asn1 = asn1js.compareSchema(schema, schema, OriginatorInfo.schema({\n            names: {\n                certs: CERTS$3,\n                crls: CRLS$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (CERTS$3 in asn1.result) {\n            this.certs = new CertificateSet({\n                schema: new asn1js.Set({\n                    value: asn1.result.certs.valueBlock.value\n                })\n            });\n        }\n        if (CRLS$2 in asn1.result) {\n            this.crls = new RevocationInfoChoices({\n                schema: new asn1js.Set({\n                    value: asn1.result.crls.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const sequenceValue = [];\n        if (this.certs) {\n            sequenceValue.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.certs.toSchema().valueBlock.value\n            }));\n        }\n        if (this.crls) {\n            sequenceValue.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.crls.toSchema().valueBlock.value\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: sequenceValue\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (this.certs) {\n            res.certs = this.certs.toJSON();\n        }\n        if (this.crls) {\n            res.crls = this.crls.toJSON();\n        }\n        return res;\n    }\n}\nOriginatorInfo.CLASS_NAME = \"OriginatorInfo\";\n\nconst ISSUER = \"issuer\";\nconst SERIAL_NUMBER$2 = \"serialNumber\";\nconst CLEAR_PROPS$C = [\n    ISSUER,\n    SERIAL_NUMBER$2,\n];\nclass IssuerAndSerialNumber extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER, IssuerAndSerialNumber.defaultValues(ISSUER));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$2, IssuerAndSerialNumber.defaultValues(SERIAL_NUMBER$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER:\n                return new RelativeDistinguishedNames();\n            case SERIAL_NUMBER$2:\n                return new asn1js.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                RelativeDistinguishedNames.schema(names.issuer || {}),\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$C);\n        const asn1 = asn1js.compareSchema(schema, schema, IssuerAndSerialNumber.schema({\n            names: {\n                issuer: {\n                    names: {\n                        blockName: ISSUER\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result.issuer });\n        this.serialNumber = asn1.result.serialNumber;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.issuer.toSchema(),\n                this.serialNumber\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            issuer: this.issuer.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n        };\n    }\n}\nIssuerAndSerialNumber.CLASS_NAME = \"IssuerAndSerialNumber\";\n\nconst VARIANT$3 = \"variant\";\nconst VALUE$3 = \"value\";\nconst CLEAR_PROPS$B = [\n    \"blockName\"\n];\nclass RecipientIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils.getParametersValue(parameters, VARIANT$3, RecipientIdentifier.defaultValues(VARIANT$3));\n        if (VALUE$3 in parameters) {\n            this.value = pvutils.getParametersValue(parameters, VALUE$3, RecipientIdentifier.defaultValues(VALUE$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$3:\n                return (-1);\n            case VALUE$3:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$3:\n                return (memberValue === (-1));\n            case VALUE$3:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            value: [\n                IssuerAndSerialNumber.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$B);\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientIdentifier.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            this.variant = 2;\n            this.value = new asn1js.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                if (!(this.value instanceof IssuerAndSerialNumber)) {\n                    throw new Error(\"Incorrect type of RecipientIdentifier.value. It should be IssuerAndSerialNumber.\");\n                }\n                return this.value.toSchema();\n            case 2:\n                if (!(this.value instanceof asn1js.OctetString)) {\n                    throw new Error(\"Incorrect type of RecipientIdentifier.value. It should be ASN.1 OctetString.\");\n                }\n                return new asn1js.Primitive({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    valueHex: this.value.valueBlock.valueHexView\n                });\n            default:\n                return new asn1js.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if ((this.variant === 1 || this.variant === 2) && this.value) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nRecipientIdentifier.CLASS_NAME = \"RecipientIdentifier\";\n\nconst VERSION$c = \"version\";\nconst RID$1 = \"rid\";\nconst KEY_ENCRYPTION_ALGORITHM$3 = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY$3 = \"encryptedKey\";\nconst RECIPIENT_CERTIFICATE$1 = \"recipientCertificate\";\nconst CLEAR_PROPS$A = [\n    VERSION$c,\n    RID$1,\n    KEY_ENCRYPTION_ALGORITHM$3,\n    ENCRYPTED_KEY$3,\n];\nclass KeyTransRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$c, KeyTransRecipientInfo.defaultValues(VERSION$c));\n        this.rid = pvutils.getParametersValue(parameters, RID$1, KeyTransRecipientInfo.defaultValues(RID$1));\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$3, KeyTransRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$3));\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY$3, KeyTransRecipientInfo.defaultValues(ENCRYPTED_KEY$3));\n        this.recipientCertificate = pvutils.getParametersValue(parameters, RECIPIENT_CERTIFICATE$1, KeyTransRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$c:\n                return (-1);\n            case RID$1:\n                return {};\n            case KEY_ENCRYPTION_ALGORITHM$3:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY$3:\n                return new asn1js.OctetString();\n            case RECIPIENT_CERTIFICATE$1:\n                return new Certificate();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$c:\n                return (memberValue === KeyTransRecipientInfo.defaultValues(VERSION$c));\n            case RID$1:\n                return (Object.keys(memberValue).length === 0);\n            case KEY_ENCRYPTION_ALGORITHM$3:\n            case ENCRYPTED_KEY$3:\n                return memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\n            case RECIPIENT_CERTIFICATE$1:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                RecipientIdentifier.schema(names.rid || {}),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$A);\n        const asn1 = asn1js.compareSchema(schema, schema, KeyTransRecipientInfo.schema({\n            names: {\n                version: VERSION$c,\n                rid: {\n                    names: {\n                        blockName: RID$1\n                    }\n                },\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$3\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (asn1.result.rid.idBlock.tagClass === 3) {\n            this.rid = new asn1js.OctetString({ valueHex: asn1.result.rid.valueBlock.valueHex });\n        }\n        else {\n            this.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\n        }\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.rid instanceof IssuerAndSerialNumber) {\n            this.version = 0;\n            outputArray.push(new asn1js.Integer({ value: this.version }));\n            outputArray.push(this.rid.toSchema());\n        }\n        else {\n            this.version = 2;\n            outputArray.push(new asn1js.Integer({ value: this.version }));\n            outputArray.push(new asn1js.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: this.rid.valueBlock.valueHexView\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.encryptedKey);\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            rid: this.rid.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nKeyTransRecipientInfo.CLASS_NAME = \"KeyTransRecipientInfo\";\n\nconst ALGORITHM = \"algorithm\";\nconst PUBLIC_KEY = \"publicKey\";\nconst CLEAR_PROPS$z = [\n    ALGORITHM,\n    PUBLIC_KEY\n];\nclass OriginatorPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.algorithm = pvutils.getParametersValue(parameters, ALGORITHM, OriginatorPublicKey.defaultValues(ALGORITHM));\n        this.publicKey = pvutils.getParametersValue(parameters, PUBLIC_KEY, OriginatorPublicKey.defaultValues(PUBLIC_KEY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM:\n                return new AlgorithmIdentifier();\n            case PUBLIC_KEY:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ALGORITHM:\n            case PUBLIC_KEY:\n                return (memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.algorithm || {}),\n                new asn1js.BitString({ name: (names.publicKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$z);\n        const asn1 = asn1js.compareSchema(schema, schema, OriginatorPublicKey.schema({\n            names: {\n                algorithm: {\n                    names: {\n                        blockName: ALGORITHM\n                    }\n                },\n                publicKey: PUBLIC_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\n        this.publicKey = asn1.result.publicKey;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.algorithm.toSchema(),\n                this.publicKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            algorithm: this.algorithm.toJSON(),\n            publicKey: this.publicKey.toJSON(),\n        };\n    }\n}\nOriginatorPublicKey.CLASS_NAME = \"OriginatorPublicKey\";\n\nconst VARIANT$2 = \"variant\";\nconst VALUE$2 = \"value\";\nconst CLEAR_PROPS$y = [\n    \"blockName\",\n];\nclass OriginatorIdentifierOrKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils.getParametersValue(parameters, VARIANT$2, OriginatorIdentifierOrKey.defaultValues(VARIANT$2));\n        if (VALUE$2 in parameters) {\n            this.value = pvutils.getParametersValue(parameters, VALUE$2, OriginatorIdentifierOrKey.defaultValues(VALUE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$2:\n                return (-1);\n            case VALUE$2:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$2:\n                return (memberValue === (-1));\n            case VALUE$2:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            value: [\n                IssuerAndSerialNumber.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js.Primitive({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    name: (names.blockName || EMPTY_STRING)\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: OriginatorPublicKey.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$y);\n        const asn1 = asn1js.compareSchema(schema, schema, OriginatorIdentifierOrKey.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            if (asn1.result.blockName.idBlock.tagNumber === 0) {\n                asn1.result.blockName.idBlock.tagClass = 1;\n                asn1.result.blockName.idBlock.tagNumber = 4;\n                this.variant = 2;\n                this.value = asn1.result.blockName;\n            }\n            else {\n                this.variant = 3;\n                this.value = new OriginatorPublicKey({\n                    schema: new asn1js.Sequence({\n                        value: asn1.result.blockName.valueBlock.value\n                    })\n                });\n            }\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                return this.value.toSchema();\n            case 2:\n                this.value.idBlock.tagClass = 3;\n                this.value.idBlock.tagNumber = 0;\n                return this.value;\n            case 3:\n                {\n                    const _schema = this.value.toSchema();\n                    _schema.idBlock.tagClass = 3;\n                    _schema.idBlock.tagNumber = 1;\n                    return _schema;\n                }\n            default:\n                return new asn1js.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if ((this.variant === 1) || (this.variant === 2) || (this.variant === 3)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nOriginatorIdentifierOrKey.CLASS_NAME = \"OriginatorIdentifierOrKey\";\n\nconst KEY_ATTR_ID = \"keyAttrId\";\nconst KEY_ATTR = \"keyAttr\";\nconst CLEAR_PROPS$x = [\n    KEY_ATTR_ID,\n    KEY_ATTR,\n];\nclass OtherKeyAttribute extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyAttrId = pvutils.getParametersValue(parameters, KEY_ATTR_ID, OtherKeyAttribute.defaultValues(KEY_ATTR_ID));\n        if (KEY_ATTR in parameters) {\n            this.keyAttr = pvutils.getParametersValue(parameters, KEY_ATTR, OtherKeyAttribute.defaultValues(KEY_ATTR));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_ATTR_ID:\n                return EMPTY_STRING;\n            case KEY_ATTR:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_ATTR_ID:\n                return (typeof memberValue === \"string\" && memberValue === EMPTY_STRING);\n            case KEY_ATTR:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            optional: (names.optional || true),\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.keyAttrId || EMPTY_STRING) }),\n                new asn1js.Any({\n                    optional: true,\n                    name: (names.keyAttr || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$x);\n        const asn1 = asn1js.compareSchema(schema, schema, OtherKeyAttribute.schema({\n            names: {\n                keyAttrId: KEY_ATTR_ID,\n                keyAttr: KEY_ATTR\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\n        if (KEY_ATTR in asn1.result) {\n            this.keyAttr = asn1.result.keyAttr;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.keyAttrId }));\n        if (KEY_ATTR in this) {\n            outputArray.push(this.keyAttr);\n        }\n        return (new asn1js.Sequence({\n            value: outputArray,\n        }));\n    }\n    toJSON() {\n        const res = {\n            keyAttrId: this.keyAttrId\n        };\n        if (KEY_ATTR in this) {\n            res.keyAttr = this.keyAttr.toJSON();\n        }\n        return res;\n    }\n}\nOtherKeyAttribute.CLASS_NAME = \"OtherKeyAttribute\";\n\nconst SUBJECT_KEY_IDENTIFIER = \"subjectKeyIdentifier\";\nconst DATE$1 = \"date\";\nconst OTHER$1 = \"other\";\nconst CLEAR_PROPS$w = [\n    SUBJECT_KEY_IDENTIFIER,\n    DATE$1,\n    OTHER$1,\n];\nclass RecipientKeyIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.subjectKeyIdentifier = pvutils.getParametersValue(parameters, SUBJECT_KEY_IDENTIFIER, RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER));\n        if (DATE$1 in parameters) {\n            this.date = pvutils.getParametersValue(parameters, DATE$1, RecipientKeyIdentifier.defaultValues(DATE$1));\n        }\n        if (OTHER$1 in parameters) {\n            this.other = pvutils.getParametersValue(parameters, OTHER$1, RecipientKeyIdentifier.defaultValues(OTHER$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SUBJECT_KEY_IDENTIFIER:\n                return new asn1js.OctetString();\n            case DATE$1:\n                return new asn1js.GeneralizedTime();\n            case OTHER$1:\n                return new OtherKeyAttribute();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SUBJECT_KEY_IDENTIFIER:\n                return (memberValue.isEqual(RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER)));\n            case DATE$1:\n                return ((memberValue.year === 0) &&\n                    (memberValue.month === 0) &&\n                    (memberValue.day === 0) &&\n                    (memberValue.hour === 0) &&\n                    (memberValue.minute === 0) &&\n                    (memberValue.second === 0) &&\n                    (memberValue.millisecond === 0));\n            case OTHER$1:\n                return ((memberValue.keyAttrId === EMPTY_STRING) && ((\"keyAttr\" in memberValue) === false));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.OctetString({ name: (names.subjectKeyIdentifier || EMPTY_STRING) }),\n                new asn1js.GeneralizedTime({\n                    optional: true,\n                    name: (names.date || EMPTY_STRING)\n                }),\n                OtherKeyAttribute.schema(names.other || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$w);\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientKeyIdentifier.schema({\n            names: {\n                subjectKeyIdentifier: SUBJECT_KEY_IDENTIFIER,\n                date: DATE$1,\n                other: {\n                    names: {\n                        blockName: OTHER$1\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;\n        if (DATE$1 in asn1.result)\n            this.date = asn1.result.date;\n        if (OTHER$1 in asn1.result)\n            this.other = new OtherKeyAttribute({ schema: asn1.result.other });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.subjectKeyIdentifier);\n        if (this.date) {\n            outputArray.push(this.date);\n        }\n        if (this.other) {\n            outputArray.push(this.other.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            subjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()\n        };\n        if (this.date) {\n            res.date = this.date.toJSON();\n        }\n        if (this.other) {\n            res.other = this.other.toJSON();\n        }\n        return res;\n    }\n}\nRecipientKeyIdentifier.CLASS_NAME = \"RecipientKeyIdentifier\";\n\nconst VARIANT$1 = \"variant\";\nconst VALUE$1 = \"value\";\nconst CLEAR_PROPS$v = [\n    \"blockName\",\n];\nclass KeyAgreeRecipientIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils.getParametersValue(parameters, VARIANT$1, KeyAgreeRecipientIdentifier.defaultValues(VARIANT$1));\n        this.value = pvutils.getParametersValue(parameters, VALUE$1, KeyAgreeRecipientIdentifier.defaultValues(VALUE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$1:\n                return (-1);\n            case VALUE$1:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$1:\n                return (memberValue === (-1));\n            case VALUE$1:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            value: [\n                IssuerAndSerialNumber.schema(names.issuerAndSerialNumber || {\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: RecipientKeyIdentifier.schema(names.rKeyId || {\n                        names: {\n                            blockName: (names.blockName || EMPTY_STRING)\n                        }\n                    }).valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$v);\n        const asn1 = asn1js.compareSchema(schema, schema, KeyAgreeRecipientIdentifier.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            this.variant = 2;\n            this.value = new RecipientKeyIdentifier({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.blockName.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                return this.value.toSchema();\n            case 2:\n                return new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: this.value.toSchema().valueBlock.value\n                });\n            default:\n                return new asn1js.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant,\n        };\n        if ((this.variant === 1) || (this.variant === 2)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nKeyAgreeRecipientIdentifier.CLASS_NAME = \"KeyAgreeRecipientIdentifier\";\n\nconst RID = \"rid\";\nconst ENCRYPTED_KEY$2 = \"encryptedKey\";\nconst CLEAR_PROPS$u = [\n    RID,\n    ENCRYPTED_KEY$2,\n];\nclass RecipientEncryptedKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.rid = pvutils.getParametersValue(parameters, RID, RecipientEncryptedKey.defaultValues(RID));\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY$2, RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RID:\n                return new KeyAgreeRecipientIdentifier();\n            case ENCRYPTED_KEY$2:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RID:\n                return ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\n            case ENCRYPTED_KEY$2:\n                return (memberValue.isEqual(RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                KeyAgreeRecipientIdentifier.schema(names.rid || {}),\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$u);\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientEncryptedKey.schema({\n            names: {\n                rid: {\n                    names: {\n                        blockName: RID\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.rid = new KeyAgreeRecipientIdentifier({ schema: asn1.result.rid });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.rid.toSchema(),\n                this.encryptedKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            rid: this.rid.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nRecipientEncryptedKey.CLASS_NAME = \"RecipientEncryptedKey\";\n\nconst ENCRYPTED_KEYS = \"encryptedKeys\";\nconst RECIPIENT_ENCRYPTED_KEYS = \"RecipientEncryptedKeys\";\nconst CLEAR_PROPS$t = [\n    RECIPIENT_ENCRYPTED_KEYS,\n];\nclass RecipientEncryptedKeys extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.encryptedKeys = pvutils.getParametersValue(parameters, ENCRYPTED_KEYS, RecipientEncryptedKeys.defaultValues(ENCRYPTED_KEYS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ENCRYPTED_KEYS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ENCRYPTED_KEYS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.RecipientEncryptedKeys || EMPTY_STRING),\n                    value: RecipientEncryptedKey.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$t);\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientEncryptedKeys.schema({\n            names: {\n                RecipientEncryptedKeys: RECIPIENT_ENCRYPTED_KEYS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.encryptedKeys = Array.from(asn1.result.RecipientEncryptedKeys, element => new RecipientEncryptedKey({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.encryptedKeys, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            encryptedKeys: Array.from(this.encryptedKeys, o => o.toJSON())\n        };\n    }\n}\nRecipientEncryptedKeys.CLASS_NAME = \"RecipientEncryptedKeys\";\n\nconst VERSION$b = \"version\";\nconst ORIGINATOR = \"originator\";\nconst UKM = \"ukm\";\nconst KEY_ENCRYPTION_ALGORITHM$2 = \"keyEncryptionAlgorithm\";\nconst RECIPIENT_ENCRYPTED_KEY = \"recipientEncryptedKeys\";\nconst RECIPIENT_CERTIFICATE = \"recipientCertificate\";\nconst RECIPIENT_PUBLIC_KEY = \"recipientPublicKey\";\nconst CLEAR_PROPS$s = [\n    VERSION$b,\n    ORIGINATOR,\n    UKM,\n    KEY_ENCRYPTION_ALGORITHM$2,\n    RECIPIENT_ENCRYPTED_KEY,\n];\nclass KeyAgreeRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$b, KeyAgreeRecipientInfo.defaultValues(VERSION$b));\n        this.originator = pvutils.getParametersValue(parameters, ORIGINATOR, KeyAgreeRecipientInfo.defaultValues(ORIGINATOR));\n        if (UKM in parameters) {\n            this.ukm = pvutils.getParametersValue(parameters, UKM, KeyAgreeRecipientInfo.defaultValues(UKM));\n        }\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$2, KeyAgreeRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$2));\n        this.recipientEncryptedKeys = pvutils.getParametersValue(parameters, RECIPIENT_ENCRYPTED_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_ENCRYPTED_KEY));\n        this.recipientCertificate = pvutils.getParametersValue(parameters, RECIPIENT_CERTIFICATE, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE));\n        this.recipientPublicKey = pvutils.getParametersValue(parameters, RECIPIENT_PUBLIC_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_PUBLIC_KEY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$b:\n                return 0;\n            case ORIGINATOR:\n                return new OriginatorIdentifierOrKey();\n            case UKM:\n                return new asn1js.OctetString();\n            case KEY_ENCRYPTION_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case RECIPIENT_ENCRYPTED_KEY:\n                return new RecipientEncryptedKeys();\n            case RECIPIENT_CERTIFICATE:\n                return new Certificate();\n            case RECIPIENT_PUBLIC_KEY:\n                return null;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$b:\n                return (memberValue === 0);\n            case ORIGINATOR:\n                return ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\n            case UKM:\n                return (memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(UKM)));\n            case KEY_ENCRYPTION_ALGORITHM$2:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case RECIPIENT_ENCRYPTED_KEY:\n                return (memberValue.encryptedKeys.length === 0);\n            case RECIPIENT_CERTIFICATE:\n                return false;\n            case RECIPIENT_PUBLIC_KEY:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: names.blockName || EMPTY_STRING,\n            value: [\n                new asn1js.Integer({ name: names.version || EMPTY_STRING }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        OriginatorIdentifierOrKey.schema(names.originator || {})\n                    ]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js.OctetString({ name: names.ukm || EMPTY_STRING })]\n                }),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                RecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$s);\n        const asn1 = asn1js.compareSchema(schema, schema, KeyAgreeRecipientInfo.schema({\n            names: {\n                version: VERSION$b,\n                originator: {\n                    names: {\n                        blockName: ORIGINATOR\n                    }\n                },\n                ukm: UKM,\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$2\n                    }\n                },\n                recipientEncryptedKeys: {\n                    names: {\n                        blockName: RECIPIENT_ENCRYPTED_KEY\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.originator = new OriginatorIdentifierOrKey({ schema: asn1.result.originator });\n        if (UKM in asn1.result)\n            this.ukm = asn1.result.ukm;\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.recipientEncryptedKeys = new RecipientEncryptedKeys({ schema: asn1.result.recipientEncryptedKeys });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(new asn1js.Constructed({\n            idBlock: {\n                tagClass: 3,\n                tagNumber: 0\n            },\n            value: [this.originator.toSchema()]\n        }));\n        if (this.ukm) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.ukm]\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.recipientEncryptedKeys.toSchema());\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            originator: this.originator.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            recipientEncryptedKeys: this.recipientEncryptedKeys.toJSON(),\n        };\n        if (this.ukm) {\n            res.ukm = this.ukm.toJSON();\n        }\n        return res;\n    }\n}\nKeyAgreeRecipientInfo.CLASS_NAME = \"KeyAgreeRecipientInfo\";\n\nconst KEY_IDENTIFIER = \"keyIdentifier\";\nconst DATE = \"date\";\nconst OTHER = \"other\";\nconst CLEAR_PROPS$r = [\n    KEY_IDENTIFIER,\n    DATE,\n    OTHER,\n];\nclass KEKIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyIdentifier = pvutils.getParametersValue(parameters, KEY_IDENTIFIER, KEKIdentifier.defaultValues(KEY_IDENTIFIER));\n        if (DATE in parameters) {\n            this.date = pvutils.getParametersValue(parameters, DATE, KEKIdentifier.defaultValues(DATE));\n        }\n        if (OTHER in parameters) {\n            this.other = pvutils.getParametersValue(parameters, OTHER, KEKIdentifier.defaultValues(OTHER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_IDENTIFIER:\n                return new asn1js.OctetString();\n            case DATE:\n                return new asn1js.GeneralizedTime();\n            case OTHER:\n                return new OtherKeyAttribute();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_IDENTIFIER:\n                return (memberValue.isEqual(KEKIdentifier.defaultValues(KEY_IDENTIFIER)));\n            case DATE:\n                return ((memberValue.year === 0) &&\n                    (memberValue.month === 0) &&\n                    (memberValue.day === 0) &&\n                    (memberValue.hour === 0) &&\n                    (memberValue.minute === 0) &&\n                    (memberValue.second === 0) &&\n                    (memberValue.millisecond === 0));\n            case OTHER:\n                return ((memberValue.compareWithDefault(\"keyAttrId\", memberValue.keyAttrId)) &&\n                    ((\"keyAttr\" in memberValue) === false));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.OctetString({ name: (names.keyIdentifier || EMPTY_STRING) }),\n                new asn1js.GeneralizedTime({\n                    optional: true,\n                    name: (names.date || EMPTY_STRING)\n                }),\n                OtherKeyAttribute.schema(names.other || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$r);\n        const asn1 = asn1js.compareSchema(schema, schema, KEKIdentifier.schema({\n            names: {\n                keyIdentifier: KEY_IDENTIFIER,\n                date: DATE,\n                other: {\n                    names: {\n                        blockName: OTHER\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyIdentifier = asn1.result.keyIdentifier;\n        if (DATE in asn1.result)\n            this.date = asn1.result.date;\n        if (OTHER in asn1.result)\n            this.other = new OtherKeyAttribute({ schema: asn1.result.other });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.keyIdentifier);\n        if (this.date) {\n            outputArray.push(this.date);\n        }\n        if (this.other) {\n            outputArray.push(this.other.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            keyIdentifier: this.keyIdentifier.toJSON()\n        };\n        if (this.date) {\n            res.date = this.date;\n        }\n        if (this.other) {\n            res.other = this.other.toJSON();\n        }\n        return res;\n    }\n}\nKEKIdentifier.CLASS_NAME = \"KEKIdentifier\";\n\nconst VERSION$a = \"version\";\nconst KEK_ID = \"kekid\";\nconst KEY_ENCRYPTION_ALGORITHM$1 = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY$1 = \"encryptedKey\";\nconst PER_DEFINED_KEK = \"preDefinedKEK\";\nconst CLEAR_PROPS$q = [\n    VERSION$a,\n    KEK_ID,\n    KEY_ENCRYPTION_ALGORITHM$1,\n    ENCRYPTED_KEY$1,\n];\nclass KEKRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$a, KEKRecipientInfo.defaultValues(VERSION$a));\n        this.kekid = pvutils.getParametersValue(parameters, KEK_ID, KEKRecipientInfo.defaultValues(KEK_ID));\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$1, KEKRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$1));\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY$1, KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1));\n        this.preDefinedKEK = pvutils.getParametersValue(parameters, PER_DEFINED_KEK, KEKRecipientInfo.defaultValues(PER_DEFINED_KEK));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$a:\n                return 0;\n            case KEK_ID:\n                return new KEKIdentifier();\n            case KEY_ENCRYPTION_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY$1:\n                return new asn1js.OctetString();\n            case PER_DEFINED_KEK:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case \"KEKRecipientInfo\":\n                return (memberValue === KEKRecipientInfo.defaultValues(VERSION$a));\n            case KEK_ID:\n                return ((memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier)) &&\n                    ((\"date\" in memberValue) === false) &&\n                    ((\"other\" in memberValue) === false));\n            case KEY_ENCRYPTION_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_KEY$1:\n                return (memberValue.isEqual(KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1)));\n            case PER_DEFINED_KEK:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                KEKIdentifier.schema(names.kekid || {}),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$q);\n        const asn1 = asn1js.compareSchema(schema, schema, KEKRecipientInfo.schema({\n            names: {\n                version: VERSION$a,\n                kekid: {\n                    names: {\n                        blockName: KEK_ID\n                    }\n                },\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$1\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.kekid = new KEKIdentifier({ schema: asn1.result.kekid });\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.Integer({ value: this.version }),\n                this.kekid.toSchema(),\n                this.keyEncryptionAlgorithm.toSchema(),\n                this.encryptedKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            kekid: this.kekid.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nKEKRecipientInfo.CLASS_NAME = \"KEKRecipientInfo\";\n\nconst VERSION$9 = \"version\";\nconst KEY_DERIVATION_ALGORITHM = \"keyDerivationAlgorithm\";\nconst KEY_ENCRYPTION_ALGORITHM = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY = \"encryptedKey\";\nconst PASSWORD = \"password\";\nconst CLEAR_PROPS$p = [\n    VERSION$9,\n    KEY_DERIVATION_ALGORITHM,\n    KEY_ENCRYPTION_ALGORITHM,\n    ENCRYPTED_KEY\n];\nclass PasswordRecipientinfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$9, PasswordRecipientinfo.defaultValues(VERSION$9));\n        if (KEY_DERIVATION_ALGORITHM in parameters) {\n            this.keyDerivationAlgorithm = pvutils.getParametersValue(parameters, KEY_DERIVATION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_DERIVATION_ALGORITHM));\n        }\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_ENCRYPTION_ALGORITHM));\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY, PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY));\n        this.password = pvutils.getParametersValue(parameters, PASSWORD, PasswordRecipientinfo.defaultValues(PASSWORD));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$9:\n                return (-1);\n            case KEY_DERIVATION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case KEY_ENCRYPTION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY:\n                return new asn1js.OctetString();\n            case PASSWORD:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$9:\n                return (memberValue === (-1));\n            case KEY_DERIVATION_ALGORITHM:\n            case KEY_ENCRYPTION_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_KEY:\n                return (memberValue.isEqual(PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY)));\n            case PASSWORD:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    name: (names.keyDerivationAlgorithm || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: AlgorithmIdentifier.schema().valueBlock.value\n                }),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$p);\n        const asn1 = asn1js.compareSchema(schema, schema, PasswordRecipientinfo.schema({\n            names: {\n                version: VERSION$9,\n                keyDerivationAlgorithm: KEY_DERIVATION_ALGORITHM,\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (KEY_DERIVATION_ALGORITHM in asn1.result) {\n            this.keyDerivationAlgorithm = new AlgorithmIdentifier({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.keyDerivationAlgorithm.valueBlock.value\n                })\n            });\n        }\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        if (this.keyDerivationAlgorithm) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.keyDerivationAlgorithm.toSchema().valueBlock.value\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.encryptedKey);\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n        if (this.keyDerivationAlgorithm) {\n            res.keyDerivationAlgorithm = this.keyDerivationAlgorithm.toJSON();\n        }\n        return res;\n    }\n}\nPasswordRecipientinfo.CLASS_NAME = \"PasswordRecipientInfo\";\n\nconst ORI_TYPE = \"oriType\";\nconst ORI_VALUE = \"oriValue\";\nconst CLEAR_PROPS$o = [\n    ORI_TYPE,\n    ORI_VALUE\n];\nclass OtherRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.oriType = pvutils.getParametersValue(parameters, ORI_TYPE, OtherRecipientInfo.defaultValues(ORI_TYPE));\n        this.oriValue = pvutils.getParametersValue(parameters, ORI_VALUE, OtherRecipientInfo.defaultValues(ORI_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ORI_TYPE:\n                return EMPTY_STRING;\n            case ORI_VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ORI_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case ORI_VALUE:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.oriType || EMPTY_STRING) }),\n                new asn1js.Any({ name: (names.oriValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$o);\n        const asn1 = asn1js.compareSchema(schema, schema, OtherRecipientInfo.schema({\n            names: {\n                oriType: ORI_TYPE,\n                oriValue: ORI_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.oriType = asn1.result.oriType.valueBlock.toString();\n        this.oriValue = asn1.result.oriValue;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.oriType }),\n                this.oriValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            oriType: this.oriType\n        };\n        if (!OtherRecipientInfo.compareWithDefault(ORI_VALUE, this.oriValue)) {\n            res.oriValue = this.oriValue.toJSON();\n        }\n        return res;\n    }\n}\nOtherRecipientInfo.CLASS_NAME = \"OtherRecipientInfo\";\n\nconst VARIANT = \"variant\";\nconst VALUE = \"value\";\nconst CLEAR_PROPS$n = [\n    \"blockName\"\n];\nclass RecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils.getParametersValue(parameters, VARIANT, RecipientInfo.defaultValues(VARIANT));\n        if (VALUE in parameters) {\n            this.value = pvutils.getParametersValue(parameters, VALUE, RecipientInfo.defaultValues(VALUE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT:\n                return (-1);\n            case VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT:\n                return (memberValue === RecipientInfo.defaultValues(memberName));\n            case VALUE:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Choice({\n            value: [\n                KeyTransRecipientInfo.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: KeyAgreeRecipientInfo.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: KEKRecipientInfo.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    value: PasswordRecipientinfo.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    value: OtherRecipientInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$n);\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientInfo.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new KeyTransRecipientInfo({ schema: asn1.result.blockName });\n        }\n        else {\n            const blockSequence = new asn1js.Sequence({\n                value: asn1.result.blockName.valueBlock.value\n            });\n            switch (asn1.result.blockName.idBlock.tagNumber) {\n                case 1:\n                    this.variant = 2;\n                    this.value = new KeyAgreeRecipientInfo({ schema: blockSequence });\n                    break;\n                case 2:\n                    this.variant = 3;\n                    this.value = new KEKRecipientInfo({ schema: blockSequence });\n                    break;\n                case 3:\n                    this.variant = 4;\n                    this.value = new PasswordRecipientinfo({ schema: blockSequence });\n                    break;\n                case 4:\n                    this.variant = 5;\n                    this.value = new OtherRecipientInfo({ schema: blockSequence });\n                    break;\n                default:\n                    throw new Error(\"Incorrect structure of RecipientInfo block\");\n            }\n        }\n    }\n    toSchema() {\n        ParameterError.assertEmpty(this.value, \"value\", \"RecipientInfo\");\n        const _schema = this.value.toSchema();\n        switch (this.variant) {\n            case 1:\n                return _schema;\n            case 2:\n            case 3:\n            case 4:\n                _schema.idBlock.tagClass = 3;\n                _schema.idBlock.tagNumber = (this.variant - 1);\n                return _schema;\n            default:\n                return new asn1js.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if (this.value && (this.variant >= 1) && (this.variant <= 4)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nRecipientInfo.CLASS_NAME = \"RecipientInfo\";\n\nconst HASH_ALGORITHM$2 = \"hashAlgorithm\";\nconst MASK_GEN_ALGORITHM = \"maskGenAlgorithm\";\nconst P_SOURCE_ALGORITHM = \"pSourceAlgorithm\";\nconst CLEAR_PROPS$m = [\n    HASH_ALGORITHM$2,\n    MASK_GEN_ALGORITHM,\n    P_SOURCE_ALGORITHM\n];\nclass RSAESOAEPParams extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$2, RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2));\n        this.maskGenAlgorithm = pvutils.getParametersValue(parameters, MASK_GEN_ALGORITHM, RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM));\n        this.pSourceAlgorithm = pvutils.getParametersValue(parameters, P_SOURCE_ALGORITHM, RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$2:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js.Null()\n                });\n            case MASK_GEN_ALGORITHM:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.8\",\n                    algorithmParams: (new AlgorithmIdentifier({\n                        algorithmId: \"1.3.14.3.2.26\",\n                        algorithmParams: new asn1js.Null()\n                    })).toSchema()\n                });\n            case P_SOURCE_ALGORITHM:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.9\",\n                    algorithmParams: new asn1js.OctetString({ valueHex: (new Uint8Array([0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09])).buffer })\n                });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\n                }),\n                new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.pSourceAlgorithm || {})]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$m);\n        const asn1 = asn1js.compareSchema(schema, schema, RSAESOAEPParams.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM$2\n                    }\n                },\n                maskGenAlgorithm: {\n                    names: {\n                        blockName: MASK_GEN_ALGORITHM\n                    }\n                },\n                pSourceAlgorithm: {\n                    names: {\n                        blockName: P_SOURCE_ALGORITHM\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (HASH_ALGORITHM$2 in asn1.result)\n            this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        if (MASK_GEN_ALGORITHM in asn1.result)\n            this.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\n        if (P_SOURCE_ALGORITHM in asn1.result)\n            this.pSourceAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.pSourceAlgorithm });\n    }\n    toSchema() {\n        const outputArray = [];\n        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.hashAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.maskGenAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: [this.pSourceAlgorithm.toSchema()]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {\n            res.hashAlgorithm = this.hashAlgorithm.toJSON();\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {\n            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\n        }\n        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {\n            res.pSourceAlgorithm = this.pSourceAlgorithm.toJSON();\n        }\n        return res;\n    }\n}\nRSAESOAEPParams.CLASS_NAME = \"RSAESOAEPParams\";\n\nconst KEY_INFO = \"keyInfo\";\nconst ENTITY_U_INFO = \"entityUInfo\";\nconst SUPP_PUB_INFO = \"suppPubInfo\";\nconst CLEAR_PROPS$l = [\n    KEY_INFO,\n    ENTITY_U_INFO,\n    SUPP_PUB_INFO\n];\nclass ECCCMSSharedInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyInfo = pvutils.getParametersValue(parameters, KEY_INFO, ECCCMSSharedInfo.defaultValues(KEY_INFO));\n        if (ENTITY_U_INFO in parameters) {\n            this.entityUInfo = pvutils.getParametersValue(parameters, ENTITY_U_INFO, ECCCMSSharedInfo.defaultValues(ENTITY_U_INFO));\n        }\n        this.suppPubInfo = pvutils.getParametersValue(parameters, SUPP_PUB_INFO, ECCCMSSharedInfo.defaultValues(SUPP_PUB_INFO));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_INFO:\n                return new AlgorithmIdentifier();\n            case ENTITY_U_INFO:\n                return new asn1js.OctetString();\n            case SUPP_PUB_INFO:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_INFO:\n            case ENTITY_U_INFO:\n            case SUPP_PUB_INFO:\n                return (memberValue.isEqual(ECCCMSSharedInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.keyInfo || {}),\n                new asn1js.Constructed({\n                    name: (names.entityUInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [new asn1js.OctetString()]\n                }),\n                new asn1js.Constructed({\n                    name: (names.suppPubInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [new asn1js.OctetString()]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$l);\n        const asn1 = asn1js.compareSchema(schema, schema, ECCCMSSharedInfo.schema({\n            names: {\n                keyInfo: {\n                    names: {\n                        blockName: KEY_INFO\n                    }\n                },\n                entityUInfo: ENTITY_U_INFO,\n                suppPubInfo: SUPP_PUB_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyInfo = new AlgorithmIdentifier({ schema: asn1.result.keyInfo });\n        if (ENTITY_U_INFO in asn1.result)\n            this.entityUInfo = asn1.result.entityUInfo.valueBlock.value[0];\n        this.suppPubInfo = asn1.result.suppPubInfo.valueBlock.value[0];\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.keyInfo.toSchema());\n        if (this.entityUInfo) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.entityUInfo]\n            }));\n        }\n        outputArray.push(new asn1js.Constructed({\n            idBlock: {\n                tagClass: 3,\n                tagNumber: 2\n            },\n            value: [this.suppPubInfo]\n        }));\n        return new asn1js.Sequence({\n            value: outputArray\n        });\n    }\n    toJSON() {\n        const res = {\n            keyInfo: this.keyInfo.toJSON(),\n            suppPubInfo: this.suppPubInfo.toJSON(),\n        };\n        if (this.entityUInfo) {\n            res.entityUInfo = this.entityUInfo.toJSON();\n        }\n        return res;\n    }\n}\nECCCMSSharedInfo.CLASS_NAME = \"ECCCMSSharedInfo\";\n\nconst VERSION$8 = \"version\";\nconst ORIGINATOR_INFO = \"originatorInfo\";\nconst RECIPIENT_INFOS = \"recipientInfos\";\nconst ENCRYPTED_CONTENT_INFO = \"encryptedContentInfo\";\nconst UNPROTECTED_ATTRS = \"unprotectedAttrs\";\nconst CLEAR_PROPS$k = [\n    VERSION$8,\n    ORIGINATOR_INFO,\n    RECIPIENT_INFOS,\n    ENCRYPTED_CONTENT_INFO,\n    UNPROTECTED_ATTRS\n];\nconst defaultEncryptionParams = {\n    kdfAlgorithm: \"SHA-512\",\n    kekEncryptionLength: 256\n};\nconst curveLengthByName = {\n    \"P-256\": 256,\n    \"P-384\": 384,\n    \"P-521\": 528\n};\nclass EnvelopedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$8, EnvelopedData.defaultValues(VERSION$8));\n        if (ORIGINATOR_INFO in parameters) {\n            this.originatorInfo = pvutils.getParametersValue(parameters, ORIGINATOR_INFO, EnvelopedData.defaultValues(ORIGINATOR_INFO));\n        }\n        this.recipientInfos = pvutils.getParametersValue(parameters, RECIPIENT_INFOS, EnvelopedData.defaultValues(RECIPIENT_INFOS));\n        this.encryptedContentInfo = pvutils.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO, EnvelopedData.defaultValues(ENCRYPTED_CONTENT_INFO));\n        if (UNPROTECTED_ATTRS in parameters) {\n            this.unprotectedAttrs = pvutils.getParametersValue(parameters, UNPROTECTED_ATTRS, EnvelopedData.defaultValues(UNPROTECTED_ATTRS));\n        }\n        this.policy = {\n            disableSplit: !!parameters.disableSplit,\n        };\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$8:\n                return 0;\n            case ORIGINATOR_INFO:\n                return new OriginatorInfo();\n            case RECIPIENT_INFOS:\n                return [];\n            case ENCRYPTED_CONTENT_INFO:\n                return new EncryptedContentInfo();\n            case UNPROTECTED_ATTRS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$8:\n                return (memberValue === EnvelopedData.defaultValues(memberName));\n            case ORIGINATOR_INFO:\n                return ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\n            case RECIPIENT_INFOS:\n            case UNPROTECTED_ATTRS:\n                return (memberValue.length === 0);\n            case ENCRYPTED_CONTENT_INFO:\n                return ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\n                        (EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    name: (names.originatorInfo || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: OriginatorInfo.schema().valueBlock.value\n                }),\n                new asn1js.Set({\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.recipientInfos || EMPTY_STRING),\n                            value: RecipientInfo.schema()\n                        })\n                    ]\n                }),\n                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.unprotectedAttrs || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$k);\n        const asn1 = asn1js.compareSchema(schema, schema, EnvelopedData.schema({\n            names: {\n                version: VERSION$8,\n                originatorInfo: ORIGINATOR_INFO,\n                recipientInfos: RECIPIENT_INFOS,\n                encryptedContentInfo: {\n                    names: {\n                        blockName: ENCRYPTED_CONTENT_INFO\n                    }\n                },\n                unprotectedAttrs: UNPROTECTED_ATTRS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (ORIGINATOR_INFO in asn1.result) {\n            this.originatorInfo = new OriginatorInfo({\n                schema: new asn1js.Sequence({\n                    value: asn1.result.originatorInfo.valueBlock.value\n                })\n            });\n        }\n        this.recipientInfos = Array.from(asn1.result.recipientInfos, o => new RecipientInfo({ schema: o }));\n        this.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\n        if (UNPROTECTED_ATTRS in asn1.result)\n            this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, o => new Attribute({ schema: o }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        if (this.originatorInfo) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.originatorInfo.toSchema().valueBlock.value\n            }));\n        }\n        outputArray.push(new asn1js.Set({\n            value: Array.from(this.recipientInfos, o => o.toSchema())\n        }));\n        outputArray.push(this.encryptedContentInfo.toSchema());\n        if (this.unprotectedAttrs) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.unprotectedAttrs, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            recipientInfos: Array.from(this.recipientInfos, o => o.toJSON()),\n            encryptedContentInfo: this.encryptedContentInfo.toJSON(),\n        };\n        if (this.originatorInfo)\n            res.originatorInfo = this.originatorInfo.toJSON();\n        if (this.unprotectedAttrs)\n            res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());\n        return res;\n    }\n    addRecipientByCertificate(certificate, parameters, variant, crypto = getCrypto(true)) {\n        const encryptionParameters = Object.assign({ useOAEP: true, oaepHashAlgorithm: \"SHA-512\" }, defaultEncryptionParams, parameters || {});\n        if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\n            variant = 1;\n        else {\n            if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\n                variant = 2;\n            else\n                throw new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\n        }\n        switch (variant) {\n            case 1:\n                {\n                    let algorithmId;\n                    let algorithmParams;\n                    if (encryptionParameters.useOAEP === true) {\n                        algorithmId = crypto.getOIDByAlgorithm({\n                            name: \"RSA-OAEP\"\n                        }, true, \"keyEncryptionAlgorithm\");\n                        const hashOID = crypto.getOIDByAlgorithm({\n                            name: encryptionParameters.oaepHashAlgorithm\n                        }, true, \"RSAES-OAEP-params\");\n                        const hashAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: hashOID,\n                            algorithmParams: new asn1js.Null()\n                        });\n                        const rsaOAEPParams = new RSAESOAEPParams({\n                            hashAlgorithm,\n                            maskGenAlgorithm: new AlgorithmIdentifier({\n                                algorithmId: \"1.2.840.113549.1.1.8\",\n                                algorithmParams: hashAlgorithm.toSchema()\n                            })\n                        });\n                        algorithmParams = rsaOAEPParams.toSchema();\n                    }\n                    else {\n                        algorithmId = crypto.getOIDByAlgorithm({\n                            name: \"RSAES-PKCS1-v1_5\"\n                        });\n                        if (algorithmId === EMPTY_STRING)\n                            throw new Error(\"Can not find OID for RSAES-PKCS1-v1_5\");\n                        algorithmParams = new asn1js.Null();\n                    }\n                    const keyInfo = new KeyTransRecipientInfo({\n                        version: 0,\n                        rid: new IssuerAndSerialNumber({\n                            issuer: certificate.issuer,\n                            serialNumber: certificate.serialNumber\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId,\n                            algorithmParams\n                        }),\n                        recipientCertificate: certificate,\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 1,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            case 2:\n                {\n                    const recipientIdentifier = new KeyAgreeRecipientIdentifier({\n                        variant: 1,\n                        value: new IssuerAndSerialNumber({\n                            issuer: certificate.issuer,\n                            serialNumber: certificate.serialNumber\n                        })\n                    });\n                    this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, { recipientCertificate: certificate }, crypto);\n                }\n                break;\n            default:\n                throw new Error(`Unknown \"variant\" value: ${variant}`);\n        }\n        return true;\n    }\n    addRecipientByPreDefinedData(preDefinedData, parameters = {}, variant, crypto = getCrypto(true)) {\n        ArgumentError.assert(preDefinedData, \"preDefinedData\", \"ArrayBuffer\");\n        if (!preDefinedData.byteLength) {\n            throw new Error(\"Pre-defined data could have zero length\");\n        }\n        if (!parameters.keyIdentifier) {\n            const keyIdentifierBuffer = new ArrayBuffer(16);\n            const keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\n            crypto.getRandomValues(keyIdentifierView);\n            parameters.keyIdentifier = keyIdentifierBuffer;\n        }\n        if (!parameters.hmacHashAlgorithm)\n            parameters.hmacHashAlgorithm = \"SHA-512\";\n        if (parameters.iterationCount === undefined) {\n            parameters.iterationCount = 2048;\n        }\n        if (!parameters.keyEncryptionAlgorithm) {\n            parameters.keyEncryptionAlgorithm = {\n                name: \"AES-KW\",\n                length: 256\n            };\n        }\n        if (!parameters.keyEncryptionAlgorithmParams)\n            parameters.keyEncryptionAlgorithmParams = new asn1js.Null();\n        switch (variant) {\n            case 1:\n                {\n                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, \"keyEncryptionAlgorithm\");\n                    const keyInfo = new KEKRecipientInfo({\n                        version: 4,\n                        kekid: new KEKIdentifier({\n                            keyIdentifier: new asn1js.OctetString({ valueHex: parameters.keyIdentifier })\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: kekOID,\n                            algorithmParams: parameters.keyEncryptionAlgorithmParams\n                        }),\n                        preDefinedKEK: preDefinedData\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 3,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            case 2:\n                {\n                    const pbkdf2OID = crypto.getOIDByAlgorithm({ name: \"PBKDF2\" }, true, \"keyDerivationAlgorithm\");\n                    const saltBuffer = new ArrayBuffer(64);\n                    const saltView = new Uint8Array(saltBuffer);\n                    crypto.getRandomValues(saltView);\n                    const hmacOID = crypto.getOIDByAlgorithm({\n                        name: \"HMAC\",\n                        hash: {\n                            name: parameters.hmacHashAlgorithm\n                        }\n                    }, true, \"hmacHashAlgorithm\");\n                    const pbkdf2Params = new PBKDF2Params({\n                        salt: new asn1js.OctetString({ valueHex: saltBuffer }),\n                        iterationCount: parameters.iterationCount,\n                        prf: new AlgorithmIdentifier({\n                            algorithmId: hmacOID,\n                            algorithmParams: new asn1js.Null()\n                        })\n                    });\n                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, \"keyEncryptionAlgorithm\");\n                    const keyInfo = new PasswordRecipientinfo({\n                        version: 0,\n                        keyDerivationAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: pbkdf2OID,\n                            algorithmParams: pbkdf2Params.toSchema()\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: kekOID,\n                            algorithmParams: parameters.keyEncryptionAlgorithmParams\n                        }),\n                        password: preDefinedData\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 4,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            default:\n                throw new Error(`Unknown value for \"variant\": ${variant}`);\n        }\n    }\n    addRecipientByKeyIdentifier(key, keyId, parameters, crypto = getCrypto(true)) {\n        const encryptionParameters = Object.assign({}, defaultEncryptionParams, parameters || {});\n        const recipientIdentifier = new KeyAgreeRecipientIdentifier({\n            variant: 2,\n            value: new RecipientKeyIdentifier({\n                subjectKeyIdentifier: new asn1js.OctetString({ valueHex: keyId }),\n            })\n        });\n        this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, { recipientPublicKey: key }, crypto);\n    }\n    _addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, extraRecipientInfoParams, crypto = getCrypto(true)) {\n        const encryptedKey = new RecipientEncryptedKey({\n            rid: recipientIdentifier\n        });\n        const aesKWoid = crypto.getOIDByAlgorithm({\n            name: \"AES-KW\",\n            length: encryptionParameters.kekEncryptionLength\n        }, true, \"keyEncryptionAlgorithm\");\n        const aesKW = new AlgorithmIdentifier({\n            algorithmId: aesKWoid,\n        });\n        const ecdhOID = crypto.getOIDByAlgorithm({\n            name: \"ECDH\",\n            kdf: encryptionParameters.kdfAlgorithm\n        }, true, \"KeyAgreeRecipientInfo\");\n        const ukmBuffer = new ArrayBuffer(64);\n        const ukmView = new Uint8Array(ukmBuffer);\n        crypto.getRandomValues(ukmView);\n        const recipientInfoParams = {\n            version: 3,\n            ukm: new asn1js.OctetString({ valueHex: ukmBuffer }),\n            keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: ecdhOID,\n                algorithmParams: aesKW.toSchema()\n            }),\n            recipientEncryptedKeys: new RecipientEncryptedKeys({\n                encryptedKeys: [encryptedKey]\n            })\n        };\n        const keyInfo = new KeyAgreeRecipientInfo(Object.assign(recipientInfoParams, extraRecipientInfoParams));\n        this.recipientInfos.push(new RecipientInfo({\n            variant: 2,\n            value: keyInfo\n        }));\n    }\n    async encrypt(contentEncryptionAlgorithm, contentToEncrypt, crypto = getCrypto(true)) {\n        const ivBuffer = new ArrayBuffer(16);\n        const ivView = new Uint8Array(ivBuffer);\n        crypto.getRandomValues(ivView);\n        const contentView = new Uint8Array(contentToEncrypt);\n        const contentEncryptionOID = crypto.getOIDByAlgorithm(contentEncryptionAlgorithm, true, \"contentEncryptionAlgorithm\");\n        const sessionKey = await crypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]);\n        const encryptedContent = await crypto.encrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, sessionKey, contentView);\n        const exportedSessionKey = await crypto.exportKey(\"raw\", sessionKey);\n        this.version = 2;\n        this.encryptedContentInfo = new EncryptedContentInfo({\n            disableSplit: this.policy.disableSplit,\n            contentType: \"1.2.840.113549.1.7.1\",\n            contentEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: contentEncryptionOID,\n                algorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\n            }),\n            encryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })\n        });\n        const SubKeyAgreeRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let recipientCurve;\n            let recipientPublicKey;\n            if (recipientInfo.recipientPublicKey) {\n                recipientCurve = recipientInfo.recipientPublicKey.algorithm.namedCurve;\n                recipientPublicKey = recipientInfo.recipientPublicKey;\n            }\n            else if (recipientInfo.recipientCertificate) {\n                const curveObject = recipientInfo.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName())\n                    throw new Error(`Incorrect \"recipientCertificate\" for index ${index}`);\n                const curveOID = curveObject.valueBlock.toString();\n                switch (curveOID) {\n                    case \"1.2.840.10045.3.1.7\":\n                        recipientCurve = \"P-256\";\n                        break;\n                    case \"1.3.132.0.34\":\n                        recipientCurve = \"P-384\";\n                        break;\n                    case \"1.3.132.0.35\":\n                        recipientCurve = \"P-521\";\n                        break;\n                    default:\n                        throw new Error(`Incorrect curve OID for index ${index}`);\n                }\n                recipientPublicKey = await recipientInfo.recipientCertificate.getPublicKey({\n                    algorithm: {\n                        algorithm: {\n                            name: \"ECDH\",\n                            namedCurve: recipientCurve\n                        },\n                        usages: []\n                    }\n                }, crypto);\n            }\n            else {\n                throw new Error(\"Unsupported RecipientInfo\");\n            }\n            const recipientCurveLength = curveLengthByName[recipientCurve];\n            const ecdhKeys = await crypto.generateKey({ name: \"ECDH\", namedCurve: recipientCurve }, true, [\"deriveBits\"]);\n            const exportedECDHPublicKey = await crypto.exportKey(\"spki\", ecdhKeys.publicKey);\n            const derivedBits = await crypto.deriveBits({\n                name: \"ECDH\",\n                public: recipientPublicKey\n            }, ecdhKeys.privateKey, recipientCurveLength);\n            const aesKWAlgorithm = new AlgorithmIdentifier({ schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams });\n            const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, \"aesKWAlgorithm\");\n            let kwLength = kwAlgorithm.length;\n            const kwLengthBuffer = new ArrayBuffer(4);\n            const kwLengthView = new Uint8Array(kwLengthBuffer);\n            for (let j = 3; j >= 0; j--) {\n                kwLengthView[j] = kwLength;\n                kwLength >>= 8;\n            }\n            const eccInfo = new ECCCMSSharedInfo({\n                keyInfo: new AlgorithmIdentifier({\n                    algorithmId: aesKWAlgorithm.algorithmId\n                }),\n                entityUInfo: recipientInfo.ukm,\n                suppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\n            });\n            const encodedInfo = eccInfo.toSchema().toBER(false);\n            const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"ecdhAlgorithm\");\n            const derivedKeyRaw = await kdf(ecdhAlgorithm.kdf, derivedBits, kwAlgorithm.length, encodedInfo, crypto);\n            const awsKW = await crypto.importKey(\"raw\", derivedKeyRaw, { name: \"AES-KW\" }, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, awsKW, { name: \"AES-KW\" });\n            const originator = new OriginatorIdentifierOrKey();\n            originator.variant = 3;\n            originator.value = OriginatorPublicKey.fromBER(exportedECDHPublicKey);\n            recipientInfo.originator = originator;\n            recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: wrappedKey });\n            return { ecdhPrivateKey: ecdhKeys.privateKey };\n        };\n        const SubKeyTransRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            if (algorithmParameters.name === \"RSA-OAEP\") {\n                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;\n                const rsaOAEPParams = new RSAESOAEPParams({ schema });\n                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\n                if ((\"name\" in algorithmParameters.hash) === false)\n                    throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\n            }\n            try {\n                const publicKey = await recipientInfo.recipientCertificate.getPublicKey({\n                    algorithm: {\n                        algorithm: algorithmParameters,\n                        usages: [\"encrypt\", \"wrapKey\"]\n                    }\n                }, crypto);\n                const encryptedKey = await crypto.encrypt(publicKey.algorithm, publicKey, exportedSessionKey);\n                recipientInfo.encryptedKey = new asn1js.OctetString({ valueHex: encryptedKey });\n            }\n            catch {\n            }\n        };\n        const SubKEKRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            const kekKey = await crypto.importKey(\"raw\", new Uint8Array(recipientInfo.preDefinedKEK), kekAlgorithm, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, kekKey, kekAlgorithm);\n            recipientInfo.encryptedKey = new asn1js.OctetString({ valueHex: wrappedKey });\n        };\n        const SubPasswordRecipientinfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let pbkdf2Params;\n            if (!recipientInfo.keyDerivationAlgorithm)\n                throw new Error(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\n            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams)\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            try {\n                pbkdf2Params = new PBKDF2Params({ schema: recipientInfo.keyDerivationAlgorithm.algorithmParams });\n            }\n            catch (ex) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            const passwordView = new Uint8Array(recipientInfo.password);\n            const derivationKey = await crypto.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            let hmacHashAlgorithm = \"SHA-1\";\n            if (pbkdf2Params.prf) {\n                const prfAlgorithm = crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, \"prfAlgorithm\");\n                hmacHashAlgorithm = prfAlgorithm.hash.name;\n            }\n            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\n            const iterations = pbkdf2Params.iterationCount;\n            const derivedKey = await crypto.deriveKey({\n                name: \"PBKDF2\",\n                hash: {\n                    name: hmacHashAlgorithm\n                },\n                salt: saltView,\n                iterations\n            }, derivationKey, kekAlgorithm, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, derivedKey, kekAlgorithm);\n            recipientInfo.encryptedKey = new asn1js.OctetString({ valueHex: wrappedKey });\n        };\n        const res = [];\n        for (let i = 0; i < this.recipientInfos.length; i++) {\n            switch (this.recipientInfos[i].variant) {\n                case 1:\n                    res.push(await SubKeyTransRecipientInfo(i));\n                    break;\n                case 2:\n                    res.push(await SubKeyAgreeRecipientInfo(i));\n                    break;\n                case 3:\n                    res.push(await SubKEKRecipientInfo(i));\n                    break;\n                case 4:\n                    res.push(await SubPasswordRecipientinfo(i));\n                    break;\n                default:\n                    throw new Error(`Unknown recipient type in array with index ${i}`);\n            }\n        }\n        return res;\n    }\n    async decrypt(recipientIndex, parameters, crypto = getCrypto(true)) {\n        const decryptionParameters = parameters || {};\n        if ((recipientIndex + 1) > this.recipientInfos.length) {\n            throw new Error(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`);\n        }\n        const SubKeyAgreeRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let curveOID;\n            let recipientCurve;\n            let recipientCurveLength;\n            const originator = recipientInfo.originator;\n            if (decryptionParameters.recipientCertificate) {\n                const curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName()) {\n                    throw new Error(`Incorrect \"recipientCertificate\" for index ${index}`);\n                }\n                curveOID = curveObject.valueBlock.toString();\n            }\n            else if (originator.value.algorithm.algorithmParams) {\n                const curveObject = originator.value.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName()) {\n                    throw new Error(`Incorrect originator for index ${index}`);\n                }\n                curveOID = curveObject.valueBlock.toString();\n            }\n            else {\n                throw new Error(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\" if algorithm params are missing from originator\");\n            }\n            if (!decryptionParameters.recipientPrivateKey)\n                throw new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\n            switch (curveOID) {\n                case \"1.2.840.10045.3.1.7\":\n                    recipientCurve = \"P-256\";\n                    recipientCurveLength = 256;\n                    break;\n                case \"1.3.132.0.34\":\n                    recipientCurve = \"P-384\";\n                    recipientCurveLength = 384;\n                    break;\n                case \"1.3.132.0.35\":\n                    recipientCurve = \"P-521\";\n                    recipientCurveLength = 528;\n                    break;\n                default:\n                    throw new Error(`Incorrect curve OID for index ${index}`);\n            }\n            let ecdhPrivateKey;\n            let keyCrypto = crypto;\n            if (BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {\n                ecdhPrivateKey = await crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, {\n                    name: \"ECDH\",\n                    namedCurve: recipientCurve\n                }, true, [\"deriveBits\"]);\n            }\n            else {\n                ecdhPrivateKey = decryptionParameters.recipientPrivateKey;\n                if (\"crypto\" in decryptionParameters && decryptionParameters.crypto) {\n                    keyCrypto = decryptionParameters.crypto.subtle;\n                }\n            }\n            if ((\"algorithmParams\" in originator.value.algorithm) === false)\n                originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });\n            const buffer = originator.value.toSchema().toBER(false);\n            const ecdhPublicKey = await crypto.importKey(\"spki\", buffer, {\n                name: \"ECDH\",\n                namedCurve: recipientCurve\n            }, true, []);\n            const sharedSecret = await keyCrypto.deriveBits({\n                name: \"ECDH\",\n                public: ecdhPublicKey\n            }, ecdhPrivateKey, recipientCurveLength);\n            async function applyKDF(includeAlgorithmParams) {\n                includeAlgorithmParams = includeAlgorithmParams || false;\n                const aesKWAlgorithm = new AlgorithmIdentifier({ schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams });\n                const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, \"kwAlgorithm\");\n                let kwLength = kwAlgorithm.length;\n                const kwLengthBuffer = new ArrayBuffer(4);\n                const kwLengthView = new Uint8Array(kwLengthBuffer);\n                for (let j = 3; j >= 0; j--) {\n                    kwLengthView[j] = kwLength;\n                    kwLength >>= 8;\n                }\n                const keyInfoAlgorithm = {\n                    algorithmId: aesKWAlgorithm.algorithmId\n                };\n                if (includeAlgorithmParams) {\n                    keyInfoAlgorithm.algorithmParams = new asn1js.Null();\n                }\n                const eccInfo = new ECCCMSSharedInfo({\n                    keyInfo: new AlgorithmIdentifier(keyInfoAlgorithm),\n                    entityUInfo: recipientInfo.ukm,\n                    suppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\n                });\n                const encodedInfo = eccInfo.toSchema().toBER(false);\n                const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"ecdhAlgorithm\");\n                if (!ecdhAlgorithm.name) {\n                    throw new Error(`Incorrect OID for key encryption algorithm: ${recipientInfo.keyEncryptionAlgorithm.algorithmId}`);\n                }\n                return kdf(ecdhAlgorithm.kdf, sharedSecret, kwAlgorithm.length, encodedInfo, crypto);\n            }\n            const kdfResult = await applyKDF();\n            const importAesKwKey = async (kdfResult) => {\n                return crypto.importKey(\"raw\", kdfResult, { name: \"AES-KW\" }, true, [\"unwrapKey\"]);\n            };\n            const aesKwKey = await importAesKwKey(kdfResult);\n            const unwrapSessionKey = async (aesKwKey) => {\n                const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n                const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n                return crypto.unwrapKey(\"raw\", recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHexView, aesKwKey, { name: \"AES-KW\" }, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n            };\n            try {\n                return await unwrapSessionKey(aesKwKey);\n            }\n            catch {\n                const kdfResult = await applyKDF(true);\n                const aesKwKey = await importAesKwKey(kdfResult);\n                return unwrapSessionKey(aesKwKey);\n            }\n        };\n        const SubKeyTransRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            if (!decryptionParameters.recipientPrivateKey) {\n                throw new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\n            }\n            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            if (algorithmParameters.name === \"RSA-OAEP\") {\n                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;\n                const rsaOAEPParams = new RSAESOAEPParams({ schema });\n                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\n                if ((\"name\" in algorithmParameters.hash) === false)\n                    throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\n            }\n            let privateKey;\n            let keyCrypto = crypto;\n            if (BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {\n                privateKey = await crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, algorithmParameters, true, [\"decrypt\"]);\n            }\n            else {\n                privateKey = decryptionParameters.recipientPrivateKey;\n                if (\"crypto\" in decryptionParameters && decryptionParameters.crypto) {\n                    keyCrypto = decryptionParameters.crypto.subtle;\n                }\n            }\n            const sessionKey = await keyCrypto.decrypt(privateKey.algorithm, privateKey, recipientInfo.encryptedKey.valueBlock.valueHexView);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            if ((\"name\" in contentEncryptionAlgorithm) === false)\n                throw new Error(`Incorrect \"contentEncryptionAlgorithm\": ${algorithmId}`);\n            return crypto.importKey(\"raw\", sessionKey, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        const SubKEKRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            if (!decryptionParameters.preDefinedData)\n                throw new Error(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            const importedKey = await crypto.importKey(\"raw\", decryptionParameters.preDefinedData, kekAlgorithm, true, [\"unwrapKey\"]);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            if (!contentEncryptionAlgorithm.name) {\n                throw new Error(`Incorrect \"contentEncryptionAlgorithm\": ${algorithmId}`);\n            }\n            return crypto.unwrapKey(\"raw\", recipientInfo.encryptedKey.valueBlock.valueHexView, importedKey, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        const SubPasswordRecipientinfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let pbkdf2Params;\n            if (!decryptionParameters.preDefinedData) {\n                throw new Error(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\n            }\n            if (!recipientInfo.keyDerivationAlgorithm) {\n                throw new Error(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            try {\n                pbkdf2Params = new PBKDF2Params({ schema: recipientInfo.keyDerivationAlgorithm.algorithmParams });\n            }\n            catch (ex) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            const pbkdf2Key = await crypto.importKey(\"raw\", decryptionParameters.preDefinedData, \"PBKDF2\", false, [\"deriveKey\"]);\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            const hmacHashAlgorithm = pbkdf2Params.prf\n                ? crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, \"prfAlgorithm\").hash.name\n                : \"SHA-1\";\n            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\n            const iterations = pbkdf2Params.iterationCount;\n            const kekKey = await crypto.deriveKey({\n                name: \"PBKDF2\",\n                hash: {\n                    name: hmacHashAlgorithm\n                },\n                salt: saltView,\n                iterations\n            }, pbkdf2Key, kekAlgorithm, true, [\"unwrapKey\"]);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            return crypto.unwrapKey(\"raw\", recipientInfo.encryptedKey.valueBlock.valueHexView, kekKey, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        let unwrappedKey;\n        switch (this.recipientInfos[recipientIndex].variant) {\n            case 1:\n                unwrappedKey = await SubKeyTransRecipientInfo(recipientIndex);\n                break;\n            case 2:\n                unwrappedKey = await SubKeyAgreeRecipientInfo(recipientIndex);\n                break;\n            case 3:\n                unwrappedKey = await SubKEKRecipientInfo(recipientIndex);\n                break;\n            case 4:\n                unwrappedKey = await SubPasswordRecipientinfo(recipientIndex);\n                break;\n            default:\n                throw new Error(`Unknown recipient type in array with index ${recipientIndex}`);\n        }\n        const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n        const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n        const ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\n        const ivView = new Uint8Array(ivBuffer);\n        if (!this.encryptedContentInfo.encryptedContent) {\n            throw new Error(\"Required property `encryptedContent` is empty\");\n        }\n        const dataBuffer = this.encryptedContentInfo.getEncryptedContent();\n        return crypto.decrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, unwrappedKey, dataBuffer);\n    }\n}\nEnvelopedData.CLASS_NAME = \"EnvelopedData\";\n\nconst SAFE_CONTENTS = \"safeContents\";\nconst PARSED_VALUE$1 = \"parsedValue\";\nconst CONTENT_INFOS = \"contentInfos\";\nclass AuthenticatedSafe extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.safeContents = pvutils.getParametersValue(parameters, SAFE_CONTENTS, AuthenticatedSafe.defaultValues(SAFE_CONTENTS));\n        if (PARSED_VALUE$1 in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$1, AuthenticatedSafe.defaultValues(PARSED_VALUE$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SAFE_CONTENTS:\n                return [];\n            case PARSED_VALUE$1:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SAFE_CONTENTS:\n                return (memberValue.length === 0);\n            case PARSED_VALUE$1:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Repeated({\n                    name: (names.contentInfos || EMPTY_STRING),\n                    value: ContentInfo.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            CONTENT_INFOS\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, AuthenticatedSafe.schema({\n            names: {\n                contentInfos: CONTENT_INFOS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: Array.from(this.safeContents, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            safeContents: Array.from(this.safeContents, o => o.toJSON())\n        };\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        ParameterError.assert(parameters, SAFE_CONTENTS);\n        ArgumentError.assert(parameters.safeContents, SAFE_CONTENTS, \"Array\");\n        if (parameters.safeContents.length !== this.safeContents.length) {\n            throw new ArgumentError(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\");\n        }\n        this.parsedValue = {\n            safeContents: [],\n        };\n        for (const [index, content] of this.safeContents.entries()) {\n            const safeContent = parameters.safeContents[index];\n            const errorTarget = `parameters.safeContents[${index}]`;\n            switch (content.contentType) {\n                case id_ContentType_Data:\n                    {\n                        ArgumentError.assert(content.content, \"this.safeContents[j].content\", asn1js.OctetString);\n                        const authSafeContent = content.content.getValue();\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 0,\n                            value: SafeContents.fromBER(authSafeContent)\n                        });\n                    }\n                    break;\n                case id_ContentType_EnvelopedData:\n                    {\n                        const cmsEnveloped = new EnvelopedData({ schema: content.content });\n                        ParameterError.assert(errorTarget, safeContent, \"recipientCertificate\", \"recipientKey\");\n                        const envelopedData = safeContent;\n                        const recipientCertificate = envelopedData.recipientCertificate;\n                        const recipientKey = envelopedData.recipientKey;\n                        const decrypted = await cmsEnveloped.decrypt(0, {\n                            recipientCertificate,\n                            recipientPrivateKey: recipientKey\n                        }, crypto);\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 2,\n                            value: SafeContents.fromBER(decrypted),\n                        });\n                    }\n                    break;\n                case id_ContentType_EncryptedData:\n                    {\n                        const cmsEncrypted = new EncryptedData({ schema: content.content });\n                        ParameterError.assert(errorTarget, safeContent, \"password\");\n                        const password = safeContent.password;\n                        const decrypted = await cmsEncrypted.decrypt({\n                            password\n                        }, crypto);\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 1,\n                            value: SafeContents.fromBER(decrypted),\n                        });\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown \"contentType\" for AuthenticatedSafe: \" ${content.contentType}`);\n            }\n        }\n    }\n    async makeInternalValues(parameters, crypto = getCrypto(true)) {\n        if (!(this.parsedValue)) {\n            throw new Error(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\n        }\n        ArgumentError.assert(this.parsedValue, \"this.parsedValue\", \"object\");\n        ArgumentError.assert(this.parsedValue.safeContents, \"this.parsedValue.safeContents\", \"Array\");\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        ParameterError.assert(parameters, \"safeContents\");\n        ArgumentError.assert(parameters.safeContents, \"parameters.safeContents\", \"Array\");\n        if (parameters.safeContents.length !== this.parsedValue.safeContents.length) {\n            throw new ArgumentError(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\");\n        }\n        this.safeContents = [];\n        for (const [index, content] of this.parsedValue.safeContents.entries()) {\n            ParameterError.assert(\"content\", content, \"privacyMode\", \"value\");\n            ArgumentError.assert(content.value, \"content.value\", SafeContents);\n            switch (content.privacyMode) {\n                case 0:\n                    {\n                        const contentBuffer = content.value.toSchema().toBER(false);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.1\",\n                            content: new asn1js.OctetString({ valueHex: contentBuffer })\n                        }));\n                    }\n                    break;\n                case 1:\n                    {\n                        const cmsEncrypted = new EncryptedData();\n                        const currentParameters = parameters.safeContents[index];\n                        currentParameters.contentToEncrypt = content.value.toSchema().toBER(false);\n                        await cmsEncrypted.encrypt(currentParameters, crypto);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.6\",\n                            content: cmsEncrypted.toSchema()\n                        }));\n                    }\n                    break;\n                case 2:\n                    {\n                        const cmsEnveloped = new EnvelopedData();\n                        const contentToEncrypt = content.value.toSchema().toBER(false);\n                        const safeContent = parameters.safeContents[index];\n                        ParameterError.assert(`parameters.safeContents[${index}]`, safeContent, \"encryptingCertificate\", \"encryptionAlgorithm\");\n                        switch (true) {\n                            case (safeContent.encryptionAlgorithm.name.toLowerCase() === \"aes-cbc\"):\n                            case (safeContent.encryptionAlgorithm.name.toLowerCase() === \"aes-gcm\"):\n                                break;\n                            default:\n                                throw new Error(`Incorrect parameter \"encryptionAlgorithm\" in \"parameters.safeContents[i]\": ${safeContent.encryptionAlgorithm}`);\n                        }\n                        switch (true) {\n                            case (safeContent.encryptionAlgorithm.length === 128):\n                            case (safeContent.encryptionAlgorithm.length === 192):\n                            case (safeContent.encryptionAlgorithm.length === 256):\n                                break;\n                            default:\n                                throw new Error(`Incorrect parameter \"encryptionAlgorithm.length\" in \"parameters.safeContents[i]\": ${safeContent.encryptionAlgorithm.length}`);\n                        }\n                        const encryptionAlgorithm = safeContent.encryptionAlgorithm;\n                        cmsEnveloped.addRecipientByCertificate(safeContent.encryptingCertificate, {}, undefined, crypto);\n                        await cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt, crypto);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.3\",\n                            content: cmsEnveloped.toSchema()\n                        }));\n                    }\n                    break;\n                default:\n                    throw new Error(`Incorrect value for \"content.privacyMode\": ${content.privacyMode}`);\n            }\n        }\n        return this;\n    }\n}\nAuthenticatedSafe.CLASS_NAME = \"AuthenticatedSafe\";\n\nconst HASH_ALGORITHM$1 = \"hashAlgorithm\";\nconst ISSUER_NAME_HASH = \"issuerNameHash\";\nconst ISSUER_KEY_HASH = \"issuerKeyHash\";\nconst SERIAL_NUMBER$1 = \"serialNumber\";\nconst CLEAR_PROPS$j = [\n    HASH_ALGORITHM$1,\n    ISSUER_NAME_HASH,\n    ISSUER_KEY_HASH,\n    SERIAL_NUMBER$1,\n];\nclass CertID extends PkiObject {\n    static async create(certificate, parameters, crypto = getCrypto(true)) {\n        const certID = new CertID();\n        await certID.createForCertificate(certificate, parameters, crypto);\n        return certID;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$1, CertID.defaultValues(HASH_ALGORITHM$1));\n        this.issuerNameHash = pvutils.getParametersValue(parameters, ISSUER_NAME_HASH, CertID.defaultValues(ISSUER_NAME_HASH));\n        this.issuerKeyHash = pvutils.getParametersValue(parameters, ISSUER_KEY_HASH, CertID.defaultValues(ISSUER_KEY_HASH));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$1, CertID.defaultValues(SERIAL_NUMBER$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case ISSUER_NAME_HASH:\n            case ISSUER_KEY_HASH:\n                return new asn1js.OctetString();\n            case SERIAL_NUMBER$1:\n                return new asn1js.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case HASH_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ISSUER_NAME_HASH:\n            case ISSUER_KEY_HASH:\n            case SERIAL_NUMBER$1:\n                return (memberValue.isEqual(CertID.defaultValues(SERIAL_NUMBER$1)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.hashAlgorithmObject || {\n                    names: {\n                        blockName: (names.hashAlgorithm || EMPTY_STRING)\n                    }\n                }),\n                new asn1js.OctetString({ name: (names.issuerNameHash || EMPTY_STRING) }),\n                new asn1js.OctetString({ name: (names.issuerKeyHash || EMPTY_STRING) }),\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$j);\n        const asn1 = asn1js.compareSchema(schema, schema, CertID.schema({\n            names: {\n                hashAlgorithm: HASH_ALGORITHM$1,\n                issuerNameHash: ISSUER_NAME_HASH,\n                issuerKeyHash: ISSUER_KEY_HASH,\n                serialNumber: SERIAL_NUMBER$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        this.issuerNameHash = asn1.result.issuerNameHash;\n        this.issuerKeyHash = asn1.result.issuerKeyHash;\n        this.serialNumber = asn1.result.serialNumber;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.hashAlgorithm.toSchema(),\n                this.issuerNameHash,\n                this.issuerKeyHash,\n                this.serialNumber\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            hashAlgorithm: this.hashAlgorithm.toJSON(),\n            issuerNameHash: this.issuerNameHash.toJSON(),\n            issuerKeyHash: this.issuerKeyHash.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n        };\n    }\n    isEqual(certificateID) {\n        if (this.hashAlgorithm.algorithmId !== certificateID.hashAlgorithm.algorithmId) {\n            return false;\n        }\n        if (!pvtsutils.BufferSourceConverter.isEqual(this.issuerNameHash.valueBlock.valueHexView, certificateID.issuerNameHash.valueBlock.valueHexView)) {\n            return false;\n        }\n        if (!pvtsutils.BufferSourceConverter.isEqual(this.issuerKeyHash.valueBlock.valueHexView, certificateID.issuerKeyHash.valueBlock.valueHexView)) {\n            return false;\n        }\n        if (!this.serialNumber.isEqual(certificateID.serialNumber)) {\n            return false;\n        }\n        return true;\n    }\n    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {\n        ParameterError.assert(parameters, HASH_ALGORITHM$1, \"issuerCertificate\");\n        const hashOID = crypto.getOIDByAlgorithm({ name: parameters.hashAlgorithm }, true, \"hashAlgorithm\");\n        this.hashAlgorithm = new AlgorithmIdentifier({\n            algorithmId: hashOID,\n            algorithmParams: new asn1js.Null()\n        });\n        const issuerCertificate = parameters.issuerCertificate;\n        this.serialNumber = certificate.serialNumber;\n        const hashIssuerName = await crypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false));\n        this.issuerNameHash = new asn1js.OctetString({ valueHex: hashIssuerName });\n        const issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView;\n        const hashIssuerKey = await crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\n        this.issuerKeyHash = new asn1js.OctetString({ valueHex: hashIssuerKey });\n    }\n}\nCertID.CLASS_NAME = \"CertID\";\n\nconst CERT_ID = \"certID\";\nconst CERT_STATUS = \"certStatus\";\nconst THIS_UPDATE = \"thisUpdate\";\nconst NEXT_UPDATE = \"nextUpdate\";\nconst SINGLE_EXTENSIONS = \"singleExtensions\";\nconst CLEAR_PROPS$i = [\n    CERT_ID,\n    CERT_STATUS,\n    THIS_UPDATE,\n    NEXT_UPDATE,\n    SINGLE_EXTENSIONS,\n];\nclass SingleResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certID = pvutils.getParametersValue(parameters, CERT_ID, SingleResponse.defaultValues(CERT_ID));\n        this.certStatus = pvutils.getParametersValue(parameters, CERT_STATUS, SingleResponse.defaultValues(CERT_STATUS));\n        this.thisUpdate = pvutils.getParametersValue(parameters, THIS_UPDATE, SingleResponse.defaultValues(THIS_UPDATE));\n        if (NEXT_UPDATE in parameters) {\n            this.nextUpdate = pvutils.getParametersValue(parameters, NEXT_UPDATE, SingleResponse.defaultValues(NEXT_UPDATE));\n        }\n        if (SINGLE_EXTENSIONS in parameters) {\n            this.singleExtensions = pvutils.getParametersValue(parameters, SINGLE_EXTENSIONS, SingleResponse.defaultValues(SINGLE_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERT_ID:\n                return new CertID();\n            case CERT_STATUS:\n                return {};\n            case THIS_UPDATE:\n            case NEXT_UPDATE:\n                return new Date(0, 0, 0);\n            case SINGLE_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERT_ID:\n                return ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\n                    (CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\n                    (CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\n                    (CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\n            case CERT_STATUS:\n                return (Object.keys(memberValue).length === 0);\n            case THIS_UPDATE:\n            case NEXT_UPDATE:\n                return (memberValue === SingleResponse.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                CertID.schema(names.certID || {}),\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.Primitive({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                        }),\n                        new asn1js.Constructed({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [\n                                new asn1js.GeneralizedTime(),\n                                new asn1js.Constructed({\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [new asn1js.Enumerated()]\n                                })\n                            ]\n                        }),\n                        new asn1js.Primitive({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            lenBlock: { length: 1 }\n                        })\n                    ]\n                }),\n                new asn1js.GeneralizedTime({ name: (names.thisUpdate || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.GeneralizedTime({ name: (names.nextUpdate || EMPTY_STRING) })]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [Extensions.schema(names.singleExtensions || {})]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$i);\n        const asn1 = asn1js.compareSchema(schema, schema, SingleResponse.schema({\n            names: {\n                certID: {\n                    names: {\n                        blockName: CERT_ID\n                    }\n                },\n                certStatus: CERT_STATUS,\n                thisUpdate: THIS_UPDATE,\n                nextUpdate: NEXT_UPDATE,\n                singleExtensions: {\n                    names: {\n                        blockName: SINGLE_EXTENSIONS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certID = new CertID({ schema: asn1.result.certID });\n        this.certStatus = asn1.result.certStatus;\n        this.thisUpdate = asn1.result.thisUpdate.toDate();\n        if (NEXT_UPDATE in asn1.result)\n            this.nextUpdate = asn1.result.nextUpdate.toDate();\n        if (SINGLE_EXTENSIONS in asn1.result)\n            this.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.certID.toSchema());\n        outputArray.push(this.certStatus);\n        outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.thisUpdate }));\n        if (this.nextUpdate) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [new asn1js.GeneralizedTime({ valueDate: this.nextUpdate })]\n            }));\n        }\n        if (this.singleExtensions) {\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.singleExtensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            certID: this.certID.toJSON(),\n            certStatus: this.certStatus.toJSON(),\n            thisUpdate: this.thisUpdate\n        };\n        if (this.nextUpdate) {\n            res.nextUpdate = this.nextUpdate;\n        }\n        if (this.singleExtensions) {\n            res.singleExtensions = Array.from(this.singleExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nSingleResponse.CLASS_NAME = \"SingleResponse\";\n\nconst TBS$2 = \"tbs\";\nconst VERSION$7 = \"version\";\nconst RESPONDER_ID = \"responderID\";\nconst PRODUCED_AT = \"producedAt\";\nconst RESPONSES = \"responses\";\nconst RESPONSE_EXTENSIONS = \"responseExtensions\";\nconst RESPONSE_DATA = \"ResponseData\";\nconst RESPONSE_DATA_VERSION = `${RESPONSE_DATA}.${VERSION$7}`;\nconst RESPONSE_DATA_RESPONDER_ID = `${RESPONSE_DATA}.${RESPONDER_ID}`;\nconst RESPONSE_DATA_PRODUCED_AT = `${RESPONSE_DATA}.${PRODUCED_AT}`;\nconst RESPONSE_DATA_RESPONSES = `${RESPONSE_DATA}.${RESPONSES}`;\nconst RESPONSE_DATA_RESPONSE_EXTENSIONS = `${RESPONSE_DATA}.${RESPONSE_EXTENSIONS}`;\nconst CLEAR_PROPS$h = [\n    RESPONSE_DATA,\n    RESPONSE_DATA_VERSION,\n    RESPONSE_DATA_RESPONDER_ID,\n    RESPONSE_DATA_PRODUCED_AT,\n    RESPONSE_DATA_RESPONSES,\n    RESPONSE_DATA_RESPONSE_EXTENSIONS\n];\nclass ResponseData extends PkiObject {\n    get tbs() {\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$2, ResponseData.defaultValues(TBS$2)));\n        if (VERSION$7 in parameters) {\n            this.version = pvutils.getParametersValue(parameters, VERSION$7, ResponseData.defaultValues(VERSION$7));\n        }\n        this.responderID = pvutils.getParametersValue(parameters, RESPONDER_ID, ResponseData.defaultValues(RESPONDER_ID));\n        this.producedAt = pvutils.getParametersValue(parameters, PRODUCED_AT, ResponseData.defaultValues(PRODUCED_AT));\n        this.responses = pvutils.getParametersValue(parameters, RESPONSES, ResponseData.defaultValues(RESPONSES));\n        if (RESPONSE_EXTENSIONS in parameters) {\n            this.responseExtensions = pvutils.getParametersValue(parameters, RESPONSE_EXTENSIONS, ResponseData.defaultValues(RESPONSE_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$7:\n                return 0;\n            case TBS$2:\n                return EMPTY_BUFFER;\n            case RESPONDER_ID:\n                return {};\n            case PRODUCED_AT:\n                return new Date(0, 0, 0);\n            case RESPONSES:\n            case RESPONSE_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS$2:\n                return (memberValue.byteLength === 0);\n            case RESPONDER_ID:\n                return (Object.keys(memberValue).length === 0);\n            case PRODUCED_AT:\n                return (memberValue === ResponseData.defaultValues(memberName));\n            case RESPONSES:\n            case RESPONSE_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || RESPONSE_DATA),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Integer({ name: (names.version || RESPONSE_DATA_VERSION) })]\n                }),\n                new asn1js.Choice({\n                    value: [\n                        new asn1js.Constructed({\n                            name: (names.responderID || RESPONSE_DATA_RESPONDER_ID),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [RelativeDistinguishedNames.schema(names.ResponseDataByName || {\n                                    names: {\n                                        blockName: \"ResponseData.byName\"\n                                    }\n                                })]\n                        }),\n                        new asn1js.Constructed({\n                            name: (names.responderID || RESPONSE_DATA_RESPONDER_ID),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            value: [new asn1js.OctetString({ name: (names.ResponseDataByKey || \"ResponseData.byKey\") })]\n                        })\n                    ]\n                }),\n                new asn1js.GeneralizedTime({ name: (names.producedAt || RESPONSE_DATA_PRODUCED_AT) }),\n                new asn1js.Sequence({\n                    value: [\n                        new asn1js.Repeated({\n                            name: RESPONSE_DATA_RESPONSES,\n                            value: SingleResponse.schema(names.response || {})\n                        })\n                    ]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [Extensions.schema(names.extensions || {\n                            names: {\n                                blockName: RESPONSE_DATA_RESPONSE_EXTENSIONS\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$h);\n        const asn1 = asn1js.compareSchema(schema, schema, ResponseData.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.ResponseData.valueBeforeDecodeView;\n        if (RESPONSE_DATA_VERSION in asn1.result)\n            this.version = asn1.result[RESPONSE_DATA_VERSION].valueBlock.valueDec;\n        if (asn1.result[RESPONSE_DATA_RESPONDER_ID].idBlock.tagNumber === 1)\n            this.responderID = new RelativeDistinguishedNames({ schema: asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0] });\n        else\n            this.responderID = asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0];\n        this.producedAt = asn1.result[RESPONSE_DATA_PRODUCED_AT].toDate();\n        this.responses = Array.from(asn1.result[RESPONSE_DATA_RESPONSES], element => new SingleResponse({ schema: element }));\n        if (RESPONSE_DATA_RESPONSE_EXTENSIONS in asn1.result)\n            this.responseExtensions = Array.from(asn1.result[RESPONSE_DATA_RESPONSE_EXTENSIONS].valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (!this.tbsView.byteLength) {\n                return ResponseData.schema();\n            }\n            const asn1 = asn1js.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Response Data\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            const outputArray = [];\n            if (VERSION$7 in this) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Integer({ value: this.version })]\n                }));\n            }\n            if (this.responderID instanceof RelativeDistinguishedNames) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.responderID.toSchema()]\n                }));\n            }\n            else {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [this.responderID]\n                }));\n            }\n            outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.producedAt }));\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.responses, o => o.toSchema())\n            }));\n            if (this.responseExtensions) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js.Sequence({\n                            value: Array.from(this.responseExtensions, o => o.toSchema())\n                        })]\n                }));\n            }\n            tbsSchema = new asn1js.Sequence({\n                value: outputArray\n            });\n        }\n        return tbsSchema;\n    }\n    toJSON() {\n        const res = {};\n        if (VERSION$7 in this) {\n            res.version = this.version;\n        }\n        if (this.responderID) {\n            res.responderID = this.responderID;\n        }\n        if (this.producedAt) {\n            res.producedAt = this.producedAt;\n        }\n        if (this.responses) {\n            res.responses = Array.from(this.responses, o => o.toJSON());\n        }\n        if (this.responseExtensions) {\n            res.responseExtensions = Array.from(this.responseExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nResponseData.CLASS_NAME = \"ResponseData\";\n\nconst TRUSTED_CERTS = \"trustedCerts\";\nconst CERTS$2 = \"certs\";\nconst CRLS$1 = \"crls\";\nconst OCSPS$1 = \"ocsps\";\nconst CHECK_DATE = \"checkDate\";\nconst FIND_ORIGIN = \"findOrigin\";\nconst FIND_ISSUER = \"findIssuer\";\nvar ChainValidationCode;\n(function (ChainValidationCode) {\n    ChainValidationCode[ChainValidationCode[\"unknown\"] = -1] = \"unknown\";\n    ChainValidationCode[ChainValidationCode[\"success\"] = 0] = \"success\";\n    ChainValidationCode[ChainValidationCode[\"noRevocation\"] = 11] = \"noRevocation\";\n    ChainValidationCode[ChainValidationCode[\"noPath\"] = 60] = \"noPath\";\n    ChainValidationCode[ChainValidationCode[\"noValidPath\"] = 97] = \"noValidPath\";\n})(ChainValidationCode || (ChainValidationCode = {}));\nclass ChainValidationError extends Error {\n    constructor(code, message) {\n        super(message);\n        this.name = ChainValidationError.NAME;\n        this.code = code;\n        this.message = message;\n    }\n}\nChainValidationError.NAME = \"ChainValidationError\";\nfunction isTrusted(cert, trustedList) {\n    for (let i = 0; i < trustedList.length; i++) {\n        if (pvtsutils.BufferSourceConverter.isEqual(cert.tbsView, trustedList[i].tbsView)) {\n            return true;\n        }\n    }\n    return false;\n}\nclass CertificateChainValidationEngine {\n    constructor(parameters = {}) {\n        this.trustedCerts = pvutils.getParametersValue(parameters, TRUSTED_CERTS, this.defaultValues(TRUSTED_CERTS));\n        this.certs = pvutils.getParametersValue(parameters, CERTS$2, this.defaultValues(CERTS$2));\n        this.crls = pvutils.getParametersValue(parameters, CRLS$1, this.defaultValues(CRLS$1));\n        this.ocsps = pvutils.getParametersValue(parameters, OCSPS$1, this.defaultValues(OCSPS$1));\n        this.checkDate = pvutils.getParametersValue(parameters, CHECK_DATE, this.defaultValues(CHECK_DATE));\n        this.findOrigin = pvutils.getParametersValue(parameters, FIND_ORIGIN, this.defaultValues(FIND_ORIGIN));\n        this.findIssuer = pvutils.getParametersValue(parameters, FIND_ISSUER, this.defaultValues(FIND_ISSUER));\n    }\n    static defaultFindOrigin(certificate, validationEngine) {\n        if (certificate.tbsView.byteLength === 0) {\n            certificate.tbsView = new Uint8Array(certificate.encodeTBS().toBER());\n        }\n        for (const localCert of validationEngine.certs) {\n            if (localCert.tbsView.byteLength === 0) {\n                localCert.tbsView = new Uint8Array(localCert.encodeTBS().toBER());\n            }\n            if (pvtsutils.BufferSourceConverter.isEqual(certificate.tbsView, localCert.tbsView))\n                return \"Intermediate Certificates\";\n        }\n        for (const trustedCert of validationEngine.trustedCerts) {\n            if (trustedCert.tbsView.byteLength === 0)\n                trustedCert.tbsView = new Uint8Array(trustedCert.encodeTBS().toBER());\n            if (pvtsutils.BufferSourceConverter.isEqual(certificate.tbsView, trustedCert.tbsView))\n                return \"Trusted Certificates\";\n        }\n        return \"Unknown\";\n    }\n    async defaultFindIssuer(certificate, validationEngine, crypto = getCrypto(true)) {\n        const result = [];\n        let keyIdentifier = null;\n        let authorityCertIssuer = null;\n        let authorityCertSerialNumber = null;\n        if (certificate.subject.isEqual(certificate.issuer)) {\n            try {\n                const verificationResult = await certificate.verify(undefined, crypto);\n                if (verificationResult) {\n                    return [certificate];\n                }\n            }\n            catch (ex) {\n            }\n        }\n        if (certificate.extensions) {\n            for (const extension of certificate.extensions) {\n                if (extension.extnID === id_AuthorityKeyIdentifier && extension.parsedValue instanceof AuthorityKeyIdentifier) {\n                    if (extension.parsedValue.keyIdentifier) {\n                        keyIdentifier = extension.parsedValue.keyIdentifier;\n                    }\n                    else {\n                        if (extension.parsedValue.authorityCertIssuer) {\n                            authorityCertIssuer = extension.parsedValue.authorityCertIssuer;\n                        }\n                        if (extension.parsedValue.authorityCertSerialNumber) {\n                            authorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        function checkCertificate(possibleIssuer) {\n            if (keyIdentifier !== null) {\n                if (possibleIssuer.extensions) {\n                    let extensionFound = false;\n                    for (const extension of possibleIssuer.extensions) {\n                        if (extension.extnID === id_SubjectKeyIdentifier && extension.parsedValue) {\n                            extensionFound = true;\n                            if (pvtsutils.BufferSourceConverter.isEqual(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHexView)) {\n                                result.push(possibleIssuer);\n                            }\n                            break;\n                        }\n                    }\n                    if (extensionFound) {\n                        return;\n                    }\n                }\n            }\n            let authorityCertSerialNumberEqual = false;\n            if (authorityCertSerialNumber !== null)\n                authorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\n            if (authorityCertIssuer !== null) {\n                if (possibleIssuer.subject.isEqual(authorityCertIssuer)) {\n                    if (authorityCertSerialNumberEqual)\n                        result.push(possibleIssuer);\n                }\n            }\n            else {\n                if (certificate.issuer.isEqual(possibleIssuer.subject))\n                    result.push(possibleIssuer);\n            }\n        }\n        for (const trustedCert of validationEngine.trustedCerts) {\n            checkCertificate(trustedCert);\n        }\n        for (const intermediateCert of validationEngine.certs) {\n            checkCertificate(intermediateCert);\n        }\n        for (let i = result.length - 1; i >= 0; i--) {\n            try {\n                const verificationResult = await certificate.verify(result[i], crypto);\n                if (verificationResult === false)\n                    result.splice(i, 1);\n            }\n            catch (ex) {\n                result.splice(i, 1);\n            }\n        }\n        return result;\n    }\n    defaultValues(memberName) {\n        switch (memberName) {\n            case TRUSTED_CERTS:\n                return [];\n            case CERTS$2:\n                return [];\n            case CRLS$1:\n                return [];\n            case OCSPS$1:\n                return [];\n            case CHECK_DATE:\n                return new Date();\n            case FIND_ORIGIN:\n                return CertificateChainValidationEngine.defaultFindOrigin;\n            case FIND_ISSUER:\n                return this.defaultFindIssuer;\n            default:\n                throw new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\n        }\n    }\n    async sort(passedWhenNotRevValues = false, crypto = getCrypto(true)) {\n        const localCerts = [];\n        const buildPath = async (certificate, crypto) => {\n            const result = [];\n            function checkUnique(array) {\n                let unique = true;\n                for (let i = 0; i < array.length; i++) {\n                    for (let j = 0; j < array.length; j++) {\n                        if (j === i)\n                            continue;\n                        if (array[i] === array[j]) {\n                            unique = false;\n                            break;\n                        }\n                    }\n                    if (!unique)\n                        break;\n                }\n                return unique;\n            }\n            if (isTrusted(certificate, this.trustedCerts)) {\n                return [[certificate]];\n            }\n            const findIssuerResult = await this.findIssuer(certificate, this, crypto);\n            if (findIssuerResult.length === 0) {\n                throw new Error(\"No valid certificate paths found\");\n            }\n            for (let i = 0; i < findIssuerResult.length; i++) {\n                if (pvtsutils.BufferSourceConverter.isEqual(findIssuerResult[i].tbsView, certificate.tbsView)) {\n                    result.push([findIssuerResult[i]]);\n                    continue;\n                }\n                const buildPathResult = await buildPath(findIssuerResult[i], crypto);\n                for (let j = 0; j < buildPathResult.length; j++) {\n                    const copy = buildPathResult[j].slice();\n                    copy.splice(0, 0, findIssuerResult[i]);\n                    if (checkUnique(copy))\n                        result.push(copy);\n                    else\n                        result.push(buildPathResult[j]);\n                }\n            }\n            return result;\n        };\n        const findCRL = async (certificate) => {\n            const issuerCertificates = [];\n            const crls = [];\n            const crlsAndCertificates = [];\n            issuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\n            if (issuerCertificates.length === 0) {\n                return {\n                    status: 1,\n                    statusMessage: \"No certificate's issuers\"\n                };\n            }\n            crls.push(...this.crls.filter(o => o.issuer.isEqual(certificate.issuer)));\n            if (crls.length === 0) {\n                return {\n                    status: 2,\n                    statusMessage: \"No CRLs for specific certificate issuer\"\n                };\n            }\n            for (let i = 0; i < crls.length; i++) {\n                const crl = crls[i];\n                if (crl.nextUpdate && crl.nextUpdate.value < this.checkDate) {\n                    continue;\n                }\n                for (let j = 0; j < issuerCertificates.length; j++) {\n                    try {\n                        const result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] }, crypto);\n                        if (result) {\n                            crlsAndCertificates.push({\n                                crl: crls[i],\n                                certificate: issuerCertificates[j]\n                            });\n                            break;\n                        }\n                    }\n                    catch (ex) {\n                    }\n                }\n            }\n            if (crlsAndCertificates.length) {\n                return {\n                    status: 0,\n                    statusMessage: EMPTY_STRING,\n                    result: crlsAndCertificates\n                };\n            }\n            return {\n                status: 3,\n                statusMessage: \"No valid CRLs found\"\n            };\n        };\n        const findOCSP = async (certificate, issuerCertificate) => {\n            const hashAlgorithm = crypto.getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\n            if (!hashAlgorithm.name) {\n                return 1;\n            }\n            if (!hashAlgorithm.hash) {\n                return 1;\n            }\n            for (let i = 0; i < this.ocsps.length; i++) {\n                const ocsp = this.ocsps[i];\n                const result = await ocsp.getCertificateStatus(certificate, issuerCertificate, crypto);\n                if (result.isForCertificate) {\n                    if (result.status === 0)\n                        return 0;\n                    return 1;\n                }\n            }\n            return 2;\n        };\n        async function checkForCA(certificate, needToCheckCRL = false) {\n            let isCA = false;\n            let mustBeCA = false;\n            let keyUsagePresent = false;\n            let cRLSign = false;\n            if (certificate.extensions) {\n                for (let j = 0; j < certificate.extensions.length; j++) {\n                    const extension = certificate.extensions[j];\n                    if (extension.critical && !extension.parsedValue) {\n                        return {\n                            result: false,\n                            resultCode: 6,\n                            resultMessage: `Unable to parse critical certificate extension: ${extension.extnID}`\n                        };\n                    }\n                    if (extension.extnID === id_KeyUsage) {\n                        keyUsagePresent = true;\n                        const view = new Uint8Array(extension.parsedValue.valueBlock.valueHex);\n                        if ((view[0] & 0x04) === 0x04)\n                            mustBeCA = true;\n                        if ((view[0] & 0x02) === 0x02)\n                            cRLSign = true;\n                    }\n                    if (extension.extnID === id_BasicConstraints) {\n                        if (\"cA\" in extension.parsedValue) {\n                            if (extension.parsedValue.cA === true)\n                                isCA = true;\n                        }\n                    }\n                }\n                if ((mustBeCA === true) && (isCA === false)) {\n                    return {\n                        result: false,\n                        resultCode: 3,\n                        resultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstraints\"\n                    };\n                }\n                if ((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false)) {\n                    return {\n                        result: false,\n                        resultCode: 4,\n                        resultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\n                    };\n                }\n                if ((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false))) {\n                    return {\n                        result: false,\n                        resultCode: 5,\n                        resultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\n                    };\n                }\n            }\n            if (isCA === false) {\n                return {\n                    result: false,\n                    resultCode: 7,\n                    resultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\n                };\n            }\n            return {\n                result: true,\n                resultCode: 0,\n                resultMessage: EMPTY_STRING\n            };\n        }\n        const basicCheck = async (path, checkDate) => {\n            for (let i = 0; i < path.length; i++) {\n                if ((path[i].notBefore.value > checkDate) ||\n                    (path[i].notAfter.value < checkDate)) {\n                    return {\n                        result: false,\n                        resultCode: 8,\n                        resultMessage: \"The certificate is either not yet valid or expired\"\n                    };\n                }\n            }\n            if (path.length < 2) {\n                return {\n                    result: false,\n                    resultCode: 9,\n                    resultMessage: \"Too short certificate path\"\n                };\n            }\n            for (let i = (path.length - 2); i >= 0; i--) {\n                if (path[i].issuer.isEqual(path[i].subject) === false) {\n                    if (path[i].issuer.isEqual(path[i + 1].subject) === false) {\n                        return {\n                            result: false,\n                            resultCode: 10,\n                            resultMessage: \"Incorrect name chaining\"\n                        };\n                    }\n                }\n            }\n            if ((this.crls.length !== 0) || (this.ocsps.length !== 0)) {\n                for (let i = 0; i < (path.length - 1); i++) {\n                    let ocspResult = 2;\n                    let crlResult = {\n                        status: 0,\n                        statusMessage: EMPTY_STRING\n                    };\n                    if (this.ocsps.length !== 0) {\n                        ocspResult = await findOCSP(path[i], path[i + 1]);\n                        switch (ocspResult) {\n                            case 0:\n                                continue;\n                            case 1:\n                                return {\n                                    result: false,\n                                    resultCode: 12,\n                                    resultMessage: \"One of certificates was revoked via OCSP response\"\n                                };\n                        }\n                    }\n                    if (this.crls.length !== 0) {\n                        crlResult = await findCRL(path[i]);\n                        if (crlResult.status === 0 && crlResult.result) {\n                            for (let j = 0; j < crlResult.result.length; j++) {\n                                const isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\n                                if (isCertificateRevoked) {\n                                    return {\n                                        result: false,\n                                        resultCode: 12,\n                                        resultMessage: \"One of certificates had been revoked\"\n                                    };\n                                }\n                                const isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\n                                if (isCertificateCA.result === false) {\n                                    return {\n                                        result: false,\n                                        resultCode: 13,\n                                        resultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\n                                    };\n                                }\n                            }\n                        }\n                        else {\n                            if (passedWhenNotRevValues === false) {\n                                throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);\n                            }\n                        }\n                    }\n                    else {\n                        if (ocspResult === 2) {\n                            return {\n                                result: false,\n                                resultCode: 11,\n                                resultMessage: \"No revocation values found for one of certificates\"\n                            };\n                        }\n                    }\n                    if ((ocspResult === 2) && (crlResult.status === 2) && passedWhenNotRevValues) {\n                        const issuerCertificate = path[i + 1];\n                        let extensionFound = false;\n                        if (issuerCertificate.extensions) {\n                            for (const extension of issuerCertificate.extensions) {\n                                switch (extension.extnID) {\n                                    case id_CRLDistributionPoints:\n                                    case id_FreshestCRL:\n                                    case id_AuthorityInfoAccess:\n                                        extensionFound = true;\n                                        break;\n                                }\n                            }\n                        }\n                        if (extensionFound) {\n                            throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);\n                        }\n                    }\n                }\n            }\n            for (const [i, cert] of path.entries()) {\n                if (!i) {\n                    continue;\n                }\n                const result = await checkForCA(cert);\n                if (!result.result) {\n                    return {\n                        result: false,\n                        resultCode: 14,\n                        resultMessage: \"One of intermediate certificates is not a CA certificate\"\n                    };\n                }\n            }\n            return {\n                result: true\n            };\n        };\n        localCerts.push(...this.trustedCerts);\n        localCerts.push(...this.certs);\n        for (let i = 0; i < localCerts.length; i++) {\n            for (let j = 0; j < localCerts.length; j++) {\n                if (i === j)\n                    continue;\n                if (pvtsutils.BufferSourceConverter.isEqual(localCerts[i].tbsView, localCerts[j].tbsView)) {\n                    localCerts.splice(j, 1);\n                    i = 0;\n                    break;\n                }\n            }\n        }\n        const leafCert = localCerts[localCerts.length - 1];\n        let result;\n        const certificatePath = [leafCert];\n        result = await buildPath(leafCert, crypto);\n        if (result.length === 0) {\n            throw new ChainValidationError(ChainValidationCode.noPath, \"Unable to find certificate path\");\n        }\n        for (let i = result.length - 1; i >= 0; i--) {\n            let found = false;\n            for (let j = 0; j < (result[i]).length; j++) {\n                const certificate = (result[i])[j];\n                for (let k = 0; k < this.trustedCerts.length; k++) {\n                    if (pvtsutils.BufferSourceConverter.isEqual(certificate.tbsView, this.trustedCerts[k].tbsView)) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (found)\n                    break;\n            }\n            if (!found) {\n                result.splice(i, 1);\n            }\n        }\n        if (result.length === 0) {\n            throw new ChainValidationError(ChainValidationCode.noValidPath, \"No valid certificate paths found\");\n        }\n        let shortestLength = result[0].length;\n        let shortestIndex = 0;\n        for (let i = 0; i < result.length; i++) {\n            if (result[i].length < shortestLength) {\n                shortestLength = result[i].length;\n                shortestIndex = i;\n            }\n        }\n        for (let i = 0; i < result[shortestIndex].length; i++)\n            certificatePath.push((result[shortestIndex])[i]);\n        result = await basicCheck(certificatePath, this.checkDate);\n        if (result.result === false)\n            throw result;\n        return certificatePath;\n    }\n    async verify(parameters = {}, crypto = getCrypto(true)) {\n        function compareDNSName(name, constraint) {\n            const namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const nameSplitted = namePrepared.split(\".\");\n            const constraintSplitted = constraintPrepared.split(\".\");\n            const nameLen = nameSplitted.length;\n            const constrLen = constraintSplitted.length;\n            if ((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen)) {\n                return false;\n            }\n            for (let i = 0; i < nameLen; i++) {\n                if (nameSplitted[i].length === 0) {\n                    return false;\n                }\n            }\n            for (let i = 0; i < constrLen; i++) {\n                if (constraintSplitted[i].length === 0) {\n                    if (i === 0) {\n                        if (constrLen === 1) {\n                            return false;\n                        }\n                        continue;\n                    }\n                    return false;\n                }\n            }\n            for (let i = 0; i < constrLen; i++) {\n                if (constraintSplitted[constrLen - 1 - i].length === 0) {\n                    continue;\n                }\n                if (nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function compareRFC822Name(name, constraint) {\n            const namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const nameSplitted = namePrepared.split(\"@\");\n            const constraintSplitted = constraintPrepared.split(\"@\");\n            if ((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\n                return false;\n            if (constraintSplitted.length === 1) {\n                const result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\n                if (result) {\n                    const ns = nameSplitted[1].split(\".\");\n                    const cs = constraintSplitted[0].split(\".\");\n                    if (cs[0].length === 0)\n                        return true;\n                    return ns.length === cs.length;\n                }\n                return false;\n            }\n            return (namePrepared.localeCompare(constraintPrepared) === 0);\n        }\n        function compareUniformResourceIdentifier(name, constraint) {\n            let namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const ns = namePrepared.split(\"/\");\n            const cs = constraintPrepared.split(\"/\");\n            if (cs.length > 1)\n                return false;\n            if (ns.length > 1) {\n                for (let i = 0; i < ns.length; i++) {\n                    if ((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\")) {\n                        const nsPort = ns[i].split(\":\");\n                        namePrepared = nsPort[0];\n                        break;\n                    }\n                }\n            }\n            const result = compareDNSName(namePrepared, constraintPrepared);\n            if (result) {\n                const nameSplitted = namePrepared.split(\".\");\n                const constraintSplitted = constraintPrepared.split(\".\");\n                if (constraintSplitted[0].length === 0)\n                    return true;\n                return nameSplitted.length === constraintSplitted.length;\n            }\n            return false;\n        }\n        function compareIPAddress(name, constraint) {\n            const nameView = name.valueBlock.valueHexView;\n            const constraintView = constraint.valueBlock.valueHexView;\n            if ((nameView.length === 4) && (constraintView.length === 8)) {\n                for (let i = 0; i < 4; i++) {\n                    if ((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\n                        return false;\n                }\n                return true;\n            }\n            if ((nameView.length === 16) && (constraintView.length === 32)) {\n                for (let i = 0; i < 16; i++) {\n                    if ((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\n                        return false;\n                }\n                return true;\n            }\n            return false;\n        }\n        function compareDirectoryName(name, constraint) {\n            if ((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\n                return true;\n            if (name.typesAndValues.length < constraint.typesAndValues.length)\n                return false;\n            let result = true;\n            let nameStart = 0;\n            for (let i = 0; i < constraint.typesAndValues.length; i++) {\n                let localResult = false;\n                for (let j = nameStart; j < name.typesAndValues.length; j++) {\n                    localResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\n                    if (name.typesAndValues[j].type === constraint.typesAndValues[i].type)\n                        result = result && localResult;\n                    if (localResult === true) {\n                        if ((nameStart === 0) || (nameStart === j)) {\n                            nameStart = j + 1;\n                            break;\n                        }\n                        else\n                            return false;\n                    }\n                }\n                if (localResult === false)\n                    return false;\n            }\n            return (nameStart === 0) ? false : result;\n        }\n        try {\n            if (this.certs.length === 0)\n                throw new Error(\"Empty certificate array\");\n            const passedWhenNotRevValues = parameters.passedWhenNotRevValues || false;\n            const initialPolicySet = parameters.initialPolicySet || [id_AnyPolicy];\n            const initialExplicitPolicy = parameters.initialExplicitPolicy || false;\n            const initialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit || false;\n            const initialInhibitPolicy = parameters.initialInhibitPolicy || false;\n            const initialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet || [];\n            const initialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet || [];\n            const initialRequiredNameForms = parameters.initialRequiredNameForms || [];\n            let explicitPolicyIndicator = initialExplicitPolicy;\n            let policyMappingInhibitIndicator = initialPolicyMappingInhibit;\n            let inhibitAnyPolicyIndicator = initialInhibitPolicy;\n            const pendingConstraints = [\n                false,\n                false,\n                false,\n            ];\n            let explicitPolicyPending = 0;\n            let policyMappingInhibitPending = 0;\n            let inhibitAnyPolicyPending = 0;\n            let permittedSubtrees = initialPermittedSubtreesSet;\n            let excludedSubtrees = initialExcludedSubtreesSet;\n            const requiredNameForms = initialRequiredNameForms;\n            let pathDepth = 1;\n            this.certs = await this.sort(passedWhenNotRevValues, crypto);\n            const allPolicies = [];\n            allPolicies.push(id_AnyPolicy);\n            const policiesAndCerts = [];\n            const anyPolicyArray = new Array(this.certs.length - 1);\n            for (let ii = 0; ii < (this.certs.length - 1); ii++)\n                anyPolicyArray[ii] = true;\n            policiesAndCerts.push(anyPolicyArray);\n            const policyMappings = new Array(this.certs.length - 1);\n            const certPolicies = new Array(this.certs.length - 1);\n            let explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\n            for (let i = (this.certs.length - 2); i >= 0; i--, pathDepth++) {\n                const cert = this.certs[i];\n                if (cert.extensions) {\n                    for (let j = 0; j < cert.extensions.length; j++) {\n                        const extension = cert.extensions[j];\n                        if (extension.extnID === id_CertificatePolicies) {\n                            certPolicies[i] = extension.parsedValue;\n                            for (let s = 0; s < allPolicies.length; s++) {\n                                if (allPolicies[s] === id_AnyPolicy) {\n                                    delete (policiesAndCerts[s])[i];\n                                    break;\n                                }\n                            }\n                            for (let k = 0; k < extension.parsedValue.certificatePolicies.length; k++) {\n                                let policyIndex = (-1);\n                                const policyId = extension.parsedValue.certificatePolicies[k].policyIdentifier;\n                                for (let s = 0; s < allPolicies.length; s++) {\n                                    if (policyId === allPolicies[s]) {\n                                        policyIndex = s;\n                                        break;\n                                    }\n                                }\n                                if (policyIndex === (-1)) {\n                                    allPolicies.push(policyId);\n                                    const certArray = new Array(this.certs.length - 1);\n                                    certArray[i] = true;\n                                    policiesAndCerts.push(certArray);\n                                }\n                                else\n                                    (policiesAndCerts[policyIndex])[i] = true;\n                            }\n                        }\n                        if (extension.extnID === id_PolicyMappings) {\n                            if (policyMappingInhibitIndicator) {\n                                return {\n                                    result: false,\n                                    resultCode: 98,\n                                    resultMessage: \"Policy mapping prohibited\"\n                                };\n                            }\n                            policyMappings[i] = extension.parsedValue;\n                        }\n                        if (extension.extnID === id_PolicyConstraints) {\n                            if (explicitPolicyIndicator === false) {\n                                if (extension.parsedValue.requireExplicitPolicy === 0) {\n                                    explicitPolicyIndicator = true;\n                                    explicitPolicyStart = i;\n                                }\n                                else {\n                                    if (pendingConstraints[0] === false) {\n                                        pendingConstraints[0] = true;\n                                        explicitPolicyPending = extension.parsedValue.requireExplicitPolicy;\n                                    }\n                                    else\n                                        explicitPolicyPending = (explicitPolicyPending > extension.parsedValue.requireExplicitPolicy) ? extension.parsedValue.requireExplicitPolicy : explicitPolicyPending;\n                                }\n                                if (extension.parsedValue.inhibitPolicyMapping === 0)\n                                    policyMappingInhibitIndicator = true;\n                                else {\n                                    if (pendingConstraints[1] === false) {\n                                        pendingConstraints[1] = true;\n                                        policyMappingInhibitPending = extension.parsedValue.inhibitPolicyMapping + 1;\n                                    }\n                                    else\n                                        policyMappingInhibitPending = (policyMappingInhibitPending > (extension.parsedValue.inhibitPolicyMapping + 1)) ? (extension.parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\n                                }\n                            }\n                        }\n                        if (extension.extnID === id_InhibitAnyPolicy) {\n                            if (inhibitAnyPolicyIndicator === false) {\n                                if (extension.parsedValue.valueBlock.valueDec === 0)\n                                    inhibitAnyPolicyIndicator = true;\n                                else {\n                                    if (pendingConstraints[2] === false) {\n                                        pendingConstraints[2] = true;\n                                        inhibitAnyPolicyPending = extension.parsedValue.valueBlock.valueDec;\n                                    }\n                                    else\n                                        inhibitAnyPolicyPending = (inhibitAnyPolicyPending > extension.parsedValue.valueBlock.valueDec) ? extension.parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\n                                }\n                            }\n                        }\n                    }\n                    if (inhibitAnyPolicyIndicator === true) {\n                        let policyIndex = (-1);\n                        for (let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++) {\n                            if (allPolicies[searchAnyPolicy] === id_AnyPolicy) {\n                                policyIndex = searchAnyPolicy;\n                                break;\n                            }\n                        }\n                        if (policyIndex !== (-1))\n                            delete (policiesAndCerts[0])[i];\n                    }\n                    if (explicitPolicyIndicator === false) {\n                        if (pendingConstraints[0] === true) {\n                            explicitPolicyPending--;\n                            if (explicitPolicyPending === 0) {\n                                explicitPolicyIndicator = true;\n                                explicitPolicyStart = i;\n                                pendingConstraints[0] = false;\n                            }\n                        }\n                    }\n                    if (policyMappingInhibitIndicator === false) {\n                        if (pendingConstraints[1] === true) {\n                            policyMappingInhibitPending--;\n                            if (policyMappingInhibitPending === 0) {\n                                policyMappingInhibitIndicator = true;\n                                pendingConstraints[1] = false;\n                            }\n                        }\n                    }\n                    if (inhibitAnyPolicyIndicator === false) {\n                        if (pendingConstraints[2] === true) {\n                            inhibitAnyPolicyPending--;\n                            if (inhibitAnyPolicyPending === 0) {\n                                inhibitAnyPolicyIndicator = true;\n                                pendingConstraints[2] = false;\n                            }\n                        }\n                    }\n                }\n            }\n            for (let i = 0; i < (this.certs.length - 1); i++) {\n                if ((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\")) {\n                    for (let k = 0; k < policyMappings[i + 1].mappings.length; k++) {\n                        if ((policyMappings[i + 1].mappings[k].issuerDomainPolicy === id_AnyPolicy) || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === id_AnyPolicy)) {\n                            return {\n                                result: false,\n                                resultCode: 99,\n                                resultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\n                            };\n                        }\n                        let issuerDomainPolicyIndex = (-1);\n                        let subjectDomainPolicyIndex = (-1);\n                        for (let n = 0; n < allPolicies.length; n++) {\n                            if (allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\n                                issuerDomainPolicyIndex = n;\n                            if (allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\n                                subjectDomainPolicyIndex = n;\n                        }\n                        if (typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\n                            delete (policiesAndCerts[issuerDomainPolicyIndex])[i];\n                        for (let j = 0; j < certPolicies[i].certificatePolicies.length; j++) {\n                            if (policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier) {\n                                if ((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1))) {\n                                    for (let m = 0; m <= i; m++) {\n                                        if (typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\") {\n                                            (policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\n                                            delete (policiesAndCerts[subjectDomainPolicyIndex])[m];\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            for (let i = 0; i < allPolicies.length; i++) {\n                if (allPolicies[i] === id_AnyPolicy) {\n                    for (let j = 0; j < explicitPolicyStart; j++)\n                        delete (policiesAndCerts[i])[j];\n                }\n            }\n            const authConstrPolicies = [];\n            for (let i = 0; i < policiesAndCerts.length; i++) {\n                let found = true;\n                for (let j = 0; j < (this.certs.length - 1); j++) {\n                    let anyPolicyFound = false;\n                    if ((j < explicitPolicyStart) && (allPolicies[i] === id_AnyPolicy) && (allPolicies.length > 1)) {\n                        found = false;\n                        break;\n                    }\n                    if (typeof (policiesAndCerts[i])[j] === \"undefined\") {\n                        if (j >= explicitPolicyStart) {\n                            for (let k = 0; k < allPolicies.length; k++) {\n                                if (allPolicies[k] === id_AnyPolicy) {\n                                    if ((policiesAndCerts[k])[j] === true)\n                                        anyPolicyFound = true;\n                                    break;\n                                }\n                            }\n                        }\n                        if (!anyPolicyFound) {\n                            found = false;\n                            break;\n                        }\n                    }\n                }\n                if (found === true)\n                    authConstrPolicies.push(allPolicies[i]);\n            }\n            let userConstrPolicies = [];\n            if ((initialPolicySet.length === 1) && (initialPolicySet[0] === id_AnyPolicy) && (explicitPolicyIndicator === false))\n                userConstrPolicies = initialPolicySet;\n            else {\n                if ((authConstrPolicies.length === 1) && (authConstrPolicies[0] === id_AnyPolicy))\n                    userConstrPolicies = initialPolicySet;\n                else {\n                    for (let i = 0; i < authConstrPolicies.length; i++) {\n                        for (let j = 0; j < initialPolicySet.length; j++) {\n                            if ((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === id_AnyPolicy)) {\n                                userConstrPolicies.push(authConstrPolicies[i]);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            const policyResult = {\n                result: (userConstrPolicies.length > 0),\n                resultCode: 0,\n                resultMessage: (userConstrPolicies.length > 0) ? EMPTY_STRING : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\n                authConstrPolicies,\n                userConstrPolicies,\n                explicitPolicyIndicator,\n                policyMappings,\n                certificatePath: this.certs\n            };\n            if (userConstrPolicies.length === 0)\n                return policyResult;\n            if (policyResult.result === false)\n                return policyResult;\n            pathDepth = 1;\n            for (let i = (this.certs.length - 2); i >= 0; i--, pathDepth++) {\n                const cert = this.certs[i];\n                let subjectAltNames = [];\n                let certPermittedSubtrees = [];\n                let certExcludedSubtrees = [];\n                if (cert.extensions) {\n                    for (let j = 0; j < cert.extensions.length; j++) {\n                        const extension = cert.extensions[j];\n                        if (extension.extnID === id_NameConstraints) {\n                            if (\"permittedSubtrees\" in extension.parsedValue)\n                                certPermittedSubtrees = certPermittedSubtrees.concat(extension.parsedValue.permittedSubtrees);\n                            if (\"excludedSubtrees\" in extension.parsedValue)\n                                certExcludedSubtrees = certExcludedSubtrees.concat(extension.parsedValue.excludedSubtrees);\n                        }\n                        if (extension.extnID === id_SubjectAltName)\n                            subjectAltNames = subjectAltNames.concat(extension.parsedValue.altNames);\n                    }\n                }\n                let formFound = (requiredNameForms.length <= 0);\n                for (let j = 0; j < requiredNameForms.length; j++) {\n                    switch (requiredNameForms[j].base.type) {\n                        case 4:\n                            {\n                                if (requiredNameForms[j].base.value.typesAndValues.length !== cert.subject.typesAndValues.length)\n                                    continue;\n                                formFound = true;\n                                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                    if (cert.subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type) {\n                                        formFound = false;\n                                        break;\n                                    }\n                                }\n                                if (formFound === true)\n                                    break;\n                            }\n                            break;\n                        default:\n                    }\n                }\n                if (formFound === false) {\n                    policyResult.result = false;\n                    policyResult.resultCode = 21;\n                    policyResult.resultMessage = \"No necessary name form found\";\n                    throw policyResult;\n                }\n                const constrGroups = [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                ];\n                for (let j = 0; j < permittedSubtrees.length; j++) {\n                    switch (permittedSubtrees[j].base.type) {\n                        case 1:\n                            constrGroups[0].push(permittedSubtrees[j]);\n                            break;\n                        case 2:\n                            constrGroups[1].push(permittedSubtrees[j]);\n                            break;\n                        case 4:\n                            constrGroups[2].push(permittedSubtrees[j]);\n                            break;\n                        case 6:\n                            constrGroups[3].push(permittedSubtrees[j]);\n                            break;\n                        case 7:\n                            constrGroups[4].push(permittedSubtrees[j]);\n                            break;\n                        default:\n                    }\n                }\n                for (let p = 0; p < 5; p++) {\n                    let groupPermitted = false;\n                    let valueExists = false;\n                    const group = constrGroups[p];\n                    for (let j = 0; j < group.length; j++) {\n                        switch (p) {\n                            case 0:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 1) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                else {\n                                    for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                        if ((cert.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||\n                                            (cert.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 1:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 2) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 2:\n                                valueExists = true;\n                                groupPermitted = compareDirectoryName(cert.subject, group[j].base.value);\n                                break;\n                            case 3:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 6) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 4:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 7) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            default:\n                        }\n                        if (groupPermitted)\n                            break;\n                    }\n                    if ((groupPermitted === false) && (group.length > 0) && valueExists) {\n                        policyResult.result = false;\n                        policyResult.resultCode = 41;\n                        policyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\n                        throw policyResult;\n                    }\n                }\n                let excluded = false;\n                for (let j = 0; j < excludedSubtrees.length; j++) {\n                    switch (excludedSubtrees[j].base.type) {\n                        case 1:\n                            if (subjectAltNames.length >= 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 1)\n                                        excluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            else {\n                                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                    if ((cert.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||\n                                        (cert.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\"))\n                                        excluded = excluded || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 2:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 2)\n                                        excluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 4:\n                            excluded = excluded || compareDirectoryName(cert.subject, excludedSubtrees[j].base.value);\n                            break;\n                        case 6:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 6)\n                                        excluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 7:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 7)\n                                        excluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        default:\n                    }\n                    if (excluded)\n                        break;\n                }\n                if (excluded === true) {\n                    policyResult.result = false;\n                    policyResult.resultCode = 42;\n                    policyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\n                    throw policyResult;\n                }\n                permittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\n                excludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\n            }\n            return policyResult;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                if (error instanceof ChainValidationError) {\n                    return {\n                        result: false,\n                        resultCode: error.code,\n                        resultMessage: error.message,\n                        error: error,\n                    };\n                }\n                return {\n                    result: false,\n                    resultCode: ChainValidationCode.unknown,\n                    resultMessage: error.message,\n                    error: error,\n                };\n            }\n            if (error && typeof error === \"object\" && \"resultMessage\" in error) {\n                return error;\n            }\n            return {\n                result: false,\n                resultCode: -1,\n                resultMessage: `${error}`,\n            };\n        }\n    }\n}\n\nconst TBS_RESPONSE_DATA = \"tbsResponseData\";\nconst SIGNATURE_ALGORITHM$3 = \"signatureAlgorithm\";\nconst SIGNATURE$2 = \"signature\";\nconst CERTS$1 = \"certs\";\nconst BASIC_OCSP_RESPONSE = \"BasicOCSPResponse\";\nconst BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA = `${BASIC_OCSP_RESPONSE}.${TBS_RESPONSE_DATA}`;\nconst BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM = `${BASIC_OCSP_RESPONSE}.${SIGNATURE_ALGORITHM$3}`;\nconst BASIC_OCSP_RESPONSE_SIGNATURE = `${BASIC_OCSP_RESPONSE}.${SIGNATURE$2}`;\nconst BASIC_OCSP_RESPONSE_CERTS = `${BASIC_OCSP_RESPONSE}.${CERTS$1}`;\nconst CLEAR_PROPS$g = [\n    BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA,\n    BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM,\n    BASIC_OCSP_RESPONSE_SIGNATURE,\n    BASIC_OCSP_RESPONSE_CERTS\n];\nclass BasicOCSPResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.tbsResponseData = pvutils.getParametersValue(parameters, TBS_RESPONSE_DATA, BasicOCSPResponse.defaultValues(TBS_RESPONSE_DATA));\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$3, BasicOCSPResponse.defaultValues(SIGNATURE_ALGORITHM$3));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$2, BasicOCSPResponse.defaultValues(SIGNATURE$2));\n        if (CERTS$1 in parameters) {\n            this.certs = pvutils.getParametersValue(parameters, CERTS$1, BasicOCSPResponse.defaultValues(CERTS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS_RESPONSE_DATA:\n                return new ResponseData();\n            case SIGNATURE_ALGORITHM$3:\n                return new AlgorithmIdentifier();\n            case SIGNATURE$2:\n                return new asn1js.BitString();\n            case CERTS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case \"type\":\n                {\n                    let comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\n                        (ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\n                        (ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\n                        (ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\n                    if (\"responseExtensions\" in memberValue)\n                        comparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\n                    return comparisonResult;\n                }\n            case SIGNATURE_ALGORITHM$3:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case SIGNATURE$2:\n                return (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\n            case CERTS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || BASIC_OCSP_RESPONSE),\n            value: [\n                ResponseData.schema(names.tbsResponseData || {\n                    names: {\n                        blockName: BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM\n                    }\n                }),\n                new asn1js.BitString({ name: (names.signature || BASIC_OCSP_RESPONSE_SIGNATURE) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Sequence({\n                            value: [new asn1js.Repeated({\n                                    name: BASIC_OCSP_RESPONSE_CERTS,\n                                    value: Certificate.schema(names.certs || {})\n                                })]\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$g);\n        const asn1 = asn1js.compareSchema(schema, schema, BasicOCSPResponse.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsResponseData = new ResponseData({ schema: asn1.result[BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA] });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM] });\n        this.signature = asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE];\n        if (BASIC_OCSP_RESPONSE_CERTS in asn1.result) {\n            this.certs = Array.from(asn1.result[BASIC_OCSP_RESPONSE_CERTS], element => new Certificate({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.tbsResponseData.toSchema());\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.certs) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Sequence({\n                        value: Array.from(this.certs, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbsResponseData: this.tbsResponseData.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (this.certs) {\n            res.certs = Array.from(this.certs, o => o.toJSON());\n        }\n        return res;\n    }\n    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {\n        const result = {\n            isForCertificate: false,\n            status: 2\n        };\n        const hashesObject = {};\n        const certIDs = [];\n        for (const response of this.tbsResponseData.responses) {\n            const hashAlgorithm = crypto.getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId, true, \"CertID.hashAlgorithm\");\n            if (!hashesObject[hashAlgorithm.name]) {\n                hashesObject[hashAlgorithm.name] = 1;\n                const certID = new CertID();\n                certIDs.push(certID);\n                await certID.createForCertificate(certificate, {\n                    hashAlgorithm: hashAlgorithm.name,\n                    issuerCertificate\n                }, crypto);\n            }\n        }\n        for (const response of this.tbsResponseData.responses) {\n            for (const id of certIDs) {\n                if (response.certID.isEqual(id)) {\n                    result.isForCertificate = true;\n                    try {\n                        switch (response.certStatus.idBlock.isConstructed) {\n                            case true:\n                                if (response.certStatus.idBlock.tagNumber === 1)\n                                    result.status = 1;\n                                break;\n                            case false:\n                                switch (response.certStatus.idBlock.tagNumber) {\n                                    case 0:\n                                        result.status = 0;\n                                        break;\n                                    case 2:\n                                        result.status = 2;\n                                        break;\n                                    default:\n                                }\n                                break;\n                            default:\n                        }\n                    }\n                    catch (ex) {\n                    }\n                    return result;\n                }\n            }\n        }\n        return result;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const algorithm = signatureParams.parameters.algorithm;\n        if (!(\"name\" in algorithm)) {\n            throw new Error(\"Empty algorithm\");\n        }\n        this.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        this.tbsResponseData.tbsView = new Uint8Array(this.tbsResponseData.toSchema(true).toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsResponseData.tbsView, privateKey, { algorithm });\n        this.signature = new asn1js.BitString({ valueHex: signature });\n    }\n    async verify(params = {}, crypto = getCrypto(true)) {\n        let signerCert = null;\n        let certIndex = -1;\n        const trustedCerts = params.trustedCerts || [];\n        if (!this.certs) {\n            throw new Error(\"No certificates attached to the BasicOCSPResponse\");\n        }\n        switch (true) {\n            case (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames):\n                for (const [index, certificate] of this.certs.entries()) {\n                    if (certificate.subject.isEqual(this.tbsResponseData.responderID)) {\n                        certIndex = index;\n                        break;\n                    }\n                }\n                break;\n            case (this.tbsResponseData.responderID instanceof asn1js.OctetString):\n                for (const [index, cert] of this.certs.entries()) {\n                    const hash = await crypto.digest({ name: \"sha-1\" }, cert.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n                    if (pvutils.isEqualBuffer(hash, this.tbsResponseData.responderID.valueBlock.valueHex)) {\n                        certIndex = index;\n                        break;\n                    }\n                }\n                break;\n            default:\n                throw new Error(\"Wrong value for responderID\");\n        }\n        if (certIndex === (-1))\n            throw new Error(\"Correct certificate was not found in OCSP response\");\n        signerCert = this.certs[certIndex];\n        const additionalCerts = [signerCert];\n        for (const cert of this.certs) {\n            const caCert = await checkCA(cert, signerCert);\n            if (caCert) {\n                additionalCerts.push(caCert);\n            }\n        }\n        const certChain = new CertificateChainValidationEngine({\n            certs: additionalCerts,\n            trustedCerts,\n        });\n        const verificationResult = await certChain.verify({}, crypto);\n        if (!verificationResult.result) {\n            throw new Error(\"Validation of signer's certificate failed\");\n        }\n        return crypto.verifyWithPublicKey(this.tbsResponseData.tbsView, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nBasicOCSPResponse.CLASS_NAME = \"BasicOCSPResponse\";\n\nconst TBS$1 = \"tbs\";\nconst VERSION$6 = \"version\";\nconst SUBJECT = \"subject\";\nconst SPKI = \"subjectPublicKeyInfo\";\nconst ATTRIBUTES$1 = \"attributes\";\nconst SIGNATURE_ALGORITHM$2 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE = \"signatureValue\";\nconst CSR_INFO = \"CertificationRequestInfo\";\nconst CSR_INFO_VERSION = `${CSR_INFO}.version`;\nconst CSR_INFO_SUBJECT = `${CSR_INFO}.subject`;\nconst CSR_INFO_SPKI = `${CSR_INFO}.subjectPublicKeyInfo`;\nconst CSR_INFO_ATTRS = `${CSR_INFO}.attributes`;\nconst CLEAR_PROPS$f = [\n    CSR_INFO,\n    CSR_INFO_VERSION,\n    CSR_INFO_SUBJECT,\n    CSR_INFO_SPKI,\n    CSR_INFO_ATTRS,\n    SIGNATURE_ALGORITHM$2,\n    SIGNATURE_VALUE\n];\nfunction CertificationRequestInfo(parameters = {}) {\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\n    return (new asn1js.Sequence({\n        name: (names.CertificationRequestInfo || CSR_INFO),\n        value: [\n            new asn1js.Integer({ name: (names.CertificationRequestInfoVersion || CSR_INFO_VERSION) }),\n            RelativeDistinguishedNames.schema(names.subject || {\n                names: {\n                    blockName: CSR_INFO_SUBJECT\n                }\n            }),\n            PublicKeyInfo.schema({\n                names: {\n                    blockName: CSR_INFO_SPKI\n                }\n            }),\n            new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Repeated({\n                        optional: true,\n                        name: (names.CertificationRequestInfoAttributes || CSR_INFO_ATTRS),\n                        value: Attribute.schema(names.attributes || {})\n                    })\n                ]\n            })\n        ]\n    }));\n}\nclass CertificationRequest extends PkiObject {\n    get tbs() {\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$1, CertificationRequest.defaultValues(TBS$1)));\n        this.version = pvutils.getParametersValue(parameters, VERSION$6, CertificationRequest.defaultValues(VERSION$6));\n        this.subject = pvutils.getParametersValue(parameters, SUBJECT, CertificationRequest.defaultValues(SUBJECT));\n        this.subjectPublicKeyInfo = pvutils.getParametersValue(parameters, SPKI, CertificationRequest.defaultValues(SPKI));\n        if (ATTRIBUTES$1 in parameters) {\n            this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$1, CertificationRequest.defaultValues(ATTRIBUTES$1));\n        }\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$2, CertificationRequest.defaultValues(SIGNATURE_ALGORITHM$2));\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE, CertificationRequest.defaultValues(SIGNATURE_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$1:\n                return EMPTY_BUFFER;\n            case VERSION$6:\n                return 0;\n            case SUBJECT:\n                return new RelativeDistinguishedNames();\n            case SPKI:\n                return new PublicKeyInfo();\n            case ATTRIBUTES$1:\n                return [];\n            case SIGNATURE_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            value: [\n                CertificationRequestInfo(names.certificationRequestInfo || {}),\n                new asn1js.Sequence({\n                    name: (names.signatureAlgorithm || SIGNATURE_ALGORITHM$2),\n                    value: [\n                        new asn1js.ObjectIdentifier(),\n                        new asn1js.Any({ optional: true })\n                    ]\n                }),\n                new asn1js.BitString({ name: (names.signatureValue || SIGNATURE_VALUE) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$f);\n        const asn1 = asn1js.compareSchema(schema, schema, CertificationRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.CertificationRequestInfo.valueBeforeDecodeView;\n        this.version = asn1.result[CSR_INFO_VERSION].valueBlock.valueDec;\n        this.subject = new RelativeDistinguishedNames({ schema: asn1.result[CSR_INFO_SUBJECT] });\n        this.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[CSR_INFO_SPKI] });\n        if (CSR_INFO_ATTRS in asn1.result) {\n            this.attributes = Array.from(asn1.result[CSR_INFO_ATTRS], element => new Attribute({ schema: element }));\n        }\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [\n            new asn1js.Integer({ value: this.version }),\n            this.subject.toSchema(),\n            this.subjectPublicKeyInfo.toSchema()\n        ];\n        if (ATTRIBUTES$1 in this) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.attributes || [], o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (this.tbsView.byteLength === 0) {\n                return CertificationRequest.schema();\n            }\n            const asn1 = asn1js.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"PKCS#10 Certificate Request\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const object = {\n            tbs: pvtsutils.Convert.ToHex(this.tbsView),\n            version: this.version,\n            subject: this.subject.toJSON(),\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n        if (ATTRIBUTES$1 in this) {\n            object.attributes = Array.from(this.attributes || [], o => o.toJSON());\n        }\n        return object;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        this.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js.BitString({ valueHex: signature });\n    }\n    async verify(crypto = getCrypto(true)) {\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n    async getPublicKey(parameters, crypto = getCrypto(true)) {\n        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n    }\n}\nCertificationRequest.CLASS_NAME = \"CertificationRequest\";\n\nconst DIGEST_ALGORITHM$1 = \"digestAlgorithm\";\nconst DIGEST = \"digest\";\nconst CLEAR_PROPS$e = [\n    DIGEST_ALGORITHM$1,\n    DIGEST\n];\nclass DigestInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.digestAlgorithm = pvutils.getParametersValue(parameters, DIGEST_ALGORITHM$1, DigestInfo.defaultValues(DIGEST_ALGORITHM$1));\n        this.digest = pvutils.getParametersValue(parameters, DIGEST, DigestInfo.defaultValues(DIGEST));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DIGEST_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case DIGEST:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case DIGEST_ALGORITHM$1:\n                return ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\n                    ((\"algorithmParams\" in memberValue) === false));\n            case DIGEST:\n                return (memberValue.isEqual(DigestInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$1\n                    }\n                }),\n                new asn1js.OctetString({ name: (names.digest || DIGEST) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$e);\n        const asn1 = asn1js.compareSchema(schema, schema, DigestInfo.schema({\n            names: {\n                digestAlgorithm: {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$1\n                    }\n                },\n                digest: DIGEST\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n        this.digest = asn1.result.digest;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.digestAlgorithm.toSchema(),\n                this.digest\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            digest: this.digest.toJSON(),\n        };\n    }\n}\nDigestInfo.CLASS_NAME = \"DigestInfo\";\n\nconst E_CONTENT_TYPE = \"eContentType\";\nconst E_CONTENT = \"eContent\";\nconst CLEAR_PROPS$d = [\n    E_CONTENT_TYPE,\n    E_CONTENT,\n];\nclass EncapsulatedContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.eContentType = pvutils.getParametersValue(parameters, E_CONTENT_TYPE, EncapsulatedContentInfo.defaultValues(E_CONTENT_TYPE));\n        if (E_CONTENT in parameters) {\n            this.eContent = pvutils.getParametersValue(parameters, E_CONTENT, EncapsulatedContentInfo.defaultValues(E_CONTENT));\n            if ((this.eContent.idBlock.tagClass === 1) &&\n                (this.eContent.idBlock.tagNumber === 4)) {\n                if (this.eContent.idBlock.isConstructed === false) {\n                    const constrString = new asn1js.OctetString({\n                        idBlock: { isConstructed: true },\n                        isConstructed: true\n                    });\n                    let offset = 0;\n                    const viewHex = this.eContent.valueBlock.valueHexView.slice().buffer;\n                    let length = viewHex.byteLength;\n                    while (length > 0) {\n                        const pieceView = new Uint8Array(viewHex, offset, ((offset + 65536) > viewHex.byteLength) ? (viewHex.byteLength - offset) : 65536);\n                        const _array = new ArrayBuffer(pieceView.length);\n                        const _view = new Uint8Array(_array);\n                        for (let i = 0; i < _view.length; i++) {\n                            _view[i] = pieceView[i];\n                        }\n                        constrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\n                        length -= pieceView.length;\n                        offset += pieceView.length;\n                    }\n                    this.eContent = constrString;\n                }\n            }\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case E_CONTENT_TYPE:\n                return EMPTY_STRING;\n            case E_CONTENT:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case E_CONTENT_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case E_CONTENT:\n                {\n                    if ((memberValue.idBlock.tagClass === 1) && (memberValue.idBlock.tagNumber === 4))\n                        return (memberValue.isEqual(EncapsulatedContentInfo.defaultValues(E_CONTENT)));\n                    return false;\n                }\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.eContentType || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Any({ name: (names.eContent || EMPTY_STRING) })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$d);\n        const asn1 = asn1js.compareSchema(schema, schema, EncapsulatedContentInfo.schema({\n            names: {\n                eContentType: E_CONTENT_TYPE,\n                eContent: E_CONTENT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.eContentType = asn1.result.eContentType.valueBlock.toString();\n        if (E_CONTENT in asn1.result)\n            this.eContent = asn1.result.eContent;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.eContentType }));\n        if (this.eContent) {\n            if (EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {\n                outputArray.push(new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.eContent]\n                }));\n            }\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            eContentType: this.eContentType\n        };\n        if (this.eContent && EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {\n            res.eContent = this.eContent.toJSON();\n        }\n        return res;\n    }\n}\nEncapsulatedContentInfo.CLASS_NAME = \"EncapsulatedContentInfo\";\n\nclass KeyBag extends PrivateKeyInfo {\n    constructor(parameters = {}) {\n        super(parameters);\n    }\n}\n\nconst MAC = \"mac\";\nconst MAC_SALT = \"macSalt\";\nconst ITERATIONS = \"iterations\";\nconst CLEAR_PROPS$c = [\n    MAC,\n    MAC_SALT,\n    ITERATIONS\n];\nclass MacData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.mac = pvutils.getParametersValue(parameters, MAC, MacData.defaultValues(MAC));\n        this.macSalt = pvutils.getParametersValue(parameters, MAC_SALT, MacData.defaultValues(MAC_SALT));\n        if (ITERATIONS in parameters) {\n            this.iterations = pvutils.getParametersValue(parameters, ITERATIONS, MacData.defaultValues(ITERATIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MAC:\n                return new DigestInfo();\n            case MAC_SALT:\n                return new asn1js.OctetString();\n            case ITERATIONS:\n                return 1;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case MAC:\n                return ((DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm)) &&\n                    (DigestInfo.compareWithDefault(\"digest\", memberValue.digest)));\n            case MAC_SALT:\n                return (memberValue.isEqual(MacData.defaultValues(memberName)));\n            case ITERATIONS:\n                return (memberValue === MacData.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: (names.optional || true),\n            value: [\n                DigestInfo.schema(names.mac || {\n                    names: {\n                        blockName: MAC\n                    }\n                }),\n                new asn1js.OctetString({ name: (names.macSalt || MAC_SALT) }),\n                new asn1js.Integer({\n                    optional: true,\n                    name: (names.iterations || ITERATIONS)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$c);\n        const asn1 = asn1js.compareSchema(schema, schema, MacData.schema({\n            names: {\n                mac: {\n                    names: {\n                        blockName: MAC\n                    }\n                },\n                macSalt: MAC_SALT,\n                iterations: ITERATIONS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.mac = new DigestInfo({ schema: asn1.result.mac });\n        this.macSalt = asn1.result.macSalt;\n        if (ITERATIONS in asn1.result)\n            this.iterations = asn1.result.iterations.valueBlock.valueDec;\n    }\n    toSchema() {\n        const outputArray = [\n            this.mac.toSchema(),\n            this.macSalt\n        ];\n        if (this.iterations !== undefined) {\n            outputArray.push(new asn1js.Integer({ value: this.iterations }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            mac: this.mac.toJSON(),\n            macSalt: this.macSalt.toJSON(),\n        };\n        if (this.iterations !== undefined) {\n            res.iterations = this.iterations;\n        }\n        return res;\n    }\n}\nMacData.CLASS_NAME = \"MacData\";\n\nconst HASH_ALGORITHM = \"hashAlgorithm\";\nconst HASHED_MESSAGE = \"hashedMessage\";\nconst CLEAR_PROPS$b = [\n    HASH_ALGORITHM,\n    HASHED_MESSAGE,\n];\nclass MessageImprint extends PkiObject {\n    static async create(hashAlgorithm, message, crypto = getCrypto(true)) {\n        const hashAlgorithmOID = crypto.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        const hashedMessage = await crypto.digest(hashAlgorithm, message);\n        const res = new MessageImprint({\n            hashAlgorithm: new AlgorithmIdentifier({\n                algorithmId: hashAlgorithmOID,\n                algorithmParams: new asn1js.Null(),\n            }),\n            hashedMessage: new asn1js.OctetString({ valueHex: hashedMessage })\n        });\n        return res;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM, MessageImprint.defaultValues(HASH_ALGORITHM));\n        this.hashedMessage = pvutils.getParametersValue(parameters, HASHED_MESSAGE, MessageImprint.defaultValues(HASHED_MESSAGE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case HASHED_MESSAGE:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case HASH_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case HASHED_MESSAGE:\n                return (memberValue.isEqual(MessageImprint.defaultValues(memberName)) === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.hashAlgorithm || {}),\n                new asn1js.OctetString({ name: (names.hashedMessage || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$b);\n        const asn1 = asn1js.compareSchema(schema, schema, MessageImprint.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM\n                    }\n                },\n                hashedMessage: HASHED_MESSAGE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        this.hashedMessage = asn1.result.hashedMessage;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                this.hashAlgorithm.toSchema(),\n                this.hashedMessage\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            hashAlgorithm: this.hashAlgorithm.toJSON(),\n            hashedMessage: this.hashedMessage.toJSON(),\n        };\n    }\n}\nMessageImprint.CLASS_NAME = \"MessageImprint\";\n\nconst REQ_CERT = \"reqCert\";\nconst SINGLE_REQUEST_EXTENSIONS = \"singleRequestExtensions\";\nconst CLEAR_PROPS$a = [\n    REQ_CERT,\n    SINGLE_REQUEST_EXTENSIONS,\n];\nclass Request extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.reqCert = pvutils.getParametersValue(parameters, REQ_CERT, Request.defaultValues(REQ_CERT));\n        if (SINGLE_REQUEST_EXTENSIONS in parameters) {\n            this.singleRequestExtensions = pvutils.getParametersValue(parameters, SINGLE_REQUEST_EXTENSIONS, Request.defaultValues(SINGLE_REQUEST_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case REQ_CERT:\n                return new CertID();\n            case SINGLE_REQUEST_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case REQ_CERT:\n                return (memberValue.isEqual(Request.defaultValues(memberName)));\n            case SINGLE_REQUEST_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                CertID.schema(names.reqCert || {}),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [Extension.schema(names.extensions || {\n                            names: {\n                                blockName: (names.singleRequestExtensions || EMPTY_STRING)\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$a);\n        const asn1 = asn1js.compareSchema(schema, schema, Request.schema({\n            names: {\n                reqCert: {\n                    names: {\n                        blockName: REQ_CERT\n                    }\n                },\n                extensions: {\n                    names: {\n                        blockName: SINGLE_REQUEST_EXTENSIONS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.reqCert = new CertID({ schema: asn1.result.reqCert });\n        if (SINGLE_REQUEST_EXTENSIONS in asn1.result) {\n            this.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.reqCert.toSchema());\n        if (this.singleRequestExtensions) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Sequence({\n                        value: Array.from(this.singleRequestExtensions, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            reqCert: this.reqCert.toJSON()\n        };\n        if (this.singleRequestExtensions) {\n            res.singleRequestExtensions = Array.from(this.singleRequestExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nRequest.CLASS_NAME = \"Request\";\n\nconst TBS = \"tbs\";\nconst VERSION$5 = \"version\";\nconst REQUESTOR_NAME = \"requestorName\";\nconst REQUEST_LIST = \"requestList\";\nconst REQUEST_EXTENSIONS = \"requestExtensions\";\nconst TBS_REQUEST$1 = \"TBSRequest\";\nconst TBS_REQUEST_VERSION = `${TBS_REQUEST$1}.${VERSION$5}`;\nconst TBS_REQUEST_REQUESTOR_NAME = `${TBS_REQUEST$1}.${REQUESTOR_NAME}`;\nconst TBS_REQUEST_REQUESTS = `${TBS_REQUEST$1}.requests`;\nconst TBS_REQUEST_REQUEST_EXTENSIONS = `${TBS_REQUEST$1}.${REQUEST_EXTENSIONS}`;\nconst CLEAR_PROPS$9 = [\n    TBS_REQUEST$1,\n    TBS_REQUEST_VERSION,\n    TBS_REQUEST_REQUESTOR_NAME,\n    TBS_REQUEST_REQUESTS,\n    TBS_REQUEST_REQUEST_EXTENSIONS\n];\nclass TBSRequest extends PkiObject {\n    get tbs() {\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS, TBSRequest.defaultValues(TBS)));\n        if (VERSION$5 in parameters) {\n            this.version = pvutils.getParametersValue(parameters, VERSION$5, TBSRequest.defaultValues(VERSION$5));\n        }\n        if (REQUESTOR_NAME in parameters) {\n            this.requestorName = pvutils.getParametersValue(parameters, REQUESTOR_NAME, TBSRequest.defaultValues(REQUESTOR_NAME));\n        }\n        this.requestList = pvutils.getParametersValue(parameters, REQUEST_LIST, TBSRequest.defaultValues(REQUEST_LIST));\n        if (REQUEST_EXTENSIONS in parameters) {\n            this.requestExtensions = pvutils.getParametersValue(parameters, REQUEST_EXTENSIONS, TBSRequest.defaultValues(REQUEST_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS:\n                return EMPTY_BUFFER;\n            case VERSION$5:\n                return 0;\n            case REQUESTOR_NAME:\n                return new GeneralName();\n            case REQUEST_LIST:\n            case REQUEST_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS:\n                return (memberValue.byteLength === 0);\n            case VERSION$5:\n                return (memberValue === TBSRequest.defaultValues(memberName));\n            case REQUESTOR_NAME:\n                return ((memberValue.type === GeneralName.defaultValues(\"type\")) && (Object.keys(memberValue.value).length === 0));\n            case REQUEST_LIST:\n            case REQUEST_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || TBS_REQUEST$1),\n            value: [\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Integer({ name: (names.TBSRequestVersion || TBS_REQUEST_VERSION) })]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [GeneralName.schema(names.requestorName || {\n                            names: {\n                                blockName: TBS_REQUEST_REQUESTOR_NAME\n                            }\n                        })]\n                }),\n                new asn1js.Sequence({\n                    name: (names.requestList || \"TBSRequest.requestList\"),\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.requests || TBS_REQUEST_REQUESTS),\n                            value: Request.schema(names.requestNames || {})\n                        })\n                    ]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [Extensions.schema(names.extensions || {\n                            names: {\n                                blockName: (names.requestExtensions || TBS_REQUEST_REQUEST_EXTENSIONS)\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$9);\n        const asn1 = asn1js.compareSchema(schema, schema, TBSRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.TBSRequest.valueBeforeDecodeView;\n        if (TBS_REQUEST_VERSION in asn1.result)\n            this.version = asn1.result[TBS_REQUEST_VERSION].valueBlock.valueDec;\n        if (TBS_REQUEST_REQUESTOR_NAME in asn1.result)\n            this.requestorName = new GeneralName({ schema: asn1.result[TBS_REQUEST_REQUESTOR_NAME] });\n        this.requestList = Array.from(asn1.result[TBS_REQUEST_REQUESTS], element => new Request({ schema: element }));\n        if (TBS_REQUEST_REQUEST_EXTENSIONS in asn1.result)\n            this.requestExtensions = Array.from(asn1.result[TBS_REQUEST_REQUEST_EXTENSIONS].valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (this.tbsView.byteLength === 0)\n                return TBSRequest.schema();\n            const asn1 = asn1js.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Request\");\n            if (!(asn1.result instanceof asn1js.Sequence)) {\n                throw new Error(\"ASN.1 result should be SEQUENCE\");\n            }\n            tbsSchema = asn1.result;\n        }\n        else {\n            const outputArray = [];\n            if (this.version !== undefined) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Integer({ value: this.version })]\n                }));\n            }\n            if (this.requestorName) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.requestorName.toSchema()]\n                }));\n            }\n            outputArray.push(new asn1js.Sequence({\n                value: Array.from(this.requestList, o => o.toSchema())\n            }));\n            if (this.requestExtensions) {\n                outputArray.push(new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [\n                        new asn1js.Sequence({\n                            value: Array.from(this.requestExtensions, o => o.toSchema())\n                        })\n                    ]\n                }));\n            }\n            tbsSchema = new asn1js.Sequence({\n                value: outputArray\n            });\n        }\n        return tbsSchema;\n    }\n    toJSON() {\n        const res = {};\n        if (this.version != undefined)\n            res.version = this.version;\n        if (this.requestorName) {\n            res.requestorName = this.requestorName.toJSON();\n        }\n        res.requestList = Array.from(this.requestList, o => o.toJSON());\n        if (this.requestExtensions) {\n            res.requestExtensions = Array.from(this.requestExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nTBSRequest.CLASS_NAME = \"TBSRequest\";\n\nconst SIGNATURE_ALGORITHM$1 = \"signatureAlgorithm\";\nconst SIGNATURE$1 = \"signature\";\nconst CERTS = \"certs\";\nclass Signature extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$1, Signature.defaultValues(SIGNATURE_ALGORITHM$1));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$1, Signature.defaultValues(SIGNATURE$1));\n        if (CERTS in parameters) {\n            this.certs = pvutils.getParametersValue(parameters, CERTS, Signature.defaultValues(CERTS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SIGNATURE_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case SIGNATURE$1:\n                return new asn1js.BitString();\n            case CERTS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SIGNATURE_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case SIGNATURE$1:\n                return (memberValue.isEqual(Signature.defaultValues(memberName)));\n            case CERTS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js.BitString({ name: (names.signature || EMPTY_STRING) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js.Sequence({\n                            value: [new asn1js.Repeated({\n                                    name: (names.certs || EMPTY_STRING),\n                                    value: Certificate.schema({})\n                                })]\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            SIGNATURE_ALGORITHM$1,\n            SIGNATURE$1,\n            CERTS\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, Signature.schema({\n            names: {\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$1\n                    }\n                },\n                signature: SIGNATURE$1,\n                certs: CERTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signature = asn1.result.signature;\n        if (CERTS in asn1.result)\n            this.certs = Array.from(asn1.result.certs, element => new Certificate({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.certs) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js.Sequence({\n                        value: Array.from(this.certs, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (this.certs) {\n            res.certs = Array.from(this.certs, o => o.toJSON());\n        }\n        return res;\n    }\n}\nSignature.CLASS_NAME = \"Signature\";\n\nconst TBS_REQUEST = \"tbsRequest\";\nconst OPTIONAL_SIGNATURE = \"optionalSignature\";\nconst CLEAR_PROPS$8 = [\n    TBS_REQUEST,\n    OPTIONAL_SIGNATURE\n];\nclass OCSPRequest extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.tbsRequest = pvutils.getParametersValue(parameters, TBS_REQUEST, OCSPRequest.defaultValues(TBS_REQUEST));\n        if (OPTIONAL_SIGNATURE in parameters) {\n            this.optionalSignature = pvutils.getParametersValue(parameters, OPTIONAL_SIGNATURE, OCSPRequest.defaultValues(OPTIONAL_SIGNATURE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS_REQUEST:\n                return new TBSRequest();\n            case OPTIONAL_SIGNATURE:\n                return new Signature();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS_REQUEST:\n                return ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\n                    (TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\n                    (TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\n                    (TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\n                    (TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\n            case OPTIONAL_SIGNATURE:\n                return ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\n                    (Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\n                    (Signature.compareWithDefault(\"certs\", memberValue.certs)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: names.blockName || \"OCSPRequest\",\n            value: [\n                TBSRequest.schema(names.tbsRequest || {\n                    names: {\n                        blockName: TBS_REQUEST\n                    }\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        Signature.schema(names.optionalSignature || {\n                            names: {\n                                blockName: OPTIONAL_SIGNATURE\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$8);\n        const asn1 = asn1js.compareSchema(schema, schema, OCSPRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\n        if (OPTIONAL_SIGNATURE in asn1.result)\n            this.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\n    }\n    toSchema(encodeFlag = false) {\n        const outputArray = [];\n        outputArray.push(this.tbsRequest.toSchema(encodeFlag));\n        if (this.optionalSignature)\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    this.optionalSignature.toSchema()\n                ]\n            }));\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbsRequest: this.tbsRequest.toJSON()\n        };\n        if (this.optionalSignature) {\n            res.optionalSignature = this.optionalSignature.toJSON();\n        }\n        return res;\n    }\n    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {\n        const certID = new CertID();\n        await certID.createForCertificate(certificate, parameters, crypto);\n        this.tbsRequest.requestList.push(new Request({\n            reqCert: certID,\n        }));\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        ParameterError.assertEmpty(privateKey, \"privateKey\", \"OCSPRequest.sign method\");\n        if (!this.optionalSignature) {\n            throw new Error(\"Need to create \\\"optionalSignature\\\" field before signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        this.optionalSignature.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        const tbs = this.tbsRequest.toSchema(true).toBER(false);\n        const signature = await crypto.signWithPrivateKey(tbs, privateKey, parameters);\n        this.optionalSignature.signature = new asn1js.BitString({ valueHex: signature });\n    }\n    verify() {\n    }\n}\nOCSPRequest.CLASS_NAME = \"OCSPRequest\";\n\nconst RESPONSE_TYPE = \"responseType\";\nconst RESPONSE = \"response\";\nconst CLEAR_PROPS$7 = [\n    RESPONSE_TYPE,\n    RESPONSE\n];\nclass ResponseBytes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.responseType = pvutils.getParametersValue(parameters, RESPONSE_TYPE, ResponseBytes.defaultValues(RESPONSE_TYPE));\n        this.response = pvutils.getParametersValue(parameters, RESPONSE, ResponseBytes.defaultValues(RESPONSE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RESPONSE_TYPE:\n                return EMPTY_STRING;\n            case RESPONSE:\n                return new asn1js.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RESPONSE_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case RESPONSE:\n                return (memberValue.isEqual(ResponseBytes.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.ObjectIdentifier({ name: (names.responseType || EMPTY_STRING) }),\n                new asn1js.OctetString({ name: (names.response || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$7);\n        const asn1 = asn1js.compareSchema(schema, schema, ResponseBytes.schema({\n            names: {\n                responseType: RESPONSE_TYPE,\n                response: RESPONSE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.responseType = asn1.result.responseType.valueBlock.toString();\n        this.response = asn1.result.response;\n    }\n    toSchema() {\n        return (new asn1js.Sequence({\n            value: [\n                new asn1js.ObjectIdentifier({ value: this.responseType }),\n                this.response\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            responseType: this.responseType,\n            response: this.response.toJSON(),\n        };\n    }\n}\nResponseBytes.CLASS_NAME = \"ResponseBytes\";\n\nconst RESPONSE_STATUS = \"responseStatus\";\nconst RESPONSE_BYTES = \"responseBytes\";\nclass OCSPResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.responseStatus = pvutils.getParametersValue(parameters, RESPONSE_STATUS, OCSPResponse.defaultValues(RESPONSE_STATUS));\n        if (RESPONSE_BYTES in parameters) {\n            this.responseBytes = pvutils.getParametersValue(parameters, RESPONSE_BYTES, OCSPResponse.defaultValues(RESPONSE_BYTES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RESPONSE_STATUS:\n                return new asn1js.Enumerated();\n            case RESPONSE_BYTES:\n                return new ResponseBytes();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RESPONSE_STATUS:\n                return (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\n            case RESPONSE_BYTES:\n                return ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\n                    (ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || \"OCSPResponse\"),\n            value: [\n                new asn1js.Enumerated({ name: (names.responseStatus || RESPONSE_STATUS) }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        ResponseBytes.schema(names.responseBytes || {\n                            names: {\n                                blockName: RESPONSE_BYTES\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, [\n            RESPONSE_STATUS,\n            RESPONSE_BYTES\n        ]);\n        const asn1 = asn1js.compareSchema(schema, schema, OCSPResponse.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.responseStatus = asn1.result.responseStatus;\n        if (RESPONSE_BYTES in asn1.result)\n            this.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.responseStatus);\n        if (this.responseBytes) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.responseBytes.toSchema()]\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            responseStatus: this.responseStatus.toJSON()\n        };\n        if (this.responseBytes) {\n            res.responseBytes = this.responseBytes.toJSON();\n        }\n        return res;\n    }\n    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {\n        let basicResponse;\n        const result = {\n            isForCertificate: false,\n            status: 2\n        };\n        if (!this.responseBytes)\n            return result;\n        if (this.responseBytes.responseType !== id_PKIX_OCSP_Basic)\n            return result;\n        try {\n            const asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            AsnError.assert(asn1Basic, \"Basic OCSP response\");\n            basicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\n        }\n        catch (ex) {\n            return result;\n        }\n        return basicResponse.getCertificateStatus(certificate, issuerCertificate, crypto);\n    }\n    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {\n        var _a;\n        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {\n            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            return basicResponse.sign(privateKey, hashAlgorithm, crypto);\n        }\n        throw new Error(`Unknown ResponseBytes type: ${((_a = this.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || \"Unknown\"}`);\n    }\n    async verify(issuerCertificate = null, crypto = getCrypto(true)) {\n        var _a;\n        if ((RESPONSE_BYTES in this) === false)\n            throw new Error(\"Empty ResponseBytes field\");\n        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {\n            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            if (issuerCertificate !== null) {\n                if (!basicResponse.certs) {\n                    basicResponse.certs = [];\n                }\n                basicResponse.certs.push(issuerCertificate);\n            }\n            return basicResponse.verify({}, crypto);\n        }\n        throw new Error(`Unknown ResponseBytes type: ${((_a = this.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || \"Unknown\"}`);\n    }\n}\nOCSPResponse.CLASS_NAME = \"OCSPResponse\";\n\nconst TYPE = \"type\";\nconst ATTRIBUTES = \"attributes\";\nconst ENCODED_VALUE = \"encodedValue\";\nconst CLEAR_PROPS$6 = [\n    ATTRIBUTES\n];\nclass SignedAndUnsignedAttributes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils.getParametersValue(parameters, TYPE, SignedAndUnsignedAttributes.defaultValues(TYPE));\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES, SignedAndUnsignedAttributes.defaultValues(ATTRIBUTES));\n        this.encodedValue = pvutils.getParametersValue(parameters, ENCODED_VALUE, SignedAndUnsignedAttributes.defaultValues(ENCODED_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE:\n                return (-1);\n            case ATTRIBUTES:\n                return [];\n            case ENCODED_VALUE:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE:\n                return (memberValue === SignedAndUnsignedAttributes.defaultValues(TYPE));\n            case ATTRIBUTES:\n                return (memberValue.length === 0);\n            case ENCODED_VALUE:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Constructed({\n            name: (names.blockName || EMPTY_STRING),\n            optional: true,\n            idBlock: {\n                tagClass: 3,\n                tagNumber: names.tagNumber || 0\n            },\n            value: [\n                new asn1js.Repeated({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: Attribute.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$6);\n        const asn1 = asn1js.compareSchema(schema, schema, SignedAndUnsignedAttributes.schema({\n            names: {\n                tagNumber: this.type,\n                attributes: ATTRIBUTES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.idBlock.tagNumber;\n        this.encodedValue = pvtsutils.BufferSourceConverter.toArrayBuffer(asn1.result.valueBeforeDecodeView);\n        const encodedView = new Uint8Array(this.encodedValue);\n        encodedView[0] = 0x31;\n        if ((ATTRIBUTES in asn1.result) === false) {\n            if (this.type === 0)\n                throw new Error(\"Wrong structure of SignedUnsignedAttributes\");\n            else\n                return;\n        }\n        this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes))\n            throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\n        return (new asn1js.Constructed({\n            optional: true,\n            idBlock: {\n                tagClass: 3,\n                tagNumber: this.type\n            },\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes))\n            throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\n        return {\n            type: this.type,\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n    }\n}\nSignedAndUnsignedAttributes.CLASS_NAME = \"SignedAndUnsignedAttributes\";\n\nconst VERSION$4 = \"version\";\nconst SID = \"sid\";\nconst DIGEST_ALGORITHM = \"digestAlgorithm\";\nconst SIGNED_ATTRS = \"signedAttrs\";\nconst SIGNATURE_ALGORITHM = \"signatureAlgorithm\";\nconst SIGNATURE = \"signature\";\nconst UNSIGNED_ATTRS = \"unsignedAttrs\";\nconst SIGNER_INFO = \"SignerInfo\";\nconst SIGNER_INFO_VERSION = `${SIGNER_INFO}.${VERSION$4}`;\nconst SIGNER_INFO_SID = `${SIGNER_INFO}.${SID}`;\nconst SIGNER_INFO_DIGEST_ALGORITHM = `${SIGNER_INFO}.${DIGEST_ALGORITHM}`;\nconst SIGNER_INFO_SIGNED_ATTRS = `${SIGNER_INFO}.${SIGNED_ATTRS}`;\nconst SIGNER_INFO_SIGNATURE_ALGORITHM = `${SIGNER_INFO}.${SIGNATURE_ALGORITHM}`;\nconst SIGNER_INFO_SIGNATURE = `${SIGNER_INFO}.${SIGNATURE}`;\nconst SIGNER_INFO_UNSIGNED_ATTRS = `${SIGNER_INFO}.${UNSIGNED_ATTRS}`;\nconst CLEAR_PROPS$5 = [\n    SIGNER_INFO_VERSION,\n    SIGNER_INFO_SID,\n    SIGNER_INFO_DIGEST_ALGORITHM,\n    SIGNER_INFO_SIGNED_ATTRS,\n    SIGNER_INFO_SIGNATURE_ALGORITHM,\n    SIGNER_INFO_SIGNATURE,\n    SIGNER_INFO_UNSIGNED_ATTRS\n];\nclass SignerInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$4, SignerInfo.defaultValues(VERSION$4));\n        this.sid = pvutils.getParametersValue(parameters, SID, SignerInfo.defaultValues(SID));\n        this.digestAlgorithm = pvutils.getParametersValue(parameters, DIGEST_ALGORITHM, SignerInfo.defaultValues(DIGEST_ALGORITHM));\n        if (SIGNED_ATTRS in parameters) {\n            this.signedAttrs = pvutils.getParametersValue(parameters, SIGNED_ATTRS, SignerInfo.defaultValues(SIGNED_ATTRS));\n        }\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM, SignerInfo.defaultValues(SIGNATURE_ALGORITHM));\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE, SignerInfo.defaultValues(SIGNATURE));\n        if (UNSIGNED_ATTRS in parameters) {\n            this.unsignedAttrs = pvutils.getParametersValue(parameters, UNSIGNED_ATTRS, SignerInfo.defaultValues(UNSIGNED_ATTRS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$4:\n                return 0;\n            case SID:\n                return new asn1js.Any();\n            case DIGEST_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case SIGNED_ATTRS:\n                return new SignedAndUnsignedAttributes({ type: 0 });\n            case SIGNATURE_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case SIGNATURE:\n                return new asn1js.OctetString();\n            case UNSIGNED_ATTRS:\n                return new SignedAndUnsignedAttributes({ type: 1 });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$4:\n                return (SignerInfo.defaultValues(VERSION$4) === memberValue);\n            case SID:\n                return (memberValue instanceof asn1js.Any);\n            case DIGEST_ALGORITHM:\n                if ((memberValue instanceof AlgorithmIdentifier) === false)\n                    return false;\n                return memberValue.isEqual(SignerInfo.defaultValues(DIGEST_ALGORITHM));\n            case SIGNED_ATTRS:\n                return ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\n            case SIGNATURE_ALGORITHM:\n                if ((memberValue instanceof AlgorithmIdentifier) === false)\n                    return false;\n                return memberValue.isEqual(SignerInfo.defaultValues(SIGNATURE_ALGORITHM));\n            case SIGNATURE:\n            case UNSIGNED_ATTRS:\n                return ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: SIGNER_INFO,\n            value: [\n                new asn1js.Integer({ name: (names.version || SIGNER_INFO_VERSION) }),\n                new asn1js.Choice({\n                    value: [\n                        IssuerAndSerialNumber.schema(names.sidSchema || {\n                            names: {\n                                blockName: SIGNER_INFO_SID\n                            }\n                        }),\n                        new asn1js.Choice({\n                            value: [\n                                new asn1js.Constructed({\n                                    optional: true,\n                                    name: (names.sid || SIGNER_INFO_SID),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [new asn1js.OctetString()]\n                                }),\n                                new asn1js.Primitive({\n                                    optional: true,\n                                    name: (names.sid || SIGNER_INFO_SID),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    }\n                                }),\n                            ]\n                        }),\n                    ]\n                }),\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {\n                    names: {\n                        blockName: SIGNER_INFO_DIGEST_ALGORITHM\n                    }\n                }),\n                SignedAndUnsignedAttributes.schema(names.signedAttrs || {\n                    names: {\n                        blockName: SIGNER_INFO_SIGNED_ATTRS,\n                        tagNumber: 0\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNER_INFO_SIGNATURE_ALGORITHM\n                    }\n                }),\n                new asn1js.OctetString({ name: (names.signature || SIGNER_INFO_SIGNATURE) }),\n                SignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\n                    names: {\n                        blockName: SIGNER_INFO_UNSIGNED_ATTRS,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$5);\n        const asn1 = asn1js.compareSchema(schema, schema, SignerInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[SIGNER_INFO_VERSION].valueBlock.valueDec;\n        const currentSid = asn1.result[SIGNER_INFO_SID];\n        if (currentSid.idBlock.tagClass === 1)\n            this.sid = new IssuerAndSerialNumber({ schema: currentSid });\n        else\n            this.sid = currentSid;\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[SIGNER_INFO_DIGEST_ALGORITHM] });\n        if (SIGNER_INFO_SIGNED_ATTRS in asn1.result)\n            this.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[SIGNER_INFO_SIGNED_ATTRS] });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[SIGNER_INFO_SIGNATURE_ALGORITHM] });\n        this.signature = asn1.result[SIGNER_INFO_SIGNATURE];\n        if (SIGNER_INFO_UNSIGNED_ATTRS in asn1.result)\n            this.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[SIGNER_INFO_UNSIGNED_ATTRS] });\n    }\n    toSchema() {\n        if (SignerInfo.compareWithDefault(SID, this.sid))\n            throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        if (this.sid instanceof IssuerAndSerialNumber)\n            outputArray.push(this.sid.toSchema());\n        else\n            outputArray.push(this.sid);\n        outputArray.push(this.digestAlgorithm.toSchema());\n        if (this.signedAttrs) {\n            if (SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false)\n                outputArray.push(this.signedAttrs.toSchema());\n        }\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.unsignedAttrs) {\n            if (SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false)\n                outputArray.push(this.unsignedAttrs.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        if (SignerInfo.compareWithDefault(SID, this.sid)) {\n            throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\n        }\n        const res = {\n            version: this.version,\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (!(this.sid instanceof asn1js.Any))\n            res.sid = this.sid.toJSON();\n        if (this.signedAttrs && SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false) {\n            res.signedAttrs = this.signedAttrs.toJSON();\n        }\n        if (this.unsignedAttrs && SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false) {\n            res.unsignedAttrs = this.unsignedAttrs.toJSON();\n        }\n        return res;\n    }\n}\nSignerInfo.CLASS_NAME = \"SignerInfo\";\n\nconst VERSION$3 = \"version\";\nconst POLICY = \"policy\";\nconst MESSAGE_IMPRINT$1 = \"messageImprint\";\nconst SERIAL_NUMBER = \"serialNumber\";\nconst GEN_TIME = \"genTime\";\nconst ORDERING = \"ordering\";\nconst NONCE$1 = \"nonce\";\nconst ACCURACY = \"accuracy\";\nconst TSA = \"tsa\";\nconst EXTENSIONS$1 = \"extensions\";\nconst TST_INFO = \"TSTInfo\";\nconst TST_INFO_VERSION = `${TST_INFO}.${VERSION$3}`;\nconst TST_INFO_POLICY = `${TST_INFO}.${POLICY}`;\nconst TST_INFO_MESSAGE_IMPRINT = `${TST_INFO}.${MESSAGE_IMPRINT$1}`;\nconst TST_INFO_SERIAL_NUMBER = `${TST_INFO}.${SERIAL_NUMBER}`;\nconst TST_INFO_GEN_TIME = `${TST_INFO}.${GEN_TIME}`;\nconst TST_INFO_ACCURACY = `${TST_INFO}.${ACCURACY}`;\nconst TST_INFO_ORDERING = `${TST_INFO}.${ORDERING}`;\nconst TST_INFO_NONCE = `${TST_INFO}.${NONCE$1}`;\nconst TST_INFO_TSA = `${TST_INFO}.${TSA}`;\nconst TST_INFO_EXTENSIONS = `${TST_INFO}.${EXTENSIONS$1}`;\nconst CLEAR_PROPS$4 = [\n    TST_INFO_VERSION,\n    TST_INFO_POLICY,\n    TST_INFO_MESSAGE_IMPRINT,\n    TST_INFO_SERIAL_NUMBER,\n    TST_INFO_GEN_TIME,\n    TST_INFO_ACCURACY,\n    TST_INFO_ORDERING,\n    TST_INFO_NONCE,\n    TST_INFO_TSA,\n    TST_INFO_EXTENSIONS\n];\nclass TSTInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$3, TSTInfo.defaultValues(VERSION$3));\n        this.policy = pvutils.getParametersValue(parameters, POLICY, TSTInfo.defaultValues(POLICY));\n        this.messageImprint = pvutils.getParametersValue(parameters, MESSAGE_IMPRINT$1, TSTInfo.defaultValues(MESSAGE_IMPRINT$1));\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER, TSTInfo.defaultValues(SERIAL_NUMBER));\n        this.genTime = pvutils.getParametersValue(parameters, GEN_TIME, TSTInfo.defaultValues(GEN_TIME));\n        if (ACCURACY in parameters) {\n            this.accuracy = pvutils.getParametersValue(parameters, ACCURACY, TSTInfo.defaultValues(ACCURACY));\n        }\n        if (ORDERING in parameters) {\n            this.ordering = pvutils.getParametersValue(parameters, ORDERING, TSTInfo.defaultValues(ORDERING));\n        }\n        if (NONCE$1 in parameters) {\n            this.nonce = pvutils.getParametersValue(parameters, NONCE$1, TSTInfo.defaultValues(NONCE$1));\n        }\n        if (TSA in parameters) {\n            this.tsa = pvutils.getParametersValue(parameters, TSA, TSTInfo.defaultValues(TSA));\n        }\n        if (EXTENSIONS$1 in parameters) {\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$1, TSTInfo.defaultValues(EXTENSIONS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$3:\n                return 0;\n            case POLICY:\n                return EMPTY_STRING;\n            case MESSAGE_IMPRINT$1:\n                return new MessageImprint();\n            case SERIAL_NUMBER:\n                return new asn1js.Integer();\n            case GEN_TIME:\n                return new Date(0, 0, 0);\n            case ACCURACY:\n                return new Accuracy();\n            case ORDERING:\n                return false;\n            case NONCE$1:\n                return new asn1js.Integer();\n            case TSA:\n                return new GeneralName();\n            case EXTENSIONS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$3:\n            case POLICY:\n            case GEN_TIME:\n            case ORDERING:\n                return (memberValue === TSTInfo.defaultValues(ORDERING));\n            case MESSAGE_IMPRINT$1:\n                return ((MessageImprint.compareWithDefault(HASH_ALGORITHM, memberValue.hashAlgorithm)) &&\n                    (MessageImprint.compareWithDefault(HASHED_MESSAGE, memberValue.hashedMessage)));\n            case SERIAL_NUMBER:\n            case NONCE$1:\n                return (memberValue.isEqual(TSTInfo.defaultValues(NONCE$1)));\n            case ACCURACY:\n                return ((Accuracy.compareWithDefault(SECONDS, memberValue.seconds)) &&\n                    (Accuracy.compareWithDefault(MILLIS, memberValue.millis)) &&\n                    (Accuracy.compareWithDefault(MICROS, memberValue.micros)));\n            case TSA:\n                return ((GeneralName.compareWithDefault(TYPE$4, memberValue.type)) &&\n                    (GeneralName.compareWithDefault(VALUE$5, memberValue.value)));\n            case EXTENSIONS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || TST_INFO),\n            value: [\n                new asn1js.Integer({ name: (names.version || TST_INFO_VERSION) }),\n                new asn1js.ObjectIdentifier({ name: (names.policy || TST_INFO_POLICY) }),\n                MessageImprint.schema(names.messageImprint || {\n                    names: {\n                        blockName: TST_INFO_MESSAGE_IMPRINT\n                    }\n                }),\n                new asn1js.Integer({ name: (names.serialNumber || TST_INFO_SERIAL_NUMBER) }),\n                new asn1js.GeneralizedTime({ name: (names.genTime || TST_INFO_GEN_TIME) }),\n                Accuracy.schema(names.accuracy || {\n                    names: {\n                        blockName: TST_INFO_ACCURACY\n                    }\n                }),\n                new asn1js.Boolean({\n                    name: (names.ordering || TST_INFO_ORDERING),\n                    optional: true\n                }),\n                new asn1js.Integer({\n                    name: (names.nonce || TST_INFO_NONCE),\n                    optional: true\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [GeneralName.schema(names.tsa || {\n                            names: {\n                                blockName: TST_INFO_TSA\n                            }\n                        })]\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.extensions || TST_INFO_EXTENSIONS),\n                            value: Extension.schema(names.extension || {})\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$4);\n        const asn1 = asn1js.compareSchema(schema, schema, TSTInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[TST_INFO_VERSION].valueBlock.valueDec;\n        this.policy = asn1.result[TST_INFO_POLICY].valueBlock.toString();\n        this.messageImprint = new MessageImprint({ schema: asn1.result[TST_INFO_MESSAGE_IMPRINT] });\n        this.serialNumber = asn1.result[TST_INFO_SERIAL_NUMBER];\n        this.genTime = asn1.result[TST_INFO_GEN_TIME].toDate();\n        if (TST_INFO_ACCURACY in asn1.result)\n            this.accuracy = new Accuracy({ schema: asn1.result[TST_INFO_ACCURACY] });\n        if (TST_INFO_ORDERING in asn1.result)\n            this.ordering = asn1.result[TST_INFO_ORDERING].valueBlock.value;\n        if (TST_INFO_NONCE in asn1.result)\n            this.nonce = asn1.result[TST_INFO_NONCE];\n        if (TST_INFO_TSA in asn1.result)\n            this.tsa = new GeneralName({ schema: asn1.result[TST_INFO_TSA] });\n        if (TST_INFO_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TST_INFO_EXTENSIONS], element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.policy }));\n        outputArray.push(this.messageImprint.toSchema());\n        outputArray.push(this.serialNumber);\n        outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.genTime }));\n        if (this.accuracy)\n            outputArray.push(this.accuracy.toSchema());\n        if (this.ordering !== undefined)\n            outputArray.push(new asn1js.Boolean({ value: this.ordering }));\n        if (this.nonce)\n            outputArray.push(this.nonce);\n        if (this.tsa) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.tsa.toSchema()]\n            }));\n        }\n        if (this.extensions) {\n            outputArray.push(new asn1js.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.extensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            policy: this.policy,\n            messageImprint: this.messageImprint.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n            genTime: this.genTime\n        };\n        if (this.accuracy)\n            res.accuracy = this.accuracy.toJSON();\n        if (this.ordering !== undefined)\n            res.ordering = this.ordering;\n        if (this.nonce)\n            res.nonce = this.nonce.toJSON();\n        if (this.tsa)\n            res.tsa = this.tsa.toJSON();\n        if (this.extensions)\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        return res;\n    }\n    async verify(params, crypto = getCrypto(true)) {\n        if (!params.data) {\n            throw new Error(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\n        }\n        const data = params.data;\n        if (params.notBefore) {\n            if (this.genTime < params.notBefore)\n                throw new Error(\"Generation time for TSTInfo object is less than notBefore value\");\n        }\n        if (params.notAfter) {\n            if (this.genTime > params.notAfter)\n                throw new Error(\"Generation time for TSTInfo object is more than notAfter value\");\n        }\n        const shaAlgorithm = crypto.getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId, true, \"MessageImprint.hashAlgorithm\");\n        const hash = await crypto.digest(shaAlgorithm.name, new Uint8Array(data));\n        return pvtsutils.BufferSourceConverter.isEqual(hash, this.messageImprint.hashedMessage.valueBlock.valueHexView);\n    }\n}\nTSTInfo.CLASS_NAME = \"TSTInfo\";\n\nconst VERSION$2 = \"version\";\nconst DIGEST_ALGORITHMS = \"digestAlgorithms\";\nconst ENCAP_CONTENT_INFO = \"encapContentInfo\";\nconst CERTIFICATES = \"certificates\";\nconst CRLS = \"crls\";\nconst SIGNER_INFOS = \"signerInfos\";\nconst OCSPS = \"ocsps\";\nconst SIGNED_DATA = \"SignedData\";\nconst SIGNED_DATA_VERSION = `${SIGNED_DATA}.${VERSION$2}`;\nconst SIGNED_DATA_DIGEST_ALGORITHMS = `${SIGNED_DATA}.${DIGEST_ALGORITHMS}`;\nconst SIGNED_DATA_ENCAP_CONTENT_INFO = `${SIGNED_DATA}.${ENCAP_CONTENT_INFO}`;\nconst SIGNED_DATA_CERTIFICATES = `${SIGNED_DATA}.${CERTIFICATES}`;\nconst SIGNED_DATA_CRLS = `${SIGNED_DATA}.${CRLS}`;\nconst SIGNED_DATA_SIGNER_INFOS = `${SIGNED_DATA}.${SIGNER_INFOS}`;\nconst CLEAR_PROPS$3 = [\n    SIGNED_DATA_VERSION,\n    SIGNED_DATA_DIGEST_ALGORITHMS,\n    SIGNED_DATA_ENCAP_CONTENT_INFO,\n    SIGNED_DATA_CERTIFICATES,\n    SIGNED_DATA_CRLS,\n    SIGNED_DATA_SIGNER_INFOS\n];\nclass SignedDataVerifyError extends Error {\n    constructor({ message, code = 0, date = new Date(), signatureVerified = null, signerCertificate = null, signerCertificateVerified = null, timestampSerial = null, certificatePath = [], }) {\n        super(message);\n        this.name = \"SignedDataVerifyError\";\n        this.date = date;\n        this.code = code;\n        this.timestampSerial = timestampSerial;\n        this.signatureVerified = signatureVerified;\n        this.signerCertificate = signerCertificate;\n        this.signerCertificateVerified = signerCertificateVerified;\n        this.certificatePath = certificatePath;\n    }\n}\nclass SignedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$2, SignedData.defaultValues(VERSION$2));\n        this.digestAlgorithms = pvutils.getParametersValue(parameters, DIGEST_ALGORITHMS, SignedData.defaultValues(DIGEST_ALGORITHMS));\n        this.encapContentInfo = pvutils.getParametersValue(parameters, ENCAP_CONTENT_INFO, SignedData.defaultValues(ENCAP_CONTENT_INFO));\n        if (CERTIFICATES in parameters) {\n            this.certificates = pvutils.getParametersValue(parameters, CERTIFICATES, SignedData.defaultValues(CERTIFICATES));\n        }\n        if (CRLS in parameters) {\n            this.crls = pvutils.getParametersValue(parameters, CRLS, SignedData.defaultValues(CRLS));\n        }\n        if (OCSPS in parameters) {\n            this.ocsps = pvutils.getParametersValue(parameters, OCSPS, SignedData.defaultValues(OCSPS));\n        }\n        this.signerInfos = pvutils.getParametersValue(parameters, SIGNER_INFOS, SignedData.defaultValues(SIGNER_INFOS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$2:\n                return 0;\n            case DIGEST_ALGORITHMS:\n                return [];\n            case ENCAP_CONTENT_INFO:\n                return new EncapsulatedContentInfo();\n            case CERTIFICATES:\n                return [];\n            case CRLS:\n                return [];\n            case OCSPS:\n                return [];\n            case SIGNER_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$2:\n                return (memberValue === SignedData.defaultValues(VERSION$2));\n            case ENCAP_CONTENT_INFO:\n                return EncapsulatedContentInfo.compareWithDefault(\"eContentType\", memberValue.eContentType) &&\n                    EncapsulatedContentInfo.compareWithDefault(\"eContent\", memberValue.eContent);\n            case DIGEST_ALGORITHMS:\n            case CERTIFICATES:\n            case CRLS:\n            case OCSPS:\n            case SIGNER_INFOS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        if (names.optional === undefined) {\n            names.optional = false;\n        }\n        return (new asn1js.Sequence({\n            name: (names.blockName || SIGNED_DATA),\n            optional: names.optional,\n            value: [\n                new asn1js.Integer({ name: (names.version || SIGNED_DATA_VERSION) }),\n                new asn1js.Set({\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.digestAlgorithms || SIGNED_DATA_DIGEST_ALGORITHMS),\n                            value: AlgorithmIdentifier.schema()\n                        })\n                    ]\n                }),\n                EncapsulatedContentInfo.schema(names.encapContentInfo || {\n                    names: {\n                        blockName: SIGNED_DATA_ENCAP_CONTENT_INFO\n                    }\n                }),\n                new asn1js.Constructed({\n                    name: (names.certificates || SIGNED_DATA_CERTIFICATES),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: CertificateSet.schema().valueBlock.value\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: RevocationInfoChoices.schema(names.crls || {\n                        names: {\n                            crls: SIGNED_DATA_CRLS\n                        }\n                    }).valueBlock.value\n                }),\n                new asn1js.Set({\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.signerInfos || SIGNED_DATA_SIGNER_INFOS),\n                            value: SignerInfo.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$3);\n        const asn1 = asn1js.compareSchema(schema, schema, SignedData.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[SIGNED_DATA_VERSION].valueBlock.valueDec;\n        if (SIGNED_DATA_DIGEST_ALGORITHMS in asn1.result)\n            this.digestAlgorithms = Array.from(asn1.result[SIGNED_DATA_DIGEST_ALGORITHMS], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\n        this.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[SIGNED_DATA_ENCAP_CONTENT_INFO] });\n        if (SIGNED_DATA_CERTIFICATES in asn1.result) {\n            const certificateSet = new CertificateSet({\n                schema: new asn1js.Set({\n                    value: asn1.result[SIGNED_DATA_CERTIFICATES].valueBlock.value\n                })\n            });\n            this.certificates = certificateSet.certificates.slice(0);\n        }\n        if (SIGNED_DATA_CRLS in asn1.result) {\n            this.crls = Array.from(asn1.result[SIGNED_DATA_CRLS], (crl) => {\n                if (crl.idBlock.tagClass === 1)\n                    return new CertificateRevocationList({ schema: crl });\n                crl.idBlock.tagClass = 1;\n                crl.idBlock.tagNumber = 16;\n                return new OtherRevocationInfoFormat({ schema: crl });\n            });\n        }\n        if (SIGNED_DATA_SIGNER_INFOS in asn1.result)\n            this.signerInfos = Array.from(asn1.result[SIGNED_DATA_SIGNER_INFOS], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\n    }\n    toSchema(encodeFlag = false) {\n        const outputArray = [];\n        if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof OtherCertificateFormat))\n            || (this.crls && this.crls.length && this.crls.some(o => o instanceof OtherRevocationInfoFormat))) {\n            this.version = 5;\n        }\n        else if (this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV2)) {\n            this.version = 4;\n        }\n        else if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV1))\n            || this.signerInfos.some(o => o.version === 3)\n            || this.encapContentInfo.eContentType !== SignedData.ID_DATA) {\n            this.version = 3;\n        }\n        else {\n            this.version = 1;\n        }\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(new asn1js.Set({\n            value: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema())\n        }));\n        outputArray.push(this.encapContentInfo.toSchema());\n        if (this.certificates) {\n            const certificateSet = new CertificateSet({ certificates: this.certificates });\n            const certificateSetSchema = certificateSet.toSchema();\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: certificateSetSchema.valueBlock.value\n            }));\n        }\n        if (this.crls) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.crls, crl => {\n                    if (crl instanceof OtherRevocationInfoFormat) {\n                        const crlSchema = crl.toSchema();\n                        crlSchema.idBlock.tagClass = 3;\n                        crlSchema.idBlock.tagNumber = 1;\n                        return crlSchema;\n                    }\n                    return crl.toSchema(encodeFlag);\n                })\n            }));\n        }\n        outputArray.push(new asn1js.Set({\n            value: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema())\n        }));\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            digestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\n            encapContentInfo: this.encapContentInfo.toJSON(),\n            signerInfos: Array.from(this.signerInfos, signerInfo => signerInfo.toJSON()),\n        };\n        if (this.certificates) {\n            res.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\n        }\n        if (this.crls) {\n            res.crls = Array.from(this.crls, crl => crl.toJSON());\n        }\n        return res;\n    }\n    async verify({ signer = (-1), data = (EMPTY_BUFFER), trustedCerts = [], checkDate = (new Date()), checkChain = false, passedWhenNotRevValues = false, extendedMode = false, findOrigin = null, findIssuer = null } = {}, crypto = getCrypto(true)) {\n        let signerCert = null;\n        let timestampSerial = null;\n        try {\n            let messageDigestValue = EMPTY_BUFFER;\n            let shaAlgorithm = EMPTY_STRING;\n            let certificatePath = [];\n            const signerInfo = this.signerInfos[signer];\n            if (!signerInfo) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 1,\n                    message: \"Unable to get signer by supplied index\",\n                });\n            }\n            if (!this.certificates) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 2,\n                    message: \"No certificates attached to this signed data\",\n                });\n            }\n            if (signerInfo.sid instanceof IssuerAndSerialNumber) {\n                for (const certificate of this.certificates) {\n                    if (!(certificate instanceof Certificate))\n                        continue;\n                    if ((certificate.issuer.isEqual(signerInfo.sid.issuer)) &&\n                        (certificate.serialNumber.isEqual(signerInfo.sid.serialNumber))) {\n                        signerCert = certificate;\n                        break;\n                    }\n                }\n            }\n            else {\n                const sid = signerInfo.sid;\n                const keyId = sid.idBlock.isConstructed\n                    ? sid.valueBlock.value[0].valueBlock.valueHex\n                    : sid.valueBlock.valueHex;\n                for (const certificate of this.certificates) {\n                    if (!(certificate instanceof Certificate)) {\n                        continue;\n                    }\n                    const digest = await crypto.digest({ name: \"sha-1\" }, certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n                    if (pvutils.isEqualBuffer(digest, keyId)) {\n                        signerCert = certificate;\n                        break;\n                    }\n                }\n            }\n            if (!signerCert) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 3,\n                    message: \"Unable to find signer certificate\",\n                });\n            }\n            if (this.encapContentInfo.eContentType === id_eContentType_TSTInfo) {\n                if (!this.encapContentInfo.eContent) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo eContent is empty\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                let tstInfo;\n                try {\n                    tstInfo = TSTInfo.fromBER(this.encapContentInfo.eContent.valueBlock.valueHexView);\n                }\n                catch (ex) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo wrong ASN.1 schema \",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                checkDate = tstInfo.genTime;\n                timestampSerial = tstInfo.serialNumber.valueBlock.valueHexView.slice();\n                if (data.byteLength === 0) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 4,\n                        message: \"Missed detached data input array\",\n                    });\n                }\n                if (!(await tstInfo.verify({ data }, crypto))) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo verification is failed\",\n                        signatureVerified: false,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (checkChain) {\n                const certs = this.certificates.filter(certificate => (certificate instanceof Certificate && !!checkCA(certificate, signerCert)));\n                const chainParams = {\n                    checkDate,\n                    certs,\n                    trustedCerts,\n                };\n                if (findIssuer) {\n                    chainParams.findIssuer = findIssuer;\n                }\n                if (findOrigin) {\n                    chainParams.findOrigin = findOrigin;\n                }\n                const chainEngine = new CertificateChainValidationEngine(chainParams);\n                chainEngine.certs.push(signerCert);\n                if (this.crls) {\n                    for (const crl of this.crls) {\n                        if (\"thisUpdate\" in crl)\n                            chainEngine.crls.push(crl);\n                        else {\n                            if (crl.otherRevInfoFormat === id_PKIX_OCSP_Basic)\n                                chainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\n                        }\n                    }\n                }\n                if (this.ocsps) {\n                    chainEngine.ocsps.push(...(this.ocsps));\n                }\n                const verificationResult = await chainEngine.verify({ passedWhenNotRevValues }, crypto)\n                    .catch(e => {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 5,\n                        message: `Validation of signer's certificate failed with error: ${((e instanceof Object) ? e.resultMessage : e)}`,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: false\n                    });\n                });\n                if (verificationResult.certificatePath) {\n                    certificatePath = verificationResult.certificatePath;\n                }\n                if (!verificationResult.result)\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 5,\n                        message: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: false\n                    });\n            }\n            const signerInfoHashAlgorithm = crypto.getAlgorithmByOID(signerInfo.digestAlgorithm.algorithmId);\n            if (!(\"name\" in signerInfoHashAlgorithm)) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 7,\n                    message: `Unsupported signature algorithm: ${signerInfo.digestAlgorithm.algorithmId}`,\n                    signerCertificate: signerCert,\n                    signerCertificateVerified: true\n                });\n            }\n            shaAlgorithm = signerInfoHashAlgorithm.name;\n            const eContent = this.encapContentInfo.eContent;\n            if (eContent) {\n                if ((eContent.idBlock.tagClass === 1) &&\n                    (eContent.idBlock.tagNumber === 4)) {\n                    data = eContent.getValue();\n                }\n                else\n                    data = eContent.valueBlock.valueBeforeDecodeView;\n            }\n            else {\n                if (data.byteLength === 0) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 8,\n                        message: \"Missed detached data input array\",\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (signerInfo.signedAttrs) {\n                let foundContentType = false;\n                let foundMessageDigest = false;\n                for (const attribute of signerInfo.signedAttrs.attributes) {\n                    if (attribute.type === \"1.2.840.113549.1.9.3\")\n                        foundContentType = true;\n                    if (attribute.type === \"1.2.840.113549.1.9.4\") {\n                        foundMessageDigest = true;\n                        messageDigestValue = attribute.values[0].valueBlock.valueHex;\n                    }\n                    if (foundContentType && foundMessageDigest)\n                        break;\n                }\n                if (foundContentType === false) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 9,\n                        message: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n                if (foundMessageDigest === false) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 10,\n                        message: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (signerInfo.signedAttrs) {\n                const messageDigest = await crypto.digest(shaAlgorithm, new Uint8Array(data));\n                if (!pvutils.isEqualBuffer(messageDigest, messageDigestValue)) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: Message digest doesn't match\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                data = signerInfo.signedAttrs.encodedValue;\n            }\n            const verifyResult = signerInfo.signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.1\"\n                ? await crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerInfo.signatureAlgorithm, shaAlgorithm)\n                : await crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerInfo.signatureAlgorithm);\n            if (extendedMode) {\n                return {\n                    date: checkDate,\n                    code: 14,\n                    message: EMPTY_STRING,\n                    signatureVerified: verifyResult,\n                    signerCertificate: signerCert,\n                    timestampSerial,\n                    signerCertificateVerified: true,\n                    certificatePath\n                };\n            }\n            else {\n                return verifyResult;\n            }\n        }\n        catch (e) {\n            if (e instanceof SignedDataVerifyError) {\n                throw e;\n            }\n            throw new SignedDataVerifyError({\n                date: checkDate,\n                code: 15,\n                message: `Error during verification: ${e instanceof Error ? e.message : e}`,\n                signatureVerified: null,\n                signerCertificate: signerCert,\n                timestampSerial,\n                signerCertificateVerified: true\n            });\n        }\n    }\n    async sign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (EMPTY_BUFFER), crypto = getCrypto(true)) {\n        var _a;\n        if (!privateKey)\n            throw new Error(\"Need to provide a private key for signing\");\n        const signerInfo = this.signerInfos[signerIndex];\n        if (!signerInfo) {\n            throw new RangeError(\"SignerInfo index is out of range\");\n        }\n        if (!((_a = signerInfo.signedAttrs) === null || _a === void 0 ? void 0 : _a.attributes.length) && \"hash\" in privateKey.algorithm && \"hash\" in privateKey.algorithm && privateKey.algorithm.hash) {\n            hashAlgorithm = privateKey.algorithm.hash.name;\n        }\n        const hashAlgorithmOID = crypto.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        if ((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0) {\n            this.digestAlgorithms.push(new AlgorithmIdentifier({\n                algorithmId: hashAlgorithmOID,\n                algorithmParams: new asn1js.Null()\n            }));\n        }\n        signerInfo.digestAlgorithm = new AlgorithmIdentifier({\n            algorithmId: hashAlgorithmOID,\n            algorithmParams: new asn1js.Null()\n        });\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        signerInfo.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        if (signerInfo.signedAttrs) {\n            if (signerInfo.signedAttrs.encodedValue.byteLength !== 0)\n                data = signerInfo.signedAttrs.encodedValue;\n            else {\n                data = signerInfo.signedAttrs.toSchema().toBER();\n                const view = pvtsutils.BufferSourceConverter.toUint8Array(data);\n                view[0] = 0x31;\n            }\n        }\n        else {\n            const eContent = this.encapContentInfo.eContent;\n            if (eContent) {\n                if ((eContent.idBlock.tagClass === 1) &&\n                    (eContent.idBlock.tagNumber === 4)) {\n                    data = eContent.getValue();\n                }\n                else\n                    data = eContent.valueBlock.valueBeforeDecodeView;\n            }\n            else {\n                if (data.byteLength === 0)\n                    throw new Error(\"Missed detached data input array\");\n            }\n        }\n        const signature = await crypto.signWithPrivateKey(data, privateKey, parameters);\n        signerInfo.signature = new asn1js.OctetString({ valueHex: signature });\n    }\n}\nSignedData.CLASS_NAME = \"SignedData\";\nSignedData.ID_DATA = id_ContentType_Data;\n\nconst VERSION$1 = \"version\";\nconst AUTH_SAFE = \"authSafe\";\nconst MAC_DATA = \"macData\";\nconst PARSED_VALUE = \"parsedValue\";\nconst CLERA_PROPS = [\n    VERSION$1,\n    AUTH_SAFE,\n    MAC_DATA\n];\nclass PFX extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION$1, PFX.defaultValues(VERSION$1));\n        this.authSafe = pvutils.getParametersValue(parameters, AUTH_SAFE, PFX.defaultValues(AUTH_SAFE));\n        if (MAC_DATA in parameters) {\n            this.macData = pvutils.getParametersValue(parameters, MAC_DATA, PFX.defaultValues(MAC_DATA));\n        }\n        if (PARSED_VALUE in parameters) {\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE, PFX.defaultValues(PARSED_VALUE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$1:\n                return 3;\n            case AUTH_SAFE:\n                return (new ContentInfo());\n            case MAC_DATA:\n                return (new MacData());\n            case PARSED_VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$1:\n                return (memberValue === PFX.defaultValues(memberName));\n            case AUTH_SAFE:\n                return ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (ContentInfo.compareWithDefault(\"content\", memberValue.content)));\n            case MAC_DATA:\n                return ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\n                    (MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\n                    (MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\n            case PARSED_VALUE:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.version || VERSION$1) }),\n                ContentInfo.schema(names.authSafe || {\n                    names: {\n                        blockName: AUTH_SAFE\n                    }\n                }),\n                MacData.schema(names.macData || {\n                    names: {\n                        blockName: MAC_DATA,\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLERA_PROPS);\n        const asn1 = asn1js.compareSchema(schema, schema, PFX.schema({\n            names: {\n                version: VERSION$1,\n                authSafe: {\n                    names: {\n                        blockName: AUTH_SAFE\n                    }\n                },\n                macData: {\n                    names: {\n                        blockName: MAC_DATA\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\n        if (MAC_DATA in asn1.result)\n            this.macData = new MacData({ schema: asn1.result.macData });\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js.Integer({ value: this.version }),\n            this.authSafe.toSchema()\n        ];\n        if (this.macData) {\n            outputArray.push(this.macData.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const output = {\n            version: this.version,\n            authSafe: this.authSafe.toJSON()\n        };\n        if (this.macData) {\n            output.macData = this.macData.toJSON();\n        }\n        return output;\n    }\n    async makeInternalValues(parameters = {}, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        if (!this.parsedValue) {\n            throw new Error(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\n        }\n        ParameterError.assertEmpty(this.parsedValue.integrityMode, \"integrityMode\", \"parsedValue\");\n        ParameterError.assertEmpty(this.parsedValue.authenticatedSafe, \"authenticatedSafe\", \"parsedValue\");\n        switch (this.parsedValue.integrityMode) {\n            case 0:\n                {\n                    if (!(\"iterations\" in parameters))\n                        throw new ParameterError(\"iterations\");\n                    ParameterError.assertEmpty(parameters.pbkdf2HashAlgorithm, \"pbkdf2HashAlgorithm\");\n                    ParameterError.assertEmpty(parameters.hmacHashAlgorithm, \"hmacHashAlgorithm\");\n                    ParameterError.assertEmpty(parameters.password, \"password\");\n                    const saltBuffer = new ArrayBuffer(64);\n                    const saltView = new Uint8Array(saltBuffer);\n                    crypto.getRandomValues(saltView);\n                    const data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\n                    this.authSafe = new ContentInfo({\n                        contentType: ContentInfo.DATA,\n                        content: new asn1js.OctetString({ valueHex: data })\n                    });\n                    const result = await crypto.stampDataWithPassword({\n                        password: parameters.password,\n                        hashAlgorithm: parameters.hmacHashAlgorithm,\n                        salt: saltBuffer,\n                        iterationCount: parameters.iterations,\n                        contentToStamp: data\n                    });\n                    this.macData = new MacData({\n                        mac: new DigestInfo({\n                            digestAlgorithm: new AlgorithmIdentifier({\n                                algorithmId: crypto.getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm }, true, \"hmacHashAlgorithm\"),\n                            }),\n                            digest: new asn1js.OctetString({ valueHex: result })\n                        }),\n                        macSalt: new asn1js.OctetString({ valueHex: saltBuffer }),\n                        iterations: parameters.iterations\n                    });\n                }\n                break;\n            case 1:\n                {\n                    if (!(\"signingCertificate\" in parameters)) {\n                        throw new ParameterError(\"signingCertificate\");\n                    }\n                    ParameterError.assertEmpty(parameters.privateKey, \"privateKey\");\n                    ParameterError.assertEmpty(parameters.hashAlgorithm, \"hashAlgorithm\");\n                    const toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\n                    const cmsSigned = new SignedData({\n                        version: 1,\n                        encapContentInfo: new EncapsulatedContentInfo({\n                            eContentType: \"1.2.840.113549.1.7.1\",\n                            eContent: new asn1js.OctetString({ valueHex: toBeSigned })\n                        }),\n                        certificates: [parameters.signingCertificate]\n                    });\n                    const result = await crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned));\n                    const signedAttr = [];\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.3\",\n                        values: [\n                            new asn1js.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\n                        ]\n                    }));\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.5\",\n                        values: [\n                            new asn1js.UTCTime({ valueDate: new Date() })\n                        ]\n                    }));\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.4\",\n                        values: [\n                            new asn1js.OctetString({ valueHex: result })\n                        ]\n                    }));\n                    cmsSigned.signerInfos.push(new SignerInfo({\n                        version: 1,\n                        sid: new IssuerAndSerialNumber({\n                            issuer: parameters.signingCertificate.issuer,\n                            serialNumber: parameters.signingCertificate.serialNumber\n                        }),\n                        signedAttrs: new SignedAndUnsignedAttributes({\n                            type: 0,\n                            attributes: signedAttr\n                        })\n                    }));\n                    await cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm, undefined, crypto);\n                    this.authSafe = new ContentInfo({\n                        contentType: \"1.2.840.113549.1.7.2\",\n                        content: cmsSigned.toSchema(true)\n                    });\n                }\n                break;\n            default:\n                throw new Error(`Parameter \"integrityMode\" has unknown value: ${this.parsedValue.integrityMode}`);\n        }\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        if (parameters.checkIntegrity === undefined) {\n            parameters.checkIntegrity = true;\n        }\n        this.parsedValue = {};\n        switch (this.authSafe.contentType) {\n            case ContentInfo.DATA:\n                {\n                    ParameterError.assertEmpty(parameters.password, \"password\");\n                    this.parsedValue.integrityMode = 0;\n                    ArgumentError.assert(this.authSafe.content, \"authSafe.content\", asn1js.OctetString);\n                    const authSafeContent = this.authSafe.content.getValue();\n                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(authSafeContent);\n                    if (parameters.checkIntegrity) {\n                        if (!this.macData) {\n                            throw new Error(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\");\n                        }\n                        const hashAlgorithm = crypto.getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId, true, \"digestAlgorithm\");\n                        const result = await crypto.verifyDataStampedWithPassword({\n                            password: parameters.password,\n                            hashAlgorithm: hashAlgorithm.name,\n                            salt: BufferSourceConverter.toArrayBuffer(this.macData.macSalt.valueBlock.valueHexView),\n                            iterationCount: this.macData.iterations || 1,\n                            contentToVerify: authSafeContent,\n                            signatureToVerify: BufferSourceConverter.toArrayBuffer(this.macData.mac.digest.valueBlock.valueHexView),\n                        });\n                        if (!result) {\n                            throw new Error(\"Integrity for the PKCS#12 data is broken!\");\n                        }\n                    }\n                }\n                break;\n            case ContentInfo.SIGNED_DATA:\n                {\n                    this.parsedValue.integrityMode = 1;\n                    const cmsSigned = new SignedData({ schema: this.authSafe.content });\n                    const eContent = cmsSigned.encapContentInfo.eContent;\n                    ParameterError.assert(eContent, \"eContent\", \"cmsSigned.encapContentInfo\");\n                    ArgumentError.assert(eContent, \"eContent\", asn1js.OctetString);\n                    const data = eContent.getValue();\n                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(data);\n                    const ok = await cmsSigned.verify({ signer: 0, checkChain: false }, crypto);\n                    if (!ok) {\n                        throw new Error(\"Integrity for the PKCS#12 data is broken!\");\n                    }\n                }\n                break;\n            default:\n                throw new Error(`Incorrect value for \"this.authSafe.contentType\": ${this.authSafe.contentType}`);\n        }\n    }\n}\nPFX.CLASS_NAME = \"PFX\";\n\nconst STATUS$1 = \"status\";\nconst STATUS_STRINGS = \"statusStrings\";\nconst FAIL_INFO = \"failInfo\";\nconst CLEAR_PROPS$2 = [\n    STATUS$1,\n    STATUS_STRINGS,\n    FAIL_INFO\n];\nvar PKIStatus;\n(function (PKIStatus) {\n    PKIStatus[PKIStatus[\"granted\"] = 0] = \"granted\";\n    PKIStatus[PKIStatus[\"grantedWithMods\"] = 1] = \"grantedWithMods\";\n    PKIStatus[PKIStatus[\"rejection\"] = 2] = \"rejection\";\n    PKIStatus[PKIStatus[\"waiting\"] = 3] = \"waiting\";\n    PKIStatus[PKIStatus[\"revocationWarning\"] = 4] = \"revocationWarning\";\n    PKIStatus[PKIStatus[\"revocationNotification\"] = 5] = \"revocationNotification\";\n})(PKIStatus || (PKIStatus = {}));\nclass PKIStatusInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.status = pvutils.getParametersValue(parameters, STATUS$1, PKIStatusInfo.defaultValues(STATUS$1));\n        if (STATUS_STRINGS in parameters) {\n            this.statusStrings = pvutils.getParametersValue(parameters, STATUS_STRINGS, PKIStatusInfo.defaultValues(STATUS_STRINGS));\n        }\n        if (FAIL_INFO in parameters) {\n            this.failInfo = pvutils.getParametersValue(parameters, FAIL_INFO, PKIStatusInfo.defaultValues(FAIL_INFO));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case STATUS$1:\n                return 2;\n            case STATUS_STRINGS:\n                return [];\n            case FAIL_INFO:\n                return new asn1js.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case STATUS$1:\n                return (memberValue === PKIStatusInfo.defaultValues(memberName));\n            case STATUS_STRINGS:\n                return (memberValue.length === 0);\n            case FAIL_INFO:\n                return (memberValue.isEqual(PKIStatusInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js.Integer({ name: (names.status || EMPTY_STRING) }),\n                new asn1js.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js.Repeated({\n                            name: (names.statusStrings || EMPTY_STRING),\n                            value: new asn1js.Utf8String()\n                        })\n                    ]\n                }),\n                new asn1js.BitString({\n                    name: (names.failInfo || EMPTY_STRING),\n                    optional: true\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$2);\n        const asn1 = asn1js.compareSchema(schema, schema, PKIStatusInfo.schema({\n            names: {\n                status: STATUS$1,\n                statusStrings: STATUS_STRINGS,\n                failInfo: FAIL_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        const _status = asn1.result.status;\n        if ((_status.valueBlock.isHexOnly === true) ||\n            (_status.valueBlock.valueDec < 0) ||\n            (_status.valueBlock.valueDec > 5))\n            throw new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\n        this.status = _status.valueBlock.valueDec;\n        if (STATUS_STRINGS in asn1.result)\n            this.statusStrings = asn1.result.statusStrings;\n        if (FAIL_INFO in asn1.result)\n            this.failInfo = asn1.result.failInfo;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.status }));\n        if (this.statusStrings) {\n            outputArray.push(new asn1js.Sequence({\n                optional: true,\n                value: this.statusStrings\n            }));\n        }\n        if (this.failInfo) {\n            outputArray.push(this.failInfo);\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            status: this.status\n        };\n        if (this.statusStrings) {\n            res.statusStrings = Array.from(this.statusStrings, o => o.toJSON());\n        }\n        if (this.failInfo) {\n            res.failInfo = this.failInfo.toJSON();\n        }\n        return res;\n    }\n}\nPKIStatusInfo.CLASS_NAME = \"PKIStatusInfo\";\n\nconst VERSION = \"version\";\nconst MESSAGE_IMPRINT = \"messageImprint\";\nconst REQ_POLICY = \"reqPolicy\";\nconst NONCE = \"nonce\";\nconst CERT_REQ = \"certReq\";\nconst EXTENSIONS = \"extensions\";\nconst TIME_STAMP_REQ = \"TimeStampReq\";\nconst TIME_STAMP_REQ_VERSION = `${TIME_STAMP_REQ}.${VERSION}`;\nconst TIME_STAMP_REQ_MESSAGE_IMPRINT = `${TIME_STAMP_REQ}.${MESSAGE_IMPRINT}`;\nconst TIME_STAMP_REQ_POLICY = `${TIME_STAMP_REQ}.${REQ_POLICY}`;\nconst TIME_STAMP_REQ_NONCE = `${TIME_STAMP_REQ}.${NONCE}`;\nconst TIME_STAMP_REQ_CERT_REQ = `${TIME_STAMP_REQ}.${CERT_REQ}`;\nconst TIME_STAMP_REQ_EXTENSIONS = `${TIME_STAMP_REQ}.${EXTENSIONS}`;\nconst CLEAR_PROPS$1 = [\n    TIME_STAMP_REQ_VERSION,\n    TIME_STAMP_REQ_MESSAGE_IMPRINT,\n    TIME_STAMP_REQ_POLICY,\n    TIME_STAMP_REQ_NONCE,\n    TIME_STAMP_REQ_CERT_REQ,\n    TIME_STAMP_REQ_EXTENSIONS,\n];\nclass TimeStampReq extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils.getParametersValue(parameters, VERSION, TimeStampReq.defaultValues(VERSION));\n        this.messageImprint = pvutils.getParametersValue(parameters, MESSAGE_IMPRINT, TimeStampReq.defaultValues(MESSAGE_IMPRINT));\n        if (REQ_POLICY in parameters) {\n            this.reqPolicy = pvutils.getParametersValue(parameters, REQ_POLICY, TimeStampReq.defaultValues(REQ_POLICY));\n        }\n        if (NONCE in parameters) {\n            this.nonce = pvutils.getParametersValue(parameters, NONCE, TimeStampReq.defaultValues(NONCE));\n        }\n        if (CERT_REQ in parameters) {\n            this.certReq = pvutils.getParametersValue(parameters, CERT_REQ, TimeStampReq.defaultValues(CERT_REQ));\n        }\n        if (EXTENSIONS in parameters) {\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS, TimeStampReq.defaultValues(EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION:\n                return 0;\n            case MESSAGE_IMPRINT:\n                return new MessageImprint();\n            case REQ_POLICY:\n                return EMPTY_STRING;\n            case NONCE:\n                return new asn1js.Integer();\n            case CERT_REQ:\n                return false;\n            case EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION:\n            case REQ_POLICY:\n            case CERT_REQ:\n                return (memberValue === TimeStampReq.defaultValues(memberName));\n            case MESSAGE_IMPRINT:\n                return ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\n                    (MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\n            case NONCE:\n                return (memberValue.isEqual(TimeStampReq.defaultValues(memberName)));\n            case EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || TIME_STAMP_REQ),\n            value: [\n                new asn1js.Integer({ name: (names.version || TIME_STAMP_REQ_VERSION) }),\n                MessageImprint.schema(names.messageImprint || {\n                    names: {\n                        blockName: TIME_STAMP_REQ_MESSAGE_IMPRINT\n                    }\n                }),\n                new asn1js.ObjectIdentifier({\n                    name: (names.reqPolicy || TIME_STAMP_REQ_POLICY),\n                    optional: true\n                }),\n                new asn1js.Integer({\n                    name: (names.nonce || TIME_STAMP_REQ_NONCE),\n                    optional: true\n                }),\n                new asn1js.Boolean({\n                    name: (names.certReq || TIME_STAMP_REQ_CERT_REQ),\n                    optional: true\n                }),\n                new asn1js.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js.Repeated({\n                            name: (names.extensions || TIME_STAMP_REQ_EXTENSIONS),\n                            value: Extension.schema()\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS$1);\n        const asn1 = asn1js.compareSchema(schema, schema, TimeStampReq.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[TIME_STAMP_REQ_VERSION].valueBlock.valueDec;\n        this.messageImprint = new MessageImprint({ schema: asn1.result[TIME_STAMP_REQ_MESSAGE_IMPRINT] });\n        if (TIME_STAMP_REQ_POLICY in asn1.result)\n            this.reqPolicy = asn1.result[TIME_STAMP_REQ_POLICY].valueBlock.toString();\n        if (TIME_STAMP_REQ_NONCE in asn1.result)\n            this.nonce = asn1.result[TIME_STAMP_REQ_NONCE];\n        if (TIME_STAMP_REQ_CERT_REQ in asn1.result)\n            this.certReq = asn1.result[TIME_STAMP_REQ_CERT_REQ].valueBlock.value;\n        if (TIME_STAMP_REQ_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TIME_STAMP_REQ_EXTENSIONS], element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js.Integer({ value: this.version }));\n        outputArray.push(this.messageImprint.toSchema());\n        if (this.reqPolicy)\n            outputArray.push(new asn1js.ObjectIdentifier({ value: this.reqPolicy }));\n        if (this.nonce)\n            outputArray.push(this.nonce);\n        if ((CERT_REQ in this) && (TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false))\n            outputArray.push(new asn1js.Boolean({ value: this.certReq }));\n        if (this.extensions) {\n            outputArray.push(new asn1js.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.extensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            messageImprint: this.messageImprint.toJSON()\n        };\n        if (this.reqPolicy !== undefined)\n            res.reqPolicy = this.reqPolicy;\n        if (this.nonce !== undefined)\n            res.nonce = this.nonce.toJSON();\n        if ((this.certReq !== undefined) && (TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false))\n            res.certReq = this.certReq;\n        if (this.extensions) {\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nTimeStampReq.CLASS_NAME = \"TimeStampReq\";\n\nconst STATUS = \"status\";\nconst TIME_STAMP_TOKEN = \"timeStampToken\";\nconst TIME_STAMP_RESP = \"TimeStampResp\";\nconst TIME_STAMP_RESP_STATUS = `${TIME_STAMP_RESP}.${STATUS}`;\nconst TIME_STAMP_RESP_TOKEN = `${TIME_STAMP_RESP}.${TIME_STAMP_TOKEN}`;\nconst CLEAR_PROPS = [\n    TIME_STAMP_RESP_STATUS,\n    TIME_STAMP_RESP_TOKEN\n];\nclass TimeStampResp extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.status = pvutils.getParametersValue(parameters, STATUS, TimeStampResp.defaultValues(STATUS));\n        if (TIME_STAMP_TOKEN in parameters) {\n            this.timeStampToken = pvutils.getParametersValue(parameters, TIME_STAMP_TOKEN, TimeStampResp.defaultValues(TIME_STAMP_TOKEN));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case STATUS:\n                return new PKIStatusInfo();\n            case TIME_STAMP_TOKEN:\n                return new ContentInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case STATUS:\n                return ((PKIStatusInfo.compareWithDefault(STATUS, memberValue.status)) &&\n                    ((\"statusStrings\" in memberValue) === false) &&\n                    ((\"failInfo\" in memberValue) === false));\n            case TIME_STAMP_TOKEN:\n                return ((memberValue.contentType === EMPTY_STRING) &&\n                    (memberValue.content instanceof asn1js.Any));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\n        return (new asn1js.Sequence({\n            name: (names.blockName || TIME_STAMP_RESP),\n            value: [\n                PKIStatusInfo.schema(names.status || {\n                    names: {\n                        blockName: TIME_STAMP_RESP_STATUS\n                    }\n                }),\n                ContentInfo.schema(names.timeStampToken || {\n                    names: {\n                        blockName: TIME_STAMP_RESP_TOKEN,\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils.clearProps(schema, CLEAR_PROPS);\n        const asn1 = asn1js.compareSchema(schema, schema, TimeStampResp.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.status = new PKIStatusInfo({ schema: asn1.result[TIME_STAMP_RESP_STATUS] });\n        if (TIME_STAMP_RESP_TOKEN in asn1.result)\n            this.timeStampToken = new ContentInfo({ schema: asn1.result[TIME_STAMP_RESP_TOKEN] });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.status.toSchema());\n        if (this.timeStampToken) {\n            outputArray.push(this.timeStampToken.toSchema());\n        }\n        return (new asn1js.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            status: this.status.toJSON()\n        };\n        if (this.timeStampToken) {\n            res.timeStampToken = this.timeStampToken.toJSON();\n        }\n        return res;\n    }\n    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {\n        this.assertContentType();\n        const signed = new SignedData({ schema: this.timeStampToken.content });\n        return signed.sign(privateKey, 0, hashAlgorithm, undefined, crypto);\n    }\n    async verify(verificationParameters = { signer: 0, trustedCerts: [], data: EMPTY_BUFFER }, crypto = getCrypto(true)) {\n        this.assertContentType();\n        const signed = new SignedData({ schema: this.timeStampToken.content });\n        return signed.verify(verificationParameters, crypto);\n    }\n    assertContentType() {\n        if (!this.timeStampToken) {\n            throw new Error(\"timeStampToken is absent in TSP response\");\n        }\n        if (this.timeStampToken.contentType !== id_ContentType_SignedData) {\n            throw new Error(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\n        }\n    }\n}\nTimeStampResp.CLASS_NAME = \"TimeStampResp\";\n\nfunction initCryptoEngine() {\n    if (typeof self !== \"undefined\") {\n        if (\"crypto\" in self) {\n            let engineName = \"webcrypto\";\n            if (\"webkitSubtle\" in self.crypto) {\n                engineName = \"safari\";\n            }\n            setEngine(engineName, new CryptoEngine({ name: engineName, crypto: crypto }));\n        }\n    }\n    else if (typeof crypto !== \"undefined\" && \"webcrypto\" in crypto) {\n        const name = \"NodeJS ^15\";\n        const nodeCrypto = crypto.webcrypto;\n        setEngine(name, new CryptoEngine({ name, crypto: nodeCrypto }));\n    }\n}\n\ninitCryptoEngine();\n\nexport { AbstractCryptoEngine, AccessDescription, Accuracy, AlgorithmIdentifier, AltName, ArgumentError, AsnError, AttCertValidityPeriod, Attribute, AttributeCertificateInfoV1, AttributeCertificateInfoV2, AttributeCertificateV1, AttributeCertificateV2, AttributeTypeAndValue, AuthenticatedSafe, AuthorityKeyIdentifier, BasicConstraints, BasicOCSPResponse, CAVersion, CRLBag, CRLDistributionPoints, CertBag, CertID, Certificate, CertificateChainValidationEngine, CertificatePolicies, CertificateRevocationList, CertificateSet, CertificateTemplate, CertificationRequest, ChainValidationCode, ChainValidationError, ContentInfo, CryptoEngine, DigestInfo, DistributionPoint, ECCCMSSharedInfo, ECNamedCurves, ECPrivateKey, ECPublicKey, EncapsulatedContentInfo, EncryptedContentInfo, EncryptedData, EnvelopedData, ExtKeyUsage, Extension, ExtensionValueFactory, Extensions, GeneralName, GeneralNames, GeneralSubtree, HASHED_MESSAGE, HASH_ALGORITHM, Holder, InfoAccess, IssuerAndSerialNumber, IssuerSerial, IssuingDistributionPoint, KEKIdentifier, KEKRecipientInfo, KeyAgreeRecipientIdentifier, KeyAgreeRecipientInfo, KeyBag, KeyTransRecipientInfo, MICROS, MILLIS, MacData, MessageImprint, NameConstraints, OCSPRequest, OCSPResponse, ObjectDigestInfo, OriginatorIdentifierOrKey, OriginatorInfo, OriginatorPublicKey, OtherCertificateFormat, OtherKeyAttribute, OtherPrimeInfo, OtherRecipientInfo, OtherRevocationInfoFormat, PBES2Params, PBKDF2Params, PFX, PKCS8ShroudedKeyBag, PKIStatus, PKIStatusInfo, POLICY_IDENTIFIER, POLICY_QUALIFIERS, ParameterError, PasswordRecipientinfo, PkiObject, PolicyConstraints, PolicyInformation, PolicyMapping, PolicyMappings, PolicyQualifierInfo, PrivateKeyInfo, PrivateKeyUsagePeriod, PublicKeyInfo, QCStatement, QCStatements, RDN, RSAESOAEPParams, RSAPrivateKey, RSAPublicKey, RSASSAPSSParams, RecipientEncryptedKey, RecipientEncryptedKeys, RecipientIdentifier, RecipientInfo, RecipientKeyIdentifier, RelativeDistinguishedNames, Request, ResponseBytes, ResponseData, RevocationInfoChoices, RevokedCertificate, SECONDS, SafeBag, SafeBagValueFactory, SafeContents, SecretBag, Signature, SignedAndUnsignedAttributes, SignedCertificateTimestamp, SignedCertificateTimestampList, SignedData, SignedDataVerifyError, SignerInfo, SingleResponse, SubjectDirectoryAttributes, TBSRequest, TSTInfo, TYPE$4 as TYPE, TYPE_AND_VALUES, Time, TimeStampReq, TimeStampResp, TimeType, V2Form, VALUE$5 as VALUE, VALUE_BEFORE_DECODE, checkCA, createCMSECDSASignature, createECDSASignatureFromCMS, engine, getAlgorithmByOID, getAlgorithmParameters, getCrypto, getEngine, getHashAlgorithm, getOIDByAlgorithm, getRandomValues, id_AnyPolicy, id_AuthorityInfoAccess, id_AuthorityKeyIdentifier, id_BaseCRLNumber, id_BasicConstraints, id_CRLBag_X509CRL, id_CRLDistributionPoints, id_CRLNumber, id_CRLReason, id_CertBag_AttributeCertificate, id_CertBag_SDSICertificate, id_CertBag_X509Certificate, id_CertificateIssuer, id_CertificatePolicies, id_ContentType_Data, id_ContentType_EncryptedData, id_ContentType_EnvelopedData, id_ContentType_SignedData, id_ExtKeyUsage, id_FreshestCRL, id_InhibitAnyPolicy, id_InvalidityDate, id_IssuerAltName, id_IssuingDistributionPoint, id_KeyUsage, id_MicrosoftAppPolicies, id_MicrosoftCaVersion, id_MicrosoftCertTemplateV1, id_MicrosoftCertTemplateV2, id_MicrosoftPrevCaCertHash, id_NameConstraints, id_PKIX_OCSP_Basic, id_PolicyConstraints, id_PolicyMappings, id_PrivateKeyUsagePeriod, id_QCStatements, id_SignedCertificateTimestampList, id_SubjectAltName, id_SubjectDirectoryAttributes, id_SubjectInfoAccess, id_SubjectKeyIdentifier, id_ad, id_ad_caIssuers, id_ad_ocsp, id_eContentType_TSTInfo, id_pkix, id_sha1, id_sha256, id_sha384, id_sha512, kdf, setEngine, stringPrep, verifySCTsForCertificate };\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/* eslint-disable jsdoc/require-jsdoc */\n\nexport function bufferToString(buffer: Uint8Array): string {\n\treturn String.fromCharCode(...buffer)\n}\n\nexport function stringToBuffer(str: string): Uint8Array {\n\treturn Uint8Array.from(str, c => c.charCodeAt(0))\n}\n\nexport function bufferToBase64(buffer: Uint8Array): string {\n\treturn btoa(bufferToString(buffer))\n}\n\nexport function bufferToHex(buffer: Uint8Array): string {\n\treturn Array.from(buffer).map(byte => byte.toString(16).padStart(2, '0')).join('')\n}\n\nexport function base64ToBuffer(base64Str: string): Uint8Array {\n\treturn stringToBuffer(atob(base64Str))\n}\n\nexport function pemToBuffer(pem: string): Uint8Array {\n\tconst pemContents = pem\n\t\t.replace(/-----BEGIN ((PRIVATE KEY)|(PUBLIC KEY)|(CERTIFICATE))-----/, '')\n\t\t.replace(/-----END ((PRIVATE KEY)|(PUBLIC KEY)|(CERTIFICATE))-----/, '')\n\t\t.replace(/\\n/g, '')\n\n\treturn base64ToBuffer(pemContents)\n}","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport { X509Certificate } from '@peculiar/x509'\nimport { Certificate, CryptoEngine, SignedData, ContentInfo } from 'pkijs'\n\nimport { bufferToHex, pemToBuffer } from './bufferUtils'\nimport type { UserWithAccess } from '../models'\n\n/* eslint-disable jsdoc/require-jsdoc */\n\nexport async function encryptWithAES(content: BufferSource, key: CryptoKey, options: Partial<AesGcmParams> = {}) {\n\tconst iv = self.crypto.getRandomValues(new Uint8Array(16))\n\n\tconst encryptedContent = await self.crypto.subtle.encrypt(\n\t\t{ name: 'AES-GCM', iv, ...options },\n\t\tkey,\n\t\tcontent,\n\t)\n\n\treturn {\n\t\tencryptedContent: new Uint8Array(encryptedContent),\n\t\tiv,\n\t}\n}\n\nexport async function decryptWithAES(content: BufferSource, key: CryptoKey, options: Partial<AesGcmParams> = {}): Promise<ArrayBuffer> {\n\treturn await self.crypto.subtle.decrypt(\n\t\t{ name: 'AES-GCM', ...options },\n\t\tkey,\n\t\tcontent,\n\t)\n}\n\nexport async function decryptWithRSA(content: BufferSource, key: CryptoKey): Promise<ArrayBuffer> {\n\treturn await self.crypto.subtle.decrypt(\n\t\t{ name: 'RSA-OAEP' },\n\t\tkey,\n\t\tcontent,\n\t)\n}\n\nexport async function loadAESPrivateKey(key: Uint8Array): Promise<CryptoKey> {\n\treturn await self.crypto.subtle.importKey(\n\t\t'raw',\n\t\tkey,\n\t\t{\n\t\t\tname: 'AES-GCM',\n\t\t\tlength: 128,\n\t\t},\n\t\ttrue,\n\t\t['decrypt', 'encrypt'],\n\t)\n}\n\nexport async function loadServerPublicKey(key: Uint8Array): Promise<CryptoKey> {\n\treturn await self.crypto.subtle.importKey(\n\t\t'spki',\n\t\tkey,\n\t\t{\n\t\t\tname: 'RSASSA-PKCS1-v1_5',\n\t\t\thash: 'SHA-256', // TODO: get from server?\n\t\t},\n\t\ttrue,\n\t\t['verify'],\n\t)\n}\n\nexport async function loadRSAPrivateKey(key: Uint8Array): Promise<CryptoKey> {\n\treturn await self.crypto.subtle.importKey(\n\t\t'pkcs8',\n\t\tkey,\n\t\t{\n\t\t\tname: 'RSA-OAEP',\n\t\t\thash: 'SHA-256',\n\t\t},\n\t\ttrue,\n\t\t['decrypt'],\n\t)\n}\n\nexport async function exportRSAKey(key: CryptoKey): Promise<Uint8Array> {\n\tif (key.type === 'public') {\n\t\treturn new Uint8Array(await self.crypto.subtle.exportKey('spki', key))\n\t} else {\n\t\treturn new Uint8Array(await self.crypto.subtle.exportKey('pkcs8', key))\n\t}\n}\n\nexport async function exportAESKey(key: CryptoKey): Promise<Uint8Array> {\n\treturn new Uint8Array(await self.crypto.subtle.exportKey('raw', key))\n}\n\nexport async function sha256Hash(buffer: Uint8Array): Promise<string> {\n\tconst hashBuffer = await self.crypto.subtle.digest('SHA-256', buffer)\n\treturn bufferToHex(new Uint8Array(hashBuffer))\n}\n\nexport async function validateCertificateSignature(certificate: string, publicKey: CryptoKey): Promise<boolean> {\n\tconst cert = new X509Certificate(certificate)\n\n\treturn cert.verify({ publicKey }, getPatchedCrypto())\n}\n\n// Return a patched crypto because x509's default does not give the correct data type to the subtle.verify method\nfunction getPatchedCrypto(): Crypto {\n\treturn {\n\t\t...self.crypto,\n\t\tsubtle: {\n\t\t\t...self.crypto.subtle,\n\t\t\tasync verify(algorithm: globalThis.AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, signature: ArrayBuffer, data: ArrayBuffer): Promise<boolean> {\n\t\t\t\treturn self.crypto.subtle.verify(algorithm, key, new Uint8Array(signature), new Uint8Array(data))\n\t\t\t},\n\t\t},\n\t}\n}\n\nexport async function validateCMSSignature(signedData: Uint8Array, cmsBuffer: Uint8Array, users: UserWithAccess[]): Promise<boolean> {\n\t// Parse the CMS buffer\n\tconst cmsContent = ContentInfo.fromBER(cmsBuffer)\n\tconst originalSignedData = new SignedData({ schema: cmsContent.content })\n\n\t// Get the signer certificate from the users array\n\tconst signerInfo = originalSignedData.signerInfos[0]\n\tconst signerUserId = signerInfo.sid.issuer.typesAndValues.find(({ type }) => type === '2.5.4.3' /** Common name OID */).value.valueBlock.value\n\tconst signer = users.find(({ userId }) => userId === signerUserId)\n\tif (signer === undefined) {\n\t\tthrow new Error('Signer not found in the users array')\n\t}\n\tconst signerCertificate = Certificate.fromBER(pemToBuffer(signer.certificate))\n\n\tconst verificationResult = await originalSignedData.verify(\n\t\t{\n\t\t\tsigner: 0,\n\t\t\ttrustedCerts: [signerCertificate],\n\t\t\tdata: signedData as unknown as ArrayBuffer,\n\t\t\tcheckChain: true,\n\t\t},\n\t\tgetPatchedCryptoEngine(),\n\t)\n\n\treturn verificationResult\n}\n\nclass CustomCryptoEngine extends CryptoEngine {\n\n\tverify(algorithm: globalThis.AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, signature: BufferSource, data: ArrayBuffer): Promise<boolean> {\n\t\treturn super.verify(algorithm, key, signature, new Uint8Array(data))\n\t}\n\n}\n\n// Return a patched crypto engine because pkijs' default engine does not give the correct data type to the subtle.verify method\nfunction getPatchedCryptoEngine() {\n\treturn new CustomCryptoEngine({ crypto: self.crypto })\n}\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/* eslint-disable jsdoc/require-jsdoc */\n\nimport logger from './logger.ts'\nimport type { PrivateKeyInfo } from '../models.ts'\nimport { decryptWithAES, loadRSAPrivateKey } from './crypto.ts'\nimport { bufferToString, pemToBuffer } from './bufferUtils.ts'\n\nexport async function decryptPrivateKey(privateKeyInfo: PrivateKeyInfo, mnemonic: string): Promise<CryptoKey> {\n\tlogger.debug('Decrypting private key', { privateKeyInfo, mnemonic })\n\n\t// We need to support the old mnemonic formats for backwards compatibility\n\tconst mnemonicPrivateKeys = await Promise.all([\n\t\tawait mnemonicToPrivateKey(mnemonic, privateKeyInfo.salt, { hash: 'SHA-256', iterations: 600000 }),\n\t\tawait mnemonicToPrivateKey(mnemonic, privateKeyInfo.salt, { hash: 'SHA-1', iterations: 1024 }),\n\t\tawait mnemonicToPrivateKey(mnemonic, privateKeyInfo.salt, { hash: 'SHA-1', iterations: 600000 }),\n\t])\n\n\tfor (const mnemonicPrivateKey of mnemonicPrivateKeys) {\n\t\ttry {\n\t\t\tconst rawPrivateKey = await decryptWithAES(\n\t\t\t\tprivateKeyInfo.encryptedPrivateKey,\n\t\t\t\tmnemonicPrivateKey,\n\t\t\t\t{ iv: privateKeyInfo.iv, tagLength: 128 },\n\t\t\t)\n\n\t\t\tconst pemKey = atob(bufferToString(new Uint8Array(rawPrivateKey)))\n\t\t\treturn loadRSAPrivateKey(pemToBuffer(pemKey))\n\t\t} catch {\n\t\t}\n\t}\n\n\tthrow new Error('Failed to decrypt private key')\n}\n\nasync function mnemonicToPrivateKey(mnemonic: string, salt: Uint8Array, params: Partial<Pbkdf2Params>): Promise<CryptoKey> {\n\tconst keyMaterial = await crypto.subtle.importKey(\n\t\t'raw',\n\t\tnew TextEncoder().encode(mnemonic.replaceAll(' ', '')),\n\t\t{ name: 'PBKDF2' },\n\t\tfalse,\n\t\t['deriveKey'],\n\t)\n\n\treturn await crypto.subtle.deriveKey(\n\t\t{\n\t\t\tname: 'PBKDF2',\n\t\t\tsalt,\n\t\t\t...params,\n\t\t},\n\t\tkeyMaterial,\n\t\t{ name: 'AES-GCM', length: 256 },\n\t\ttrue,\n\t\t['decrypt', 'encrypt'],\n\t)\n}\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/* eslint-disable jsdoc/require-jsdoc */\nimport { generateOcsUrl } from '@nextcloud/router'\nimport axios from '@nextcloud/axios'\nimport type { OCSResponse } from '@nextcloud/typings/ocs'\n\nimport type { PrivateKeyInfo } from '../models.ts'\nimport { base64ToBuffer, pemToBuffer } from './bufferUtils.ts'\nimport { loadServerPublicKey } from './crypto.ts'\n\n// API: https://github.com/nextcloud/end_to_end_encryption/blob/master/doc/api.md\n\nconst API_ROOT = 'apps/end_to_end_encryption/api/v2'\nconst Url = {\n\tPrivateKey: API_ROOT + '/private-key',\n\tMetadata: API_ROOT + '/meta-data/{fileId}',\n\tServerKey: API_ROOT + '/server-key',\n}\n\nexport async function getPrivateKey(): Promise<PrivateKeyInfo> {\n\tconst response = await axios.get<OCSResponse<{'private-key': string}>>(\n\t\tgenerateOcsUrl(Url.PrivateKey),\n\t\t{ headers: { 'X-E2EE-SUPPORTED': 'true' } },\n\t)\n\tconst encryptedPrivateKeyInfo = response.data.ocs.data['private-key']\n\tconst [encryptedPrivateKey, iv, salt] = encryptedPrivateKeyInfo.split('|')\n\treturn {\n\t\tencryptedPrivateKey: base64ToBuffer(encryptedPrivateKey),\n\t\tiv: base64ToBuffer(iv),\n\t\tsalt: base64ToBuffer(salt),\n\t}\n}\n\nexport async function getServerPublicKey(): Promise<CryptoKey> {\n\tconst response = await axios.get<OCSResponse<{'public-key': string}>>(\n\t\tgenerateOcsUrl(Url.ServerKey),\n\t\t{ headers: { 'X-E2EE-SUPPORTED': 'true' } },\n\t)\n\n\treturn await loadServerPublicKey(pemToBuffer(response.data.ocs.data['public-key']))\n}\n","import { n as normalizeComponent } from \"./_plugin-vue2_normalizer-DU4iP6Vu.mjs\";\nconst _sfc_main = {\n  name: \"AlertCircleOutlineIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nvar _sfc_render = function render() {\n  var _vm = this, _c = _vm._self._c;\n  return _c(\"span\", _vm._b({ staticClass: \"material-design-icon alert-circle-outline-icon\", attrs: { \"aria-hidden\": _vm.title ? null : \"true\", \"aria-label\": _vm.title, \"role\": \"img\" }, on: { \"click\": function($event) {\n    return _vm.$emit(\"click\", $event);\n  } } }, \"span\", _vm.$attrs, false), [_c(\"svg\", { staticClass: \"material-design-icon__svg\", attrs: { \"fill\": _vm.fillColor, \"width\": _vm.size, \"height\": _vm.size, \"viewBox\": \"0 0 24 24\" } }, [_c(\"path\", { attrs: { \"d\": \"M11,15H13V17H11V15M11,7H13V13H11V7M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20Z\" } }, [_vm.title ? _c(\"title\", [_vm._v(_vm._s(_vm.title))]) : _vm._e()])])]);\n};\nvar _sfc_staticRenderFns = [];\nvar __component__ = /* @__PURE__ */ normalizeComponent(\n  _sfc_main,\n  _sfc_render,\n  _sfc_staticRenderFns,\n  false,\n  null,\n  null\n);\nconst AlertCircle = __component__.exports;\nexport {\n  AlertCircle as A\n};\n","import { n as normalizeComponent } from \"./_plugin-vue2_normalizer-DU4iP6Vu.mjs\";\nconst _sfc_main = {\n  name: \"CheckIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nvar _sfc_render = function render() {\n  var _vm = this, _c = _vm._self._c;\n  return _c(\"span\", _vm._b({ staticClass: \"material-design-icon check-icon\", attrs: { \"aria-hidden\": _vm.title ? null : \"true\", \"aria-label\": _vm.title, \"role\": \"img\" }, on: { \"click\": function($event) {\n    return _vm.$emit(\"click\", $event);\n  } } }, \"span\", _vm.$attrs, false), [_c(\"svg\", { staticClass: \"material-design-icon__svg\", attrs: { \"fill\": _vm.fillColor, \"width\": _vm.size, \"height\": _vm.size, \"viewBox\": \"0 0 24 24\" } }, [_c(\"path\", { attrs: { \"d\": \"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\" } }, [_vm.title ? _c(\"title\", [_vm._v(_vm._s(_vm.title))]) : _vm._e()])])]);\n};\nvar _sfc_staticRenderFns = [];\nvar __component__ = /* @__PURE__ */ normalizeComponent(\n  _sfc_main,\n  _sfc_render,\n  _sfc_staticRenderFns,\n  false,\n  null,\n  null\n);\nconst Check = __component__.exports;\nexport {\n  Check as C\n};\n","import '../assets/NcInputField-CUsdr7lV.css';\nimport NcButton from \"../Components/NcButton.mjs\";\nimport { G as GenRandomId } from \"./GenRandomId-CMooMQt0.mjs\";\nimport { A as AlertCircle } from \"./AlertCircleOutline-DBxbepLy.mjs\";\nimport { C as Check } from \"./Check-BkThHPH7.mjs\";\nimport { u as useModelMigration } from \"./useModelMigration-EhAWvqDD.mjs\";\nimport { n as normalizeComponent } from \"./_plugin-vue2_normalizer-DU4iP6Vu.mjs\";\nconst _sfc_main = {\n  name: \"NcInputField\",\n  components: {\n    NcButton,\n    AlertCircle,\n    Check\n  },\n  inheritAttrs: false,\n  model: {\n    prop: \"modelValue\",\n    event: \"update:modelValue\"\n  },\n  props: {\n    /**\n     * Removed in v9 - use `modelValue` (`v-model`) instead\n     * @deprecated\n     */\n    value: {\n      type: [String, Number],\n      default: void 0\n    },\n    /**\n     * The value of the input field\n     * If type is 'number' and a number is passed as value than the type of `update:modelValue` will also be 'number'\n     */\n    modelValue: {\n      type: [String, Number],\n      default: void 0\n    },\n    /**\n     * The type of the input element\n     */\n    type: {\n      type: String,\n      default: \"text\",\n      validator: (value) => [\n        \"text\",\n        \"password\",\n        \"email\",\n        \"tel\",\n        \"url\",\n        \"search\",\n        \"number\"\n      ].includes(value)\n    },\n    /**\n     * The input label, always provide one for accessibility purposes.\n     * This will also be used as a placeholder unless the placeholder\n     * prop is populated with a different string.\n     *\n     * Note: If the background color is not `--color-main-background` consider using an external label instead (see `labelOutside`).\n     */\n    label: {\n      type: String,\n      default: void 0\n    },\n    /**\n     * Pass in true if you want to use an external label. This is useful\n     * if you need a label that looks different from the one provided by\n     * this component\n     */\n    labelOutside: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * The placeholder of the input. This defaults as the string that's\n     * passed into the label prop. In order to remove the placeholder,\n     * pass in an empty string.\n     */\n    placeholder: {\n      type: String,\n      default: void 0\n    },\n    /**\n     * Controls whether to display the trailing button.\n     */\n    showTrailingButton: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Label of the trailing button\n     *\n     * Required when showTrailingButton is set\n     */\n    trailingButtonLabel: {\n      type: String,\n      default: \"\"\n    },\n    /**\n     * Toggles the success state of the component. Adds a checkmark icon.\n     * this cannot be used together with canClear.\n     */\n    success: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Toggles the error state of the component. Adds an error icon.\n     * this cannot be used together with canClear.\n     */\n    error: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Additional helper text message\n     *\n     * This will be displayed beneath the input field. In case the field is\n     * also marked as having an error, the text will be displayed in red.\n     */\n    helperText: {\n      type: String,\n      default: \"\"\n    },\n    /**\n     * Disable the input field\n     */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Specifies whether the input should have a pill form.\n     * By default, input has rounded corners.\n     */\n    pill: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Class to add to the input field.\n     * Necessary to use NcInputField in the NcActionInput component.\n     */\n    inputClass: {\n      type: [Object, String],\n      default: \"\"\n    }\n  },\n  emits: [\n    /**\n     * Removed in v9 - use `update:modelValue` (`v-model`) instead\n     * @deprecated\n     */\n    \"update:value\",\n    \"update:modelValue\",\n    /** Same as update:modelValue for Vue 2 compatibility */\n    \"update:model-value\",\n    \"trailing-button-click\"\n  ],\n  setup() {\n    const model = useModelMigration(\"value\", \"update:value\", true);\n    return {\n      model\n    };\n  },\n  computed: {\n    computedId() {\n      return this.$attrs.id && this.$attrs.id !== \"\" ? this.$attrs.id : this.inputName;\n    },\n    inputName() {\n      return \"input\" + GenRandomId();\n    },\n    hasLeadingIcon() {\n      return this.$slots.default;\n    },\n    hasTrailingIcon() {\n      return this.success;\n    },\n    hasPlaceholder() {\n      return this.placeholder !== \"\" && this.placeholder !== void 0;\n    },\n    computedPlaceholder() {\n      return this.hasPlaceholder ? this.placeholder : this.label;\n    },\n    isValidLabel() {\n      const isValidLabel = this.label || this.labelOutside;\n      if (!isValidLabel) {\n        console.warn(\"You need to add a label to the NcInputField component. Either use the prop label or use an external one, as per the example in the documentation.\");\n      }\n      return isValidLabel;\n    },\n    ariaDescribedby() {\n      const ariaDescribedby = [];\n      if (this.helperText.length > 0) {\n        ariaDescribedby.push(`${this.inputName}-helper-text`);\n      }\n      if (this.$attrs[\"aria-describedby\"]) {\n        ariaDescribedby.push(this.$attrs[\"aria-describedby\"]);\n      }\n      return ariaDescribedby.join(\" \") || null;\n    }\n  },\n  methods: {\n    /**\n     * Focus the input element\n     *\n     * @public\n     */\n    focus() {\n      this.$refs.input.focus();\n    },\n    /**\n     * Select all the text in the input\n     *\n     * @public\n     */\n    select() {\n      this.$refs.input.select();\n    },\n    handleInput(event) {\n      const newValue = this.type === \"number\" && typeof this.model === \"number\" ? parseFloat(event.target.value, 10) : event.target.value;\n      this.model = newValue;\n    },\n    handleTrailingButtonClick(event) {\n      this.$emit(\"trailing-button-click\", event);\n    }\n  }\n};\nvar _sfc_render = function render() {\n  var _vm = this, _c = _vm._self._c;\n  return _c(\"div\", { staticClass: \"input-field\", class: {\n    \"input-field--disabled\": _vm.disabled,\n    \"input-field--label-outside\": _vm.labelOutside || !_vm.isValidLabel,\n    \"input-field--leading-icon\": _vm.hasLeadingIcon,\n    \"input-field--trailing-icon\": _vm.showTrailingButton || _vm.hasTrailingIcon,\n    \"input-field--pill\": _vm.pill\n  } }, [_c(\"div\", { staticClass: \"input-field__main-wrapper\" }, [_c(\"input\", _vm._g(_vm._b({ ref: \"input\", staticClass: \"input-field__input\", class: [\n    _vm.inputClass,\n    {\n      \"input-field__input--success\": _vm.success,\n      \"input-field__input--error\": _vm.error\n    }\n  ], attrs: { \"id\": _vm.computedId, \"type\": _vm.type, \"disabled\": _vm.disabled, \"placeholder\": _vm.computedPlaceholder, \"aria-describedby\": _vm.ariaDescribedby, \"aria-live\": \"polite\" }, domProps: { \"value\": _vm.model?.toString() }, on: { \"input\": _vm.handleInput } }, \"input\", _vm.$attrs, false), _vm.$listeners)), !_vm.labelOutside && _vm.isValidLabel ? _c(\"label\", { staticClass: \"input-field__label\", attrs: { \"for\": _vm.computedId } }, [_vm._v(\" \" + _vm._s(_vm.label) + \" \")]) : _vm._e(), _c(\"div\", { directives: [{ name: \"show\", rawName: \"v-show\", value: _vm.hasLeadingIcon, expression: \"hasLeadingIcon\" }], staticClass: \"input-field__icon input-field__icon--leading\" }, [_vm._t(\"default\")], 2), _vm.showTrailingButton ? _c(\"NcButton\", { staticClass: \"input-field__trailing-button\", attrs: { \"type\": \"tertiary-no-background\", \"aria-label\": _vm.trailingButtonLabel, \"disabled\": _vm.disabled }, on: { \"click\": _vm.handleTrailingButtonClick }, scopedSlots: _vm._u([{ key: \"icon\", fn: function() {\n    return [_vm._t(\"trailing-button-icon\")];\n  }, proxy: true }], null, true) }) : _vm.success || _vm.error ? _c(\"div\", { staticClass: \"input-field__icon input-field__icon--trailing\" }, [_vm.success ? _c(\"Check\", { staticStyle: { \"color\": \"var(--color-success-text)\" }, attrs: { \"size\": 20 } }) : _vm.error ? _c(\"AlertCircle\", { staticStyle: { \"color\": \"var(--color-error-text)\" }, attrs: { \"size\": 20 } }) : _vm._e()], 1) : _vm._e()], 1), _vm.helperText.length > 0 ? _c(\"p\", { staticClass: \"input-field__helper-text-message\", class: {\n    \"input-field__helper-text-message--error\": _vm.error,\n    \"input-field__helper-text-message--success\": _vm.success\n  }, attrs: { \"id\": `${_vm.inputName}-helper-text` } }, [_vm.success ? _c(\"Check\", { staticClass: \"input-field__helper-text-message__icon\", attrs: { \"size\": 18 } }) : _vm.error ? _c(\"AlertCircle\", { staticClass: \"input-field__helper-text-message__icon\", attrs: { \"size\": 18 } }) : _vm._e(), _vm._v(\" \" + _vm._s(_vm.helperText) + \" \")], 1) : _vm._e()]);\n};\nvar _sfc_staticRenderFns = [];\nvar __component__ = /* @__PURE__ */ normalizeComponent(\n  _sfc_main,\n  _sfc_render,\n  _sfc_staticRenderFns,\n  false,\n  null,\n  \"e4fac465\"\n);\nconst NcInputField = __component__.exports;\nexport {\n  NcInputField as N\n};\n","import { N as NcInputField } from \"./NcInputField-ixTTHy3h.mjs\";\nimport { C as Close } from \"./Close-BtLPUSdO.mjs\";\nimport { A as ArrowRight } from \"./ArrowRight-CY2b9hgN.mjs\";\nimport { n as normalizeComponent } from \"./_plugin-vue2_normalizer-DU4iP6Vu.mjs\";\nimport { r as register, d as t48, e as t17, a as t } from \"./_l10n-B-QPoWAJ.mjs\";\nimport { u as useModelMigration } from \"./useModelMigration-EhAWvqDD.mjs\";\nconst _sfc_main$1 = {\n  name: \"UndoVariantIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nvar _sfc_render$1 = function render() {\n  var _vm = this, _c = _vm._self._c;\n  return _c(\"span\", _vm._b({ staticClass: \"material-design-icon undo-variant-icon\", attrs: { \"aria-hidden\": _vm.title ? null : \"true\", \"aria-label\": _vm.title, \"role\": \"img\" }, on: { \"click\": function($event) {\n    return _vm.$emit(\"click\", $event);\n  } } }, \"span\", _vm.$attrs, false), [_c(\"svg\", { staticClass: \"material-design-icon__svg\", attrs: { \"fill\": _vm.fillColor, \"width\": _vm.size, \"height\": _vm.size, \"viewBox\": \"0 0 24 24\" } }, [_c(\"path\", { attrs: { \"d\": \"M13.5,7A6.5,6.5 0 0,1 20,13.5A6.5,6.5 0 0,1 13.5,20H10V18H13.5C16,18 18,16 18,13.5C18,11 16,9 13.5,9H7.83L10.91,12.09L9.5,13.5L4,8L9.5,2.5L10.92,3.91L7.83,7H13.5M6,18H8V20H6V18Z\" } }, [_vm.title ? _c(\"title\", [_vm._v(_vm._s(_vm.title))]) : _vm._e()])])]);\n};\nvar _sfc_staticRenderFns$1 = [];\nvar __component__$1 = /* @__PURE__ */ normalizeComponent(\n  _sfc_main$1,\n  _sfc_render$1,\n  _sfc_staticRenderFns$1,\n  false,\n  null,\n  null\n);\nconst Undo = __component__$1.exports;\nregister(t17, t48);\nconst NcInputFieldProps = new Set(Object.keys(NcInputField.props));\nconst _sfc_main = {\n  name: \"NcTextField\",\n  components: {\n    NcInputField,\n    Close,\n    ArrowRight,\n    Undo\n  },\n  // Allow forwarding all attributes\n  inheritAttrs: false,\n  model: {\n    prop: \"modelValue\",\n    event: \"update:modelValue\"\n  },\n  props: {\n    /**\n     * Any [NcInputField](#/Components/NcFields?id=ncinputfield) props\n     */\n    // Not an actual prop but needed to show in vue-styleguidist docs\n    // eslint-disable-next-line\n    \" \": {},\n    // Reuse all the props from NcInputField for better typing and documentation\n    ...NcInputField.props,\n    /**\n     * The `aria-label` to set on the trailing button\n     * If no explicit value is set it will default to the one matching the `trailingButtonIcon`:\n     * @default 'Clear text'|'Save changes'|'Undo changes'\n     */\n    trailingButtonLabel: {\n      type: String,\n      default: \"\"\n    },\n    // Custom props\n    /**\n     * Specifies which material design icon should be used for the trailing\n     * button.\n     * @type {'close'|'arrowRight'|'undo'}\n     */\n    trailingButtonIcon: {\n      type: String,\n      default: \"close\",\n      validator: (value) => [\n        \"close\",\n        \"arrowRight\",\n        \"undo\"\n      ].includes(value)\n    }\n  },\n  emits: [\n    /**\n     * Removed in v9 - use `update:modelValue` (`v-model`) instead\n     * @deprecated\n     */\n    \"update:value\",\n    \"update:modelValue\",\n    /** Same as update:modelValue for Vue 2 compatibility */\n    \"update:model-value\"\n  ],\n  setup() {\n    const model = useModelMigration(\"value\", \"update:value\");\n    return {\n      model\n    };\n  },\n  computed: {\n    propsAndAttrsToForward() {\n      const predefinedLabels = {\n        undo: t(\"Undo changes\"),\n        close: t(\"Clear text\"),\n        arrowRight: t(\"Save changes\")\n      };\n      return {\n        // Proxy all the HTML attributes\n        ...this.$attrs,\n        // Proxy original NcInputField's props\n        ...Object.fromEntries(\n          Object.entries(this.$props).filter(([key]) => NcInputFieldProps.has(key))\n        ),\n        // Adjust aria-label for predefined trailing buttons\n        trailingButtonLabel: this.trailingButtonLabel || predefinedLabels[this.trailingButtonIcon]\n      };\n    }\n  },\n  methods: {\n    /**\n     * Focus the input element\n     *\n     * @public\n     */\n    focus() {\n      this.$refs.inputField.focus();\n    },\n    /**\n     * Select all the text in the input\n     *\n     * @public\n     */\n    select() {\n      this.$refs.inputField.select();\n    }\n  }\n};\nvar _sfc_render = function render2() {\n  var _vm = this, _c = _vm._self._c;\n  return _c(\"NcInputField\", _vm._g(_vm._b({ ref: \"inputField\", scopedSlots: _vm._u([_vm.type !== \"search\" ? { key: \"trailing-button-icon\", fn: function() {\n    return [_vm.trailingButtonIcon === \"close\" ? _c(\"Close\", { attrs: { \"size\": 20 } }) : _vm.trailingButtonIcon === \"arrowRight\" ? _c(\"ArrowRight\", { attrs: { \"size\": 20 } }) : _vm.trailingButtonIcon === \"undo\" ? _c(\"Undo\", { attrs: { \"size\": 20 } }) : _vm._e()];\n  }, proxy: true } : null], null, true) }, \"NcInputField\", _vm.propsAndAttrsToForward, false), _vm.$listeners), [_vm._t(\"default\")], 2);\n};\nvar _sfc_staticRenderFns = [];\nvar __component__ = /* @__PURE__ */ normalizeComponent(\n  _sfc_main,\n  _sfc_render,\n  _sfc_staticRenderFns,\n  false,\n  null,\n  null\n);\nconst NcTextField = __component__.exports;\nexport {\n  NcTextField as N\n};\n","<!--\n\t- SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n\t- SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<!-- eslint-disable jsdoc/require-jsdoc -->\n\n<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\n\nimport { t } from '@nextcloud/l10n'\nimport NcDialog from '@nextcloud/vue/dist/Components/NcDialog.js'\nimport NcTextField from '@nextcloud/vue/dist/Components/NcTextField.js'\nimport NcNoteCard from '@nextcloud/vue/dist/Components/NcNoteCard.js'\nimport NcCheckboxRadioSwitch from '@nextcloud/vue/dist/Components/NcCheckboxRadioSwitch.js'\n\nconst emit = defineEmits<{\n\t(e: 'close', mnemonic: string): void\n}>()\n\nconst dialogRef = ref()\nconst mnemonic = ref('')\nconst confirmToggle = ref(false)\n\nconst isFormValid = computed(() => confirmToggle.value === true && mnemonic.value.trim().split(/\\s+/g).length === 12)\n\nfunction submit() {\n\temit('close', mnemonic.value)\n}\n\nconst buttons = computed(() => [\n\t{\n\t\tlabel: t('end_to_en_encryption', 'Submit'),\n\t\tnativeType: 'submit',\n\t\ttype: 'primary',\n\t\tdisabled: !isFormValid.value,\n\t\tcallback: submit,\n\t},\n])\n</script>\n<template>\n\t<NcDialog ref=\"dialogRef\"\n\t\t:name=\"t('end_to_end_encryption', 'Enter your 12 words mnemonic')\"\n\t\t:buttons=\"buttons\"\n\t\t:is-form=\"true\"\n\t\t@submit=\"submit\">\n\t\t<NcNoteCard type=\"warning\"\n\t\t\t:show-alert=\"true\"\n\t\t\t:heading=\"t('end_to_end_encryption', 'Decrypting your files in the browser can weaken security')\">\n\t\t\t{{ t('end_to_end_encryption', 'The server could serve malicious source code to extract the secret that protects your files.') }}\n\n\t\t\t<NcCheckboxRadioSwitch v-model=\"confirmToggle\"\n\t\t\t\t:required=\"true\"\n\t\t\t\tdata-cy-e2ee-mnemonic-prompt=\"i_understand_the_risks\"\n\t\t\t\ttype=\"switch\">\n\t\t\t\t{{ t('end_to_end_encryption', 'I understand the risks') }}\n\t\t\t</NcCheckboxRadioSwitch>\n\t\t</NcNoteCard>\n\n\t\t<NcTextField :value.sync=\"mnemonic\"\n\t\t\trequired=\"true\"\n\t\t\tpattern=\"^(\\w+\\s+){11}\\w+$\"\n\t\t\t:label=\"t('end_to_end_encryption', 'Mnemonic')\"\n\t\t\t:autofocus=\"true\" />\n\t</NcDialog>\n</template>\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/* eslint-disable jsdoc/require-jsdoc */\n\nimport { spawnDialog } from '@nextcloud/dialogs'\nimport '@nextcloud/dialogs/style.css'\n\nimport MnemonicPromptDialog from '../components/MnemonicPromptDialog.vue'\n\nexport async function promptUserForMnemonic(): Promise<string> {\n\tconst promiseWithResolvers = Promise.withResolvers<string>()\n\n\tspawnDialog(\n\t\tMnemonicPromptDialog,\n\t\tundefined,\n\t\t(mnemonic) => {\n\t\t\tif (mnemonic !== undefined) {\n\t\t\t\tpromiseWithResolvers.resolve(mnemonic as string)\n\t\t\t} else {\n\t\t\t\tpromiseWithResolvers.reject()\n\t\t\t}\n\t\t},\n\t)\n\n\treturn promiseWithResolvers.promise\n}\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport type { Metadata, MetadataInfo } from '../models'\nimport logger from './logger.ts'\nimport { base64ToBuffer } from './bufferUtils.ts'\nimport { decryptWithAES, decryptWithRSA, exportAESKey, loadAESPrivateKey, sha256Hash } from './crypto.ts'\n\n/* eslint-disable jsdoc/require-jsdoc */\n\nexport async function decryptMetadataInfo(metadata: Metadata, metadataPrivateKey: CryptoKey): Promise<MetadataInfo> {\n\tlogger.debug('Decrypting metadata info', { metadata })\n\n\tconst [encryptedMetadata, iv] = metadata.metadata.ciphertext.split('|')\n\n\tconst compressedMetadataInfo = await decryptWithAES(\n\t\tbase64ToBuffer(encryptedMetadata),\n\t\tmetadataPrivateKey,\n\t\t{ iv: base64ToBuffer(iv) },\n\t)\n\n\tconst metadataInfo = JSON.parse(await unzipBuffer(compressedMetadataInfo)) as MetadataInfo\n\n\tvalidateKeyChecksums(metadataInfo, metadata)\n\tawait validateMetadataKeyChecksum(metadataInfo, metadataPrivateKey)\n\n\treturn metadataInfo\n}\n\nfunction validateKeyChecksums(metadataInfo: MetadataInfo, metadata: Metadata): void {\n\tif (metadataInfo.keyChecksums?.length !== metadata.users?.length) {\n\t\tthrow new Error('Key checksums length does not match users length')\n\t}\n}\n\nasync function validateMetadataKeyChecksum(metadataInfo: MetadataInfo, metadataPrivateKey: CryptoKey): Promise<void> {\n\tif (metadataInfo.keyChecksums === undefined) {\n\t\treturn\n\t}\n\n\tconst privateKeyBuffer = await exportAESKey(metadataPrivateKey)\n\tconst privateKeyHash = await sha256Hash(privateKeyBuffer)\n\n\tif (!metadataInfo.keyChecksums.includes(privateKeyHash)) {\n\t\tthrow new Error('Key checksum is not in keyChecksums')\n\t}\n}\n\nasync function unzipBuffer(buffer: ArrayBuffer): Promise<string> {\n\tconst stream = new ReadableStream({\n\t\tstart(controller) {\n\t\t\tcontroller.enqueue(new Uint8Array(buffer))\n\t\t\tcontroller.close()\n\t\t},\n\t})\n\n\tconst decompressedStream = stream.pipeThrough(new DecompressionStream('gzip'))\n\treturn await new Response(decompressedStream).text()\n}\n\nexport async function getMetadataPrivateKey(metadata: Metadata, userId: string, privateKey: CryptoKey): Promise<CryptoKey> {\n\tlogger.debug('Getting metadata private key', { metadata, userId })\n\n\tconst userInfo = metadata.users?.find(user => user.userId === userId)\n\n\tif (!userInfo) {\n\t\tthrow new Error('User not found in metadata')\n\t}\n\n\tconst encryptedMetadataPrivateKey = base64ToBuffer(userInfo.encryptedMetadataKey)\n\tconst rawMetadataPrivateKey = await decryptWithRSA(encryptedMetadataPrivateKey, privateKey)\n\treturn await loadAESPrivateKey(new Uint8Array(rawMetadataPrivateKey))\n}\n","/* eslint-disable jsdoc/require-jsdoc */\n/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport type { Metadata, RootMetadata } from '../models'\nimport { validateCertificateSignature, validateCMSSignature } from './crypto.ts'\nimport { base64ToBuffer, stringToBuffer } from './bufferUtils.ts'\n\nexport async function validateMetadataSignature(metadata: Metadata, signature: string, rootMetadata: RootMetadata): Promise<true> {\n\tconst signedData = JSON.stringify(metadata, (key, value) => {\n\t\tif (key === 'filedrop') {\n\t\t\treturn undefined\n\t\t}\n\t\treturn value\n\t})\n\n\tconst verificationResult = await validateCMSSignature(\n\t\tstringToBuffer(btoa(signedData)),\n\t\tbase64ToBuffer(signature),\n\t\trootMetadata.users,\n\t)\n\n\tif (!verificationResult) {\n\t\tthrow new Error('Metadata signature verification failed')\n\t}\n\n\treturn verificationResult\n}\n\nexport async function validateUserCertificates(metadata: RootMetadata, serverPublicKey: CryptoKey): Promise<true[]> {\n\tconst verifications = metadata.users.map(async ({ userId, certificate }) => {\n\t\tconst result = await validateCertificateSignature(certificate, serverPublicKey)\n\n\t\tif (!result) {\n\t\t\tthrow new Error(`Certificate verification failed for user ${userId}`)\n\t\t}\n\n\t\treturn result\n\t})\n\n\treturn await Promise.all(verifications)\n}\n","/* eslint-disable jsdoc/require-jsdoc */\n/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport { dirname } from 'path'\n\nimport { getCurrentUser } from '@nextcloud/auth'\nimport { getClient, getDefaultPropfind } from '@nextcloud/files/dav'\n\nimport { isRootMetadata, type Metadata, type MetadataInfo, type RootMetadata } from '../models.ts'\nimport { decryptPrivateKey } from './privateKeyUtils'\nimport { getPrivateKey, getServerPublicKey } from './api.ts'\nimport { promptUserForMnemonic } from './mnemonicDialogs.ts'\nimport { decryptMetadataInfo, getMetadataPrivateKey } from './metadataUtils.ts'\nimport logger from './logger.ts'\nimport { validateMetadataSignature, validateUserCertificates } from './security.ts'\n\nconst davClient = getClient()\n\nexport const state = {\n\t_userPrivateKey: undefined as CryptoKey | undefined,\n\t_serverPublicKey: undefined as CryptoKey | undefined,\n\t_metadataCache: {} as Record<string, Metadata>,\n\n\tasync getUserPrivateKey(): Promise<CryptoKey> {\n\t\tthis._userPrivateKey ??= await decryptPrivateKey(await getPrivateKey(), await promptUserForMnemonic())\n\t\treturn this._userPrivateKey\n\t},\n\n\tasync getServerPublicKey(): Promise<CryptoKey> {\n\t\tthis._serverPublicKey ??= await getServerPublicKey()\n\t\treturn this._serverPublicKey\n\t},\n\n\tasync getMetadata(path: string): Promise<Metadata> {\n\t\tif (this._metadataCache[path]) {\n\t\t\tlogger.debug('Found metadata in cache', { path, state })\n\t\t\treturn this._metadataCache[path]\n\t\t}\n\n\t\t// The PROPFIND will be intercepted by the WebDAV proxy, and the metadata will be saved in the cache.\n\t\t// Hence, we can directly return the content of the cache.\n\t\tlogger.debug('Fetching PROPFIND for metadata', { path, state })\n\t\tawait davClient.stat(decodeURI(path).replace('remote.php/dav/', ''), { details: true, data: getDefaultPropfind() })\n\n\t\tif (this._metadataCache[path]) {\n\t\t\tlogger.debug('Found metadata in cache after PROPFIND', { path, state })\n\t\t\treturn this._metadataCache[path]\n\t\t}\n\n\t\tthrow new Error(`Could not find metadata for ${path}`)\n\t},\n\n\tasync setMetadata(path: string, rawMetadata: string, metadataSignature: string): Promise<void> {\n\t\tconst metadata = JSON.parse(rawMetadata) as Metadata\n\n\t\tif (isRootMetadata(metadata)) {\n\t\t\tawait validateMetadataSignature(metadata, metadataSignature, metadata)\n\t\t\tawait validateUserCertificates(metadata, await this.getServerPublicKey())\n\t\t} else {\n\t\t\tawait validateMetadataSignature(metadata, metadataSignature, await this.getRootMetadata(dirname(path)))\n\t\t}\n\n\t\tthis._metadataCache[path] = metadata\n\t\tlogger.debug('Added metadata in cache', { path, state })\n\t},\n\n\tasync getMetadataInfo(path: string): Promise<MetadataInfo> {\n\t\tconst metadata = await this.getMetadata(path)\n\t\tconst rootMetadata = await this.getRootMetadata(path)\n\n\t\tconst currentUser = getCurrentUser()\n\t\tif (currentUser === null) {\n\t\t\tthrow new Error('No user logged in')\n\t\t}\n\n\t\treturn decryptMetadataInfo(\n\t\t\tmetadata,\n\t\t\tawait getMetadataPrivateKey(rootMetadata, currentUser.uid, await state.getUserPrivateKey()),\n\t\t)\n\t},\n\n\tasync getRootMetadata(path: string): Promise<RootMetadata> {\n\t\tconst cachedRootMetadata = Object.entries(state._metadataCache)\n\t\t\t.filter(([metadataPath]) => path.startsWith(metadataPath))\n\t\t\t.map(([, metadata]) => metadata)\n\t\t\t.find(metadata => isRootMetadata(metadata))\n\n\t\tif (cachedRootMetadata) {\n\t\t\tlogger.debug('Found root metadata in cache', { path, state })\n\t\t\treturn cachedRootMetadata\n\t\t}\n\n\t\tlogger.debug('Looking for root metadata', { path, state })\n\t\twhile (path !== '/') {\n\t\t\tconst metadata = await state.getMetadata(path)\n\n\t\t\tif (isRootMetadata(metadata)) {\n\t\t\t\tlogger.debug('Fetched root metadata', { path, state })\n\t\t\t\treturn metadata\n\t\t\t}\n\n\t\t\tpath = dirname(path)\n\t\t}\n\n\t\tthrow new Error(`Found no root metadata for ${path}`)\n\t},\n}\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/* eslint-disable jsdoc/require-jsdoc */\n\nimport { type DAVResult, parseStat, parseXML } from 'webdav'\nimport { XMLBuilder } from 'fast-xml-parser'\nimport { basename, dirname } from 'path'\n\nimport { state } from './state.ts'\nimport { isRootMetadata, type FileEncryptionInfo, type MetadataInfo } from '../models'\nimport logger from './logger.ts'\nimport { decryptWithAES, loadAESPrivateKey } from './crypto.ts'\nimport { base64ToBuffer } from './bufferUtils.ts'\n\nlet originalFetch: typeof window.fetch\n\nexport function setupWebDavDecryptionProxy() {\n\toriginalFetch = window.fetch\n\tlogger.debug('Setting up WebDAV decryption proxy')\n\n\twindow.fetch = async (input: RequestInfo | URL, config: RequestInit = {}): Promise<Response> => {\n\t\tlet request = new Request(input, config)\n\n\t\tif (!(request.url.includes('/remote.php/dav/files/') && (request.method === 'GET' || request.method === 'PROPFIND'))) {\n\t\t\treturn originalFetch(request)\n\t\t}\n\n\t\tlogger.debug(`Proxying ${request.method} ${request.url}`, { request })\n\n\t\tconst headers = new Headers(request.headers)\n\t\theaders.set('X-E2EE-SUPPORTED', 'true')\n\t\trequest = new Request(request, { headers })\n\n\t\tswitch (request.method) {\n\t\tcase 'PROPFIND':\n\t\t\treturn handlePropFind(request)\n\t\tcase 'GET':\n\t\tdefault:\n\t\t\treturn handleGet(request)\n\t\t}\n\t}\n}\n\nasync function handleGet(request: Request): Promise<Response> {\n\tconst path = new URL(request.url).pathname\n\tconst responsePromise = originalFetch(request)\n\n\ttry {\n\t\t// TODO: Optimize, this will make a propfind request for every GET request even when not encrypted.\n\t\tconst metadataInfo = await state.getMetadataInfo(dirname(path))\n\n\t\tconst fileInfo = metadataInfo.files[basename(request.url)]\n\t\tif (fileInfo === undefined) {\n\t\t\tlogger.debug('Could not find file in metadata', { path, metadataInfo })\n\t\t\tthrow new Error('Could not find file in metadata')\n\t\t}\n\n\t\tlogger.debug('Fetching encrypted file', { request })\n\t\treturn await decryptFile(await responsePromise, fileInfo)\n\t} catch (error) {\n\t\treturn await responsePromise\n\t}\n}\n\nasync function handlePropFind(request: Request) {\n\tlogger.debug('Fetching raw PROPFIND', { request })\n\tconst response = await originalFetch(request)\n\tconst path = new URL(request.url).pathname\n\tconst body = await response.text()\n\tconst xml = await parseXML(body)\n\tconst stat = parseStat(xml, path, true)\n\n\tif (stat.props?.['e2ee-is-encrypted'] !== 1) {\n\t\tlogger.debug('Node is not e2ee', { xml })\n\t\treturn new Response(body, response)\n\t}\n\n\tif (stat.type === 'directory') {\n\t\tconst rawMetadata = stat.props['e2ee-metadata'] as string|undefined\n\t\tconst metadataSignature = stat.props['e2ee-metadata-signature'] as string|undefined\n\t\tif (rawMetadata !== undefined && metadataSignature !== undefined) {\n\t\t\tawait state.setMetadata(\n\t\t\t\tpath,\n\t\t\t\trawMetadata,\n\t\t\t\tmetadataSignature,\n\t\t\t)\n\t\t}\n\n\t\tconst metadata = await state.getMetadata(path)\n\t\tconst metadataInfo = await state.getMetadataInfo(path)\n\n\t\tif (isRootMetadata(metadata)) {\n\t\t\treplacePlaceholdersInPropfind(xml, path, metadataInfo)\n\t\t} else {\n\t\t\tconst parentMetadataInfo = await state.getMetadataInfo(dirname(path))\n\t\t\treplacePlaceholdersInPropfind(xml, path, metadataInfo, parentMetadataInfo)\n\t\t}\n\t} else if (stat.type === 'file') {\n\t\tconst parentMetadataInfo = await state.getMetadataInfo(dirname(path))\n\n\t\tif (parentMetadataInfo === undefined) {\n\t\t\tlogger.debug('Cannot find metadata for parent folder', { path })\n\t\t\treturn new Response(body, response)\n\t\t}\n\n\t\treplacePlaceholdersInPropfind(xml, path, undefined, parentMetadataInfo)\n\t}\n\n\treturn new Response(new XMLBuilder().build(xml), response)\n}\n\nexport function replacePlaceholdersInPropfind(xml: DAVResult, path: string, decryptedMetadata?: MetadataInfo, decryptedParentMetadata?: MetadataInfo): void {\n\tlogger.debug('Updating PROPFIND info', { path, decryptedMetadata, decryptedParentMetadata, xml })\n\n\txml.multistatus.response.forEach((childNode) => {\n\t\tif (childNode.propstat === undefined) {\n\t\t\treturn\n\t\t}\n\n\t\tconst relevantMetadataInfo = childNode.href === path ? decryptedParentMetadata : decryptedMetadata\n\n\t\tif (relevantMetadataInfo === undefined) {\n\t\t\treturn\n\t\t}\n\n\t\tconst identifier = childNode.propstat.prop.displayname\n\t\tlet name = identifier\n\n\t\tif (relevantMetadataInfo.files[identifier]) {\n\t\t\tname = relevantMetadataInfo.files[identifier].filename\n\t\t\tchildNode.propstat.prop.getcontenttype = relevantMetadataInfo.files[identifier].mimetype\n\t\t} else if (relevantMetadataInfo.folders[identifier]) {\n\t\t\tname = relevantMetadataInfo.folders[identifier]\n\t\t\tchildNode.propstat.prop.getcontenttype = 'httpd/unix-directory'\n\t\t}\n\n\t\tchildNode.propstat.prop.displayname = name\n\t\t// TODO: Enable more feature by keeping permissions\n\t\tchildNode.propstat.prop.permissions = (childNode.propstat.prop.permissions as string).replace(/(R)|(D)|(N)|(V)|(W)|(CK)/g, '')\n\t})\n}\n\nexport async function decryptFile(response: Response, fileEncryptionInfo: FileEncryptionInfo): Promise<Response> {\n\tconst decryptedFileContent = await decryptWithAES(\n\t\tnew Uint8Array(await response.arrayBuffer()),\n\t\tawait loadAESPrivateKey(base64ToBuffer(fileEncryptionInfo.key)),\n\t\t{ iv: base64ToBuffer(fileEncryptionInfo.nonce) },\n\t)\n\n\treturn new Response(decryptedFileContent, response)\n}\n","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" id=\\\"mdi-arrow-down\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z\\\" /></svg>\"","/*!\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nimport type { Node } from '@nextcloud/files'\nimport type { ShareAttribute } from './sharing.ts'\n\nimport { Permission } from '@nextcloud/files'\n\n/**\n * Check permissions on the node if it can be downloaded\n * @param node The node to check\n * @return True if downloadable, false otherwise\n */\nexport function isDownloadable(node: Node): boolean {\n\tif ((node.permissions & Permission.READ) === 0) {\n\t\treturn false\n\t}\n\n\t// If the mount type is a share, ensure it got download permissions.\n\tif (node.attributes['share-attributes']) {\n\t\tconst shareAttributes = JSON.parse(node.attributes['share-attributes'] || '[]') as Array<ShareAttribute>\n\t\tconst downloadAttribute = shareAttributes.find(({ scope, key }: ShareAttribute) => scope === 'permissions' && key === 'download')\n\t\tif (downloadAttribute !== undefined) {\n\t\t\treturn downloadAttribute.value === true\n\t\t}\n\t}\n\n\treturn true\n}\n","/**\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/* eslint-disable jsdoc/require-jsdoc */\n\nimport ArrowDownSvg from '@mdi/svg/svg/arrow-down.svg?raw'\n\nimport { t } from '@nextcloud/l10n'\nimport { FileAction, Node, FileType, DefaultType } from '@nextcloud/files'\n\nimport { isDownloadable } from './permissions.ts'\n\nasync function downloadNodes([file]: Node[]) {\n\tconst response = await fetch(file.encodedSource)\n\tconst decryptedFileContent = await response.arrayBuffer()\n\tconst blob = new Blob([decryptedFileContent], { type: file.mime })\n\n\tconst link = document.createElement('a')\n\tlink.href = window.URL.createObjectURL(blob)\n\tlink.download = file.displayname\n\tlink.click()\n}\n\nexport default new FileAction({\n\tid: 'download_unencrypted',\n\tdefault: DefaultType.DEFAULT,\n\n\tdisplayName: () => t('files', 'Download unencrypted'),\n\ticonSvgInline: () => ArrowDownSvg,\n\n\tenabled(nodes: Node[]) {\n\t\tif (nodes.length !== 1) {\n\t\t\treturn false\n\t\t}\n\n\t\tif (nodes.some(node => node.attributes['e2ee-is-encrypted'] === 1)) {\n\t\t\treturn false\n\t\t}\n\n\t\t// We can only download dav ressource\n\t\tif (nodes.some(node => !node.isDavRessource)) {\n\t\t\treturn false\n\t\t}\n\n\t\t// We can only download files\n\t\tif (nodes.some(node => node.type !== FileType.File)) {\n\t\t\treturn false\n\t\t}\n\n\t\treturn nodes.every(isDownloadable)\n\t},\n\n\tasync exec(node: Node) {\n\t\tdownloadNodes([node])\n\t\treturn null\n\t},\n\n\torder: 30,\n})\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/* eslint-disable jsdoc/require-jsdoc */\n\nimport { loadState } from '@nextcloud/initial-state'\nimport { registerFileAction, getFileActions, Node, View } from '@nextcloud/files'\nimport { registerDavProperty } from '@nextcloud/files/dav'\n\nimport { setupWebDavDecryptionProxy } from './services/webDavProxy.ts'\nimport downloadUnencryptedAction from './services/downloadUnencryptedAction.ts'\nimport logger from './services/logger.ts'\n\nconst userConfig = loadState('end_to_end_encryption', 'userConfig', { e2eeInBrowserEnabled: false })\n\nif (userConfig.e2eeInBrowserEnabled) {\n\tsetupWebDavDecryptionProxy()\n\tregisterDavProperty('nc:e2ee-metadata', { nc: 'http://nextcloud.org/ns' })\n\tregisterDavProperty('nc:e2ee-metadata-signature', { nc: 'http://nextcloud.org/ns' })\n\tregisterFileAction(downloadUnencryptedAction)\n\tdisableFileAction('download')\n\tdisableFileAction('move-copy')\n}\n\nfunction disableFileAction(actionId: string) {\n\tlogger.debug('Disabling file action', { actionId })\n\tconst actions = getFileActions()\n\n\tconst action = actions.find(action => action.id === actionId) as any\n\tconst originalEnabled = action._action.enabled\n\n\taction._action.enabled = (nodes: Node[], view: View) => {\n\t\tif (nodes.some(node => node.attributes['e2ee-is-encrypted'] === 1)) {\n\t\t\treturn false\n\t\t}\n\n\t\treturn originalEnabled(nodes, view)\n\t}\n}\n"],"names":["resolve","reject","t","e","o","n","i","r","s","a","u","c","l","d","m","g","y","v","h","b","w","p","f","x","N","P","A","O","E","T","j","S","$","C","I","k","process","X","Y","_t","_e","_a","_c","define_process_env_default","logger","generateRemoteUrl","createClient","getPatcher","util$3","R","util","require$$0","defaultOptions","validator","re","val","buildOptions","xmlNode","readDocType","entityName","toNumber","getIgnoreAttributesFn","ignoreAttributes","require$$1","require$$2","require$$3","require$$4","_","replaceEntitiesValue","result","OrderedObjParser","prettify","propName","XMLParser","attStr","L","_32n","state","B","D","F","K","SHA1","G","H","SHA256","le","_l","SHA512","SHA384","asn1js.fromBER","pvtsutils.Convert","pvutils.getParametersValue","asn1js.Sequence","asn1js.ObjectIdentifier","asn1js.Any","pvutils.clearProps","asn1js.compareSchema","asn1js.Utf8String","asn1js.BmpString","asn1js.UniversalString","asn1js.NumericString","asn1js.PrintableString","asn1js.TeletexString","asn1js.VideotexString","asn1js.IA5String","asn1js.GraphicString","asn1js.VisibleString","asn1js.GeneralString","asn1js.CharacterString","pvtsutils.BufferSourceConverter","asn1js.Repeated","asn1js.Set","pvutils.isEqualBuffer","asn1js.Constructed","asn1js.Choice","asn1js.Primitive","asn1js.OctetString","asn1js.Integer","asn1js.GeneralizedTime","asn1js.Boolean","pvutils.utilConcatBuf","asn1js.BitString","asn1js.Null","asn1js.RawData","pvutils.toBase64","pvutils.arrayBufferToString","pvutils.stringToArrayBuffer","pvutils.fromBase64","pvutils.nearestPowerOf2","crypto","engine","bs.SeqStream","bs.ByteStream","pvutils.utilFromBase","pvutils.utilToBase","pvutils.bufferToHexCodes","asn1js.Enumerated","TimeType","asn1js.UTCTime","kdfResult","aesKwKey","algorithmId","contentEncryptionAlgorithm","ChainValidationCode","Request","PKIStatus","__spreadValues","__spreadProps","axios","generateOcsUrl","_sfc_main","_sfc_render","_sfc_staticRenderFns","__component__","render","render2","ref","dirname","basename","parseXML","parseStat","XMLBuilder","action"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,34,35,36,37,44]}